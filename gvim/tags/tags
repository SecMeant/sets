!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASN1CEREncUTF8String	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1CEREncUTF8String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t length,WCHAR *value) { return ASN1BEREncUTF8String(enc,tag,length,value); }$/;"	f
ASN1DEREncBeginBlk	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncBeginBlk(ASN1encoding_t enc,ASN1blocktype_e eBlkType,void **ppBlk) { return ASN1CEREncBeginBlk(enc,eBlkType,ppBlk); }$/;"	f
ASN1DEREncBitString	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncBitString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1octet_t *val) { return ASN1BEREncBitString(enc,tag,len,val); }$/;"	f
ASN1DEREncChar16String	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncChar16String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1char16_t *val) { return ASN1BEREncChar16String(enc,tag,len,val); }$/;"	f
ASN1DEREncChar32String	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncChar32String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1char32_t *val) { return ASN1BEREncChar32String(enc,tag,len,val); }$/;"	f
ASN1DEREncCharString	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncCharString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1char_t *val) { return ASN1BEREncCharString(enc,tag,len,val); }$/;"	f
ASN1DEREncEndBlk	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncEndBlk(void *pBlk) { return ASN1CEREncEndBlk(pBlk); }$/;"	f
ASN1DEREncFlushBlkElement	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncFlushBlkElement(void *pBlk) { return ASN1CEREncFlushBlkElement(pBlk); }$/;"	f
ASN1DEREncGeneralizedTime	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncGeneralizedTime(ASN1encoding_t enc,ASN1uint32_t tag,ASN1generalizedtime_t *val) { return ASN1CEREncGeneralizedTime(enc,tag,val); }$/;"	f
ASN1DEREncMultibyteString	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncMultibyteString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1charstring_t *val) { return ASN1BEREncMultibyteString(enc,tag,val); }$/;"	f
ASN1DEREncNewBlkElement	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncNewBlkElement(void *pBlk,ASN1encoding_t *enc2) { return ASN1CEREncNewBlkElement(pBlk,enc2); }$/;"	f
ASN1DEREncOctetString	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncOctetString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t len,ASN1octet_t *val) { return ASN1BEREncOctetString(enc,tag,len,val); }$/;"	f
ASN1DEREncUTCTime	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncUTCTime(ASN1encoding_t enc,ASN1uint32_t tag,ASN1utctime_t *val) { return ASN1CEREncUTCTime(enc,tag,val); }$/;"	f
ASN1DEREncUTF8String	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncUTF8String(ASN1encoding_t enc,ASN1uint32_t tag,ASN1uint32_t length,WCHAR *value) { return ASN1BEREncUTF8String(enc,tag,length,value); }$/;"	f
ASN1DEREncZeroMultibyteString	.\msber.h	/^  __CRT_INLINE int WINAPI ASN1DEREncZeroMultibyteString(ASN1encoding_t enc,ASN1uint32_t tag,ASN1ztcharstring_t val) { return ASN1BEREncZeroMultibyteString(enc,tag,val); }$/;"	f
Abort	.\gdiplus\gdiplustypes.h	/^	virtual HRESULT __stdcall Abort(void) {}$/;"	f	struct:GdiplusAbort
ActivateInstance	.\wrl\client.h	/^            inline HRESULT ActivateInstance(HSTRING classid, ::Microsoft::WRL::Details::ComPtrRef<T> instance) throw() {$/;"	f	namespace:ABI::Windows::Foundation
ActivateInstance	.\wrl\client.h	/^        inline HRESULT ActivateInstance(HSTRING classid, ::Microsoft::WRL::Details::ComPtrRef<T> instance) throw() {$/;"	f	namespace:Windows::Foundation
Add	.\dxtmpl.h	/^inline int CDXArray<TYPE,ARG_TYPE>::Add(ARG_TYPE newElement) {$/;"	f	class:CDXArray
Add	.\msputils.h	/^  WINBOOL Add(T &t) {$/;"	f	class:CMSPArray
AddArc	.\gdiplus\gdipluspath.h	/^	Status AddArc(INT x, INT y, INT width, INT height,$/;"	f	class:GraphicsPath
AddArc	.\gdiplus\gdipluspath.h	/^	Status AddArc(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:GraphicsPath
AddArc	.\gdiplus\gdipluspath.h	/^	Status AddArc(const Rect& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddArc	.\gdiplus\gdipluspath.h	/^	Status AddArc(const RectF& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddBezier	.\gdiplus\gdipluspath.h	/^	Status AddBezier(INT x1, INT y1, INT x2, INT y2,$/;"	f	class:GraphicsPath
AddBezier	.\gdiplus\gdipluspath.h	/^	Status AddBezier(REAL x1, REAL y1, REAL x2, REAL y2,$/;"	f	class:GraphicsPath
AddBezier	.\gdiplus\gdipluspath.h	/^	Status AddBezier(const Point& pt1, const Point& pt2,$/;"	f	class:GraphicsPath
AddBezier	.\gdiplus\gdipluspath.h	/^	Status AddBezier(const PointF& pt1, const PointF& pt2,$/;"	f	class:GraphicsPath
AddBeziers	.\gdiplus\gdipluspath.h	/^	Status AddBeziers(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddBeziers	.\gdiplus\gdipluspath.h	/^	Status AddBeziers(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	.\gdiplus\gdipluspath.h	/^	Status AddClosedCurve(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	.\gdiplus\gdipluspath.h	/^	Status AddClosedCurve(const Point *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddClosedCurve	.\gdiplus\gdipluspath.h	/^	Status AddClosedCurve(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddClosedCurve	.\gdiplus\gdipluspath.h	/^	Status AddClosedCurve(const PointF *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddCurve	.\gdiplus\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddCurve	.\gdiplus\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count, INT offset,$/;"	f	class:GraphicsPath
AddCurve	.\gdiplus\gdipluspath.h	/^	Status AddCurve(const Point *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddCurve	.\gdiplus\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddCurve	.\gdiplus\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count, INT offset,$/;"	f	class:GraphicsPath
AddCurve	.\gdiplus\gdipluspath.h	/^	Status AddCurve(const PointF *points, INT count, REAL tension)$/;"	f	class:GraphicsPath
AddEllipse	.\gdiplus\gdipluspath.h	/^	Status AddEllipse(INT x, INT y, INT width, INT height)$/;"	f	class:GraphicsPath
AddEllipse	.\gdiplus\gdipluspath.h	/^	Status AddEllipse(REAL x, REAL y, REAL width, REAL height)$/;"	f	class:GraphicsPath
AddEllipse	.\gdiplus\gdipluspath.h	/^	Status AddEllipse(const Rect& rect)$/;"	f	class:GraphicsPath
AddEllipse	.\gdiplus\gdipluspath.h	/^	Status AddEllipse(const RectF& rect)$/;"	f	class:GraphicsPath
AddFontFile	.\gdiplus\gdiplusimpl.h	/^__inline__ Status PrivateFontCollection::AddFontFile(const WCHAR *filename)$/;"	f	class:PrivateFontCollection
AddHead	.\dxtmpl.h	/^DXLISTPOS CDXList<TYPE,ARG_TYPE>::AddHead(ARG_TYPE newElement) {$/;"	f	class:CDXList
AddHead	.\dxtmpl.h	/^void CDXList<TYPE,ARG_TYPE>::AddHead(CDXList *pNewList) {$/;"	f	class:CDXList
AddLine	.\gdiplus\gdipluspath.h	/^	Status AddLine(INT x1, INT y1, INT x2, INT y2)$/;"	f	class:GraphicsPath
AddLine	.\gdiplus\gdipluspath.h	/^	Status AddLine(REAL x1, REAL y1, REAL x2, REAL y2)$/;"	f	class:GraphicsPath
AddLine	.\gdiplus\gdipluspath.h	/^	Status AddLine(const Point& pt1, const Point& pt2)$/;"	f	class:GraphicsPath
AddLine	.\gdiplus\gdipluspath.h	/^	Status AddLine(const PointF& pt1, const PointF& pt2)$/;"	f	class:GraphicsPath
AddLines	.\gdiplus\gdipluspath.h	/^	Status AddLines(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddLines	.\gdiplus\gdipluspath.h	/^	Status AddLines(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddMemoryFont	.\gdiplus\gdiplusimpl.h	/^__inline__ Status PrivateFontCollection::AddMemoryFont($/;"	f	class:PrivateFontCollection
AddMetafileComment	.\gdiplus\gdiplusgraphics.h	/^	Status AddMetafileComment(const BYTE *data, UINT sizeData)$/;"	f	class:Graphics
AddPath	.\gdiplus\gdipluspath.h	/^	Status AddPath(const GraphicsPath *addingPath, BOOL connect)$/;"	f	class:GraphicsPath
AddPie	.\gdiplus\gdipluspath.h	/^	Status AddPie(INT x, INT y, INT width, INT height,$/;"	f	class:GraphicsPath
AddPie	.\gdiplus\gdipluspath.h	/^	Status AddPie(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:GraphicsPath
AddPie	.\gdiplus\gdipluspath.h	/^	Status AddPie(const Rect& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddPie	.\gdiplus\gdipluspath.h	/^	Status AddPie(const RectF& rect, REAL startAngle, REAL sweepAngle)$/;"	f	class:GraphicsPath
AddPolygon	.\gdiplus\gdipluspath.h	/^	Status AddPolygon(const Point *points, INT count)$/;"	f	class:GraphicsPath
AddPolygon	.\gdiplus\gdipluspath.h	/^	Status AddPolygon(const PointF *points, INT count)$/;"	f	class:GraphicsPath
AddRectangle	.\gdiplus\gdipluspath.h	/^	Status AddRectangle(const Rect& rect)$/;"	f	class:GraphicsPath
AddRectangle	.\gdiplus\gdipluspath.h	/^	Status AddRectangle(const RectF& rect)$/;"	f	class:GraphicsPath
AddRectangles	.\gdiplus\gdipluspath.h	/^	Status AddRectangles(const Rect *rects, INT count)$/;"	f	class:GraphicsPath
AddRectangles	.\gdiplus\gdipluspath.h	/^	Status AddRectangles(const RectF *rects, INT count)$/;"	f	class:GraphicsPath
AddRef	.\comip.h	/^  void AddRef() {$/;"	f	class:_com_ptr_t
AddRef	.\comutil.h	/^inline unsigned __LONG32 _bstr_t::Data_t::AddRef() throw() {$/;"	f	class:_bstr_t::Data_t
AddString	.\gdiplus\gdipluspath.h	/^	Status AddString(const WCHAR *string, INT length,$/;"	f	class:GraphicsPath
AddTail	.\dxtmpl.h	/^DXLISTPOS CDXList<TYPE,ARG_TYPE>::AddTail(ARG_TYPE newElement) {$/;"	f	class:CDXList
AddTail	.\dxtmpl.h	/^void CDXList<TYPE,ARG_TYPE>::AddTail(CDXList *pNewList) {$/;"	f	class:CDXList
Address32To64	.\psdk_inc\_dbg_common.h	/^  static __inline void Address32To64(LPADDRESS a32,LPADDRESS64 a64) {$/;"	f
Address64To32	.\psdk_inc\_dbg_common.h	/^  static __inline void Address64To32(LPADDRESS64 a64,LPADDRESS a32) {$/;"	f
AdjustableArrowCap	.\gdiplus\gdipluslinecaps.h	/^	AdjustableArrowCap(GpCustomLineCap *customLineCap, Status status):$/;"	f	class:AdjustableArrowCap
AdjustableArrowCap	.\gdiplus\gdipluslinecaps.h	/^	AdjustableArrowCap(REAL height, REAL width, BOOL isFilled):$/;"	f	class:AdjustableArrowCap
AllocBlobTable	.\netmon.h	/^  static __inline PBLOB_TABLE AllocBlobTable(DWORD dwNumBlobs) {$/;"	f
AllocMBlobTable	.\netmon.h	/^  static __inline PMBLOB_TABLE AllocMBlobTable(DWORD dwNumBlobs) {$/;"	f
AllocateArrays	.\gdiplus\gdiplusimpl.h	/^__inline__ Status PathData::AllocateArrays(INT capacity)$/;"	f	class:PathData
Append	.\dxtmpl.h	/^int CDXArray<TYPE,ARG_TYPE>::Append(const CDXArray &src) {$/;"	f	class:CDXArray
AppendTailList	.\ddk\wdm.h	/^AppendTailList($/;"	f
ArcSegment	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_ARC_SEGMENT ArcSegment(const D2D1_POINT_2F &point, const D2D1_SIZE_F &size, const FLOAT rotationAngle, D2D1_SWEEP_DIRECTION sweepDirection, D2D1_ARC_SIZE arcSize) {$/;"	f	namespace:D2D1
As	.\wrl\client.h	/^            HRESULT As(ComPtr<U> *p) const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
As	.\wrl\client.h	/^            HRESULT As(Details::ComPtrRef<ComPtr<U>> p) const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
AsIID	.\wrl\client.h	/^            HRESULT AsIID(REFIID riid, ComPtr<IUnknown> *p) const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
AssertValid	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::AssertValid() const {$/;"	f	class:CDXArray
AssertValid	.\dxtmpl.h	/^void CDXList<TYPE,ARG_TYPE>::AssertValid() const {$/;"	f	class:CDXList
AssertValid	.\dxtmpl.h	/^void CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::AssertValid() const {$/;"	f	class:CDXMap
Assign	.\comutil.h	/^inline void _bstr_t::Assign(BSTR s) {$/;"	f	class:_bstr_t
Assign	.\comutil.h	/^inline void _bstr_t::Data_t::Assign(BSTR s) {$/;"	f	class:_bstr_t::Data_t
AsyncEventStruct	.\mspstrm.h	/^    AsyncEventStruct() : pMSPStream(NULL),pEventItem(NULL) {$/;"	f	struct:CPTEventSink::AsyncEventStruct
Attach	.\comip.h	/^  void Attach(Interface *pInterface) throw() {$/;"	f	class:_com_ptr_t
Attach	.\comip.h	/^  void Attach(Interface *pInterface,bool fAddRef) throw() {$/;"	f	class:_com_ptr_t
Attach	.\comutil.h	/^inline void _bstr_t::Attach(BSTR s) {$/;"	f	class:_bstr_t
Attach	.\comutil.h	/^inline void _bstr_t::Data_t::Attach(BSTR s) throw() {$/;"	f	class:_bstr_t::Data_t
Attach	.\comutil.h	/^inline void _variant_t::Attach(VARIANT &varSrc)$/;"	f	class:_variant_t
Attach	.\wrl\client.h	/^            void Attach(InterfaceType *other) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
BLOB_TABLE_SIZE	.\netmon.h	/^  static __inline DWORD BLOB_TABLE_SIZE(DWORD dwNumBlobs) { return (DWORD) (sizeof(BLOB_TABLE)+dwNumBlobs*sizeof(HBLOB)); }$/;"	f
BeginContainer	.\gdiplus\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer()$/;"	f	class:Graphics
BeginContainer	.\gdiplus\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer(const Rect& dstrect,$/;"	f	class:Graphics
BeginContainer	.\gdiplus\gdiplusgraphics.h	/^	GraphicsContainer BeginContainer(const RectF& dstrect,$/;"	f	class:Graphics
BezierSegment	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_BEZIER_SEGMENT BezierSegment(const D2D1_POINT_2F &point1, const D2D1_POINT_2F &point2, const D2D1_POINT_2F &point3) {$/;"	f	namespace:D2D1
Bitmap	.\gdiplus\gdiplusheaders.h	/^	Bitmap(GpImage *image, Status status): Image(image, status) {}$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HBITMAP hbm, HPALETTE hpal):$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HICON hicon):$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(HINSTANCE hInstance, const WCHAR *bitmapName):$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(IDirectDrawSurface7 *surface): Image(NULL, Ok)$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, Graphics *target):$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, INT stride,$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(INT width, INT height, PixelFormat format):$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(IStream *stream, BOOL useEmbeddedColorManagement):$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(const BITMAPINFO *gdiBitmapInfo, VOID *gdiBitmapData):$/;"	f	class:Bitmap
Bitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap::Bitmap(const WCHAR *filename,$/;"	f	class:Bitmap
BitmapBrushProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_BITMAP_BRUSH_PROPERTIES BitmapBrushProperties($/;"	f	namespace:D2D1
BitmapProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_BITMAP_PROPERTIES BitmapProperties(CONST D2D1_PIXEL_FORMAT &pixelFormat = D2D1::PixelFormat(),$/;"	f	namespace:D2D1
BitmapProperties1	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_BITMAP_PROPERTIES1 BitmapProperties1(D2D1_BITMAP_OPTIONS bitmapOptions = D2D1_BITMAP_OPTIONS_NONE,$/;"	f	namespace:D2D1
Breakpoint	.\dbgeng.h	/^  STDMETHOD(Breakpoint)(THIS_ PDEBUG_BREAKPOINT Bp) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
Brush	.\gdiplus\gdiplusbrush.h	/^	Brush(): nativeBrush(NULL), lastStatus(Ok) {}$/;"	f	class:Brush
Brush	.\gdiplus\gdiplusbrush.h	/^	Brush(GpBrush *brush, Status status):$/;"	f	class:Brush
BrushProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_BRUSH_PROPERTIES BrushProperties($/;"	f	namespace:D2D1
CCSLock	.\msputils.h	/^  CCSLock(CRITICAL_SECTION *pCritSec) : m_pCritSec(pCritSec) {$/;"	f	class:CCSLock
CCritSec	.\stllock.h	/^  CCritSec() { InitializeCriticalSection(this); }$/;"	f	class:CCritSec
CD3D10_BUFFER_DESC	.\d3d10.h	/^    CD3D10_BUFFER_DESC() {}$/;"	f	struct:CD3D10_BUFFER_DESC
CD3D10_BUFFER_DESC	.\d3d10.h	/^    explicit CD3D10_BUFFER_DESC(UINT byteWidth, UINT bindFlags, D3D10_USAGE usage = D3D10_USAGE_DEFAULT, UINT cpuaccessFlags = 0, UINT miscFlags = 0 ) {$/;"	f	struct:CD3D10_BUFFER_DESC
CD3D10_BUFFER_DESC	.\d3d10.h	/^    explicit CD3D10_BUFFER_DESC(const D3D10_BUFFER_DESC &o) : D3D10_BUFFER_DESC(o) {}$/;"	f	struct:CD3D10_BUFFER_DESC
CD3D10_TEXTURE1D_DESC	.\d3d10.h	/^    CD3D10_TEXTURE1D_DESC() {}$/;"	f	struct:CD3D10_TEXTURE1D_DESC
CD3D10_TEXTURE1D_DESC	.\d3d10.h	/^    explicit CD3D10_TEXTURE1D_DESC(DXGI_FORMAT format, UINT width, UINT arraySize = 1, UINT mipLevels = 0,$/;"	f	struct:CD3D10_TEXTURE1D_DESC
CD3D10_TEXTURE1D_DESC	.\d3d10.h	/^    explicit CD3D10_TEXTURE1D_DESC(const D3D10_TEXTURE1D_DESC &o) : D3D10_TEXTURE1D_DESC(o) {}$/;"	f	struct:CD3D10_TEXTURE1D_DESC
CD3D10_TEXTURE2D_DESC	.\d3d10.h	/^    CD3D10_TEXTURE2D_DESC() {}$/;"	f	struct:CD3D10_TEXTURE2D_DESC
CD3D10_TEXTURE2D_DESC	.\d3d10.h	/^    explicit CD3D10_TEXTURE2D_DESC(DXGI_FORMAT format, UINT width, UINT height,$/;"	f	struct:CD3D10_TEXTURE2D_DESC
CD3D10_TEXTURE2D_DESC	.\d3d10.h	/^    explicit CD3D10_TEXTURE2D_DESC(const D3D10_TEXTURE2D_DESC &o) : D3D10_TEXTURE2D_DESC(o) {}$/;"	f	struct:CD3D10_TEXTURE2D_DESC
CD3D11_BLEND_DESC	.\d3d11.h	/^    CD3D11_BLEND_DESC() {}$/;"	f	struct:CD3D11_BLEND_DESC
CD3D11_BLEND_DESC	.\d3d11.h	/^    explicit CD3D11_BLEND_DESC(CD3D11_DEFAULT) {$/;"	f	struct:CD3D11_BLEND_DESC
CD3D11_BLEND_DESC	.\d3d11.h	/^    explicit CD3D11_BLEND_DESC(const D3D11_BLEND_DESC &o) : D3D11_BLEND_DESC(o) {}$/;"	f	struct:CD3D11_BLEND_DESC
CD3D11_BUFFER_DESC	.\d3d11.h	/^    CD3D11_BUFFER_DESC() {}$/;"	f	struct:CD3D11_BUFFER_DESC
CD3D11_BUFFER_DESC	.\d3d11.h	/^    explicit CD3D11_BUFFER_DESC(UINT byteWidth,UINT bindFlags,$/;"	f	struct:CD3D11_BUFFER_DESC
CD3D11_BUFFER_DESC	.\d3d11.h	/^    explicit CD3D11_BUFFER_DESC(const D3D11_BUFFER_DESC &o) : D3D11_BUFFER_DESC(o) {}$/;"	f	struct:CD3D11_BUFFER_DESC
CD3D11_RASTERIZER_DESC	.\d3d11.h	/^    CD3D11_RASTERIZER_DESC() {}$/;"	f	struct:CD3D11_RASTERIZER_DESC
CD3D11_RASTERIZER_DESC	.\d3d11.h	/^    explicit CD3D11_RASTERIZER_DESC(CD3D11_DEFAULT) {$/;"	f	struct:CD3D11_RASTERIZER_DESC
CD3D11_RASTERIZER_DESC	.\d3d11.h	/^    explicit CD3D11_RASTERIZER_DESC(D3D11_FILL_MODE fillMode, D3D11_CULL_MODE cullMode,$/;"	f	struct:CD3D11_RASTERIZER_DESC
CD3D11_RASTERIZER_DESC	.\d3d11.h	/^    explicit CD3D11_RASTERIZER_DESC(const D3D11_RASTERIZER_DESC &o) : D3D11_RASTERIZER_DESC(o) {}$/;"	f	struct:CD3D11_RASTERIZER_DESC
CD3D11_RENDER_TARGET_VIEW_DESC	.\d3d11.h	/^    CD3D11_RENDER_TARGET_VIEW_DESC() {}$/;"	f	struct:CD3D11_RENDER_TARGET_VIEW_DESC
CD3D11_RENDER_TARGET_VIEW_DESC	.\d3d11.h	/^    explicit CD3D11_RENDER_TARGET_VIEW_DESC(D3D11_RTV_DIMENSION dim, DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,$/;"	f	struct:CD3D11_RENDER_TARGET_VIEW_DESC
CD3D11_RENDER_TARGET_VIEW_DESC	.\d3d11.h	/^    explicit CD3D11_RENDER_TARGET_VIEW_DESC(ID3D11Buffer*, DXGI_FORMAT format, UINT first_elem,$/;"	f	struct:CD3D11_RENDER_TARGET_VIEW_DESC
CD3D11_RENDER_TARGET_VIEW_DESC	.\d3d11.h	/^    explicit CD3D11_RENDER_TARGET_VIEW_DESC(const D3D11_RENDER_TARGET_VIEW_DESC &other)$/;"	f	struct:CD3D11_RENDER_TARGET_VIEW_DESC
CD3D11_SAMPLER_DESC	.\d3d11.h	/^    CD3D11_SAMPLER_DESC() {}$/;"	f	struct:CD3D11_SAMPLER_DESC
CD3D11_SAMPLER_DESC	.\d3d11.h	/^    explicit CD3D11_SAMPLER_DESC(CD3D11_DEFAULT) {$/;"	f	struct:CD3D11_SAMPLER_DESC
CD3D11_SAMPLER_DESC	.\d3d11.h	/^    explicit CD3D11_SAMPLER_DESC(D3D11_FILTER filter, D3D11_TEXTURE_ADDRESS_MODE addressU,$/;"	f	struct:CD3D11_SAMPLER_DESC
CD3D11_SAMPLER_DESC	.\d3d11.h	/^    explicit CD3D11_SAMPLER_DESC(const D3D11_SAMPLER_DESC &o) : D3D11_SAMPLER_DESC(o) {}$/;"	f	struct:CD3D11_SAMPLER_DESC
CD3D11_SHADER_RESOURCE_VIEW_DESC	.\d3d11.h	/^    CD3D11_SHADER_RESOURCE_VIEW_DESC() {}$/;"	f	struct:CD3D11_SHADER_RESOURCE_VIEW_DESC
CD3D11_SHADER_RESOURCE_VIEW_DESC	.\d3d11.h	/^    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(D3D11_SRV_DIMENSION dim,$/;"	f	struct:CD3D11_SHADER_RESOURCE_VIEW_DESC
CD3D11_SHADER_RESOURCE_VIEW_DESC	.\d3d11.h	/^    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(const D3D11_SHADER_RESOURCE_VIEW_DESC &other)$/;"	f	struct:CD3D11_SHADER_RESOURCE_VIEW_DESC
CD3D11_TEXTURE2D_DESC	.\d3d11.h	/^    CD3D11_TEXTURE2D_DESC() {}$/;"	f	struct:CD3D11_TEXTURE2D_DESC
CD3D11_TEXTURE2D_DESC	.\d3d11.h	/^    explicit CD3D11_TEXTURE2D_DESC(DXGI_FORMAT format, UINT width, UINT height, UINT arraySize = 1,$/;"	f	struct:CD3D11_TEXTURE2D_DESC
CD3D11_TEXTURE2D_DESC	.\d3d11.h	/^    explicit CD3D11_TEXTURE2D_DESC(const D3D11_TEXTURE2D_DESC &o) : D3D11_TEXTURE2D_DESC(o) {}$/;"	f	struct:CD3D11_TEXTURE2D_DESC
CDXArray	.\dxtmpl.h	/^CDXArray<TYPE,ARG_TYPE>::CDXArray() { m_pData = NULL; m_nSize = m_nMaxSize = m_nGrowBy = 0; }$/;"	f	class:CDXArray
CDXList	.\dxtmpl.h	/^CDXList<TYPE,ARG_TYPE>::CDXList(int nBlockSize) {$/;"	f	class:CDXList
CDXMap	.\dxtmpl.h	/^CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::CDXMap(int nBlockSize) {$/;"	f	class:CDXMap
CFIFOString	.\parser.h	/^  CFIFOString () { m_fifoTail = NULL; }$/;"	f	class:CFIFOString
CImpersonateClientHelper	.\wmiatlprov.h	/^    CImpersonateClientHelper() { m_bImpersonate = FALSE; }$/;"	f	class:ATL::CImpersonateClientHelper
CInstanceProviderHelper	.\wmiatlprov.h	/^    CInstanceProviderHelper (IWbemServices *pNamespace,IWbemContext *pCtx) : CProviderHelper (pNamespace,pCtx) { }$/;"	f	class:ATL::CInstanceProviderHelper
CIntrinsicEventProviderHelper	.\wmiatlprov.h	/^    CIntrinsicEventProviderHelper(IWbemServices *pNamespace,IWbemContext *pCtx) : CProviderHelper (pNamespace,pCtx) {$/;"	f	class:ATL::CIntrinsicEventProviderHelper
CLock	.\msputils.h	/^  CLock(CMSPCritSection &CriticalSection) : m_CriticalSection(CriticalSection) {$/;"	f	class:CLock
CMSPArray	.\msputils.h	/^  CMSPArray() : m_aT(NULL),m_nSize(0),m_nAllocSize(0) { }$/;"	f	class:CMSPArray
CMSPCritSection	.\msputils.h	/^  CMSPCritSection() { InitializeCriticalSection(&m_CritSec); }$/;"	f	class:CMSPCritSection
CMSPObjectSafetyImpl	.\msputils.h	/^  CMSPObjectSafetyImpl() : m_dwSafety(0) { }$/;"	f	class:CMSPObjectSafetyImpl
CMSPThread	.\mspthrd.h	/^  CMSPThread() {$/;"	f	class:CMSPThread
CParseXML	.\parser.h	/^  CParseXML () {$/;"	f	class:CParseXML
CPlugTerminalClassInfo	.\mspaddr.h	/^  CPlugTerminalClassInfo() : m_bstrName(NULL),m_bstrCompany(NULL),m_bstrVersion(NULL),m_bstrCLSID(NULL),m_bstrTerminalClass(NULL),m_lMediaType(1),m_Direction(TD_CAPTURE),m_pFTM(NULL)$/;"	f	class:CPlugTerminalClassInfo
CPlugTerminalSuperclassInfo	.\mspaddr.h	/^  CPlugTerminalSuperclassInfo() : m_bstrCLSID(NULL),m_bstrName(NULL),m_pFTM(NULL) {$/;"	f	class:CPlugTerminalSuperclassInfo
CProviderHelper	.\wmiatlprov.h	/^    CProviderHelper(IWbemServices *pNamespace,IWbemContext *pCtx) {$/;"	f	class:ATL::CProviderHelper
CSafeComEnum	.\mspenum.h	/^  CSafeComEnum() { m_pFTM = NULL; }$/;"	f	class:CSafeComEnum
CTapiBstrCollection	.\mspcoll.h	/^  CTapiBstrCollection(void) : m_dwSize(0),m_Var(NULL) { }$/;"	f	class:CTapiBstrCollection
CTapiIfCollection	.\mspcoll.h	/^  CTapiIfCollection(void) : m_nSize(0),m_Var(NULL) { }$/;"	f	class:CTapiIfCollection
CVideoCaptureTerminal	.\msptrmvc.h	/^inline CVideoCaptureTerminal::CVideoCaptureTerminal() {$/;"	f	class:CVideoCaptureTerminal
CachedBitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ CachedBitmap::CachedBitmap(Bitmap *bitmap, Graphics *graphics):$/;"	f	class:CachedBitmap
CancelAsyncCall	.\wmiatlprov.h	/^    HRESULT WINAPI CancelAsyncCall(IWbemObjectSink *pSink) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
CancelAsyncCall	.\wmiatlprov.h	/^    virtual HRESULT WINAPI CancelAsyncCall(IWbemObjectSink *pSink){return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
CdbConnections	.\_dbdao.h	/^  CONSTRUCTOR CdbConnections() { pwrk = NULL; }$/;"	f	class:CdbConnections
CdbVariant	.\_dbdao.h	/^inline CONSTRUCTOR CdbVariant::CdbVariant(LPCTSTR pstr): COleVariant(pstr,VT_BSTRT) {$/;"	f	class:CdbVariant
CdbVariant	.\_dbdao.h	/^inline CONSTRUCTOR CdbVariant::CdbVariant(LPSAFEARRAY psa) {$/;"	f	class:CdbVariant
CdbVariant	.\_dbdao.h	/^inline CONSTRUCTOR CdbVariant::CdbVariant(LPVARIANT pv) {$/;"	f	class:CdbVariant
CdbVariant	.\_dbdao.h	/^inline CONSTRUCTOR CdbVariant::CdbVariant(SHORT s,WINBOOL bIsBool) : COleVariant(s) {$/;"	f	class:CdbVariant
CdbVariant	.\_dbdao.h	/^inline CONSTRUCTOR CdbVariant::CdbVariant(VOID) : COleVariant() {$/;"	f	class:CdbVariant
CdbVariant	.\_dbdao.h	/^inline CdbVariant::CdbVariant(LONG l) {$/;"	f	class:CdbVariant
CdbWide	.\_dbdao.h	/^  CONSTRUCTOR CdbWide(LPSTR pstr,unsigned int cb=0) {$/;"	f	class:CdbWide
CdbWorkspaces	.\_dbdao.h	/^  CONSTRUCTOR CdbWorkspaces(VOID){pDBEng = NULL;}$/;"	f	class:CdbWorkspaces
ChangeDebuggeeState	.\dbgeng.h	/^  STDMETHOD(ChangeDebuggeeState)(THIS_ ULONG Flags,ULONG64 Argument) { return S_OK; }$/;"	f	class:DebugBaseEventCallbacks
ChangeEngineState	.\dbgeng.h	/^  STDMETHOD(ChangeEngineState)(THIS_ ULONG Flags,ULONG64 Argument) { return S_OK; }$/;"	f	class:DebugBaseEventCallbacks
ChangeSymbolState	.\dbgeng.h	/^  STDMETHOD(ChangeSymbolState)(THIS_ ULONG Flags,ULONG64 Argument) { return S_OK; }$/;"	f	class:DebugBaseEventCallbacks
ChangeType	.\comutil.h	/^inline void _variant_t::ChangeType(VARTYPE vartype,const _variant_t *pSrc) {$/;"	f	class:_variant_t
CharacterRange	.\gdiplus\gdiplustypes.h	/^	CharacterRange(): First(0), Length(0) {}$/;"	f	struct:CharacterRange
CharacterRange	.\gdiplus\gdiplustypes.h	/^	CharacterRange(INT first, INT length): First(first), Length(length) {}$/;"	f	struct:CharacterRange
CheckError	.\comutil.h	/^  inline void CheckError(HRESULT hr) throw() {$/;"	f	namespace:_com_util
CheckInstancePath	.\wmiatlprov.h	/^    HRESULT WINAPI CheckInstancePath(IClassFactory *pParserFactory,const BSTR ObjectPath,const BSTR ClassName,ULONGLONG ullTest) {$/;"	f	class:ATL::CInstanceProviderHelper
Clear	.\comutil.h	/^inline void _variant_t::Clear()$/;"	f	class:_variant_t
Clear	.\gdiplus\gdiplusgraphics.h	/^	Status Clear(const Color& color)$/;"	f	class:Graphics
ClearBrushRemapTable	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearBrushRemapTable()$/;"	f	class:ImageAttributes
ClearColorKey	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearColorKey(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearColorMatrices	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearColorMatrices(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearColorMatrix	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearColorMatrix(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearGamma	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearGamma(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearMarkers	.\gdiplus\gdipluspath.h	/^	Status ClearMarkers()$/;"	f	class:GraphicsPath
ClearNoOp	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearNoOp(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearOutputChannel	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearOutputChannel(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearOutputChannelColorProfile	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearOutputChannelColorProfile($/;"	f	class:ImageAttributes
ClearRemapTable	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearRemapTable(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
ClearThreshold	.\gdiplus\gdiplusimageattributes.h	/^	Status ClearThreshold(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
Clone	.\gdiplus\gdiplusbrush.h	/^	virtual Brush* Clone() const  \/\/ each subclass must implement this$/;"	f	class:Brush
Clone	.\gdiplus\gdiplusbrush.h	/^	virtual HatchBrush* Clone() const$/;"	f	class:HatchBrush
Clone	.\gdiplus\gdiplusbrush.h	/^	virtual LinearGradientBrush* Clone() const$/;"	f	class:LinearGradientBrush
Clone	.\gdiplus\gdiplusbrush.h	/^	virtual SolidBrush* Clone() const$/;"	f	class:SolidBrush
Clone	.\gdiplus\gdiplusbrush.h	/^	virtual TextureBrush* Clone() const$/;"	f	class:TextureBrush
Clone	.\gdiplus\gdiplusheaders.h	/^	virtual Bitmap* Clone() const$/;"	f	class:Bitmap
Clone	.\gdiplus\gdiplusheaders.h	/^	virtual CustomLineCap* Clone() const$/;"	f	class:CustomLineCap
Clone	.\gdiplus\gdiplusheaders.h	/^	virtual Image* Clone() const$/;"	f	class:Image
Clone	.\gdiplus\gdiplusimageattributes.h	/^	ImageAttributes* Clone() const$/;"	f	class:ImageAttributes
Clone	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(INT x, INT y, INT width, INT height,$/;"	f	class:Bitmap
Clone	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Bitmap
Clone	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(const Rect& rect, PixelFormat format) const$/;"	f	class:Bitmap
Clone	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::Clone(const RectF& rect, PixelFormat format) const$/;"	f	class:Bitmap
Clone	.\gdiplus\gdiplusimpl.h	/^__inline__ Font* Font::Clone() const$/;"	f	class:Font
Clone	.\gdiplus\gdiplusimpl.h	/^__inline__ FontFamily* FontFamily::Clone() const$/;"	f	class:FontFamily
Clone	.\gdiplus\gdiplusimpl.h	/^__inline__ Region* Region::Clone() const$/;"	f	class:Region
Clone	.\gdiplus\gdipluslinecaps.h	/^	virtual AdjustableArrowCap* Clone() const$/;"	f	class:AdjustableArrowCap
Clone	.\gdiplus\gdiplusmatrix.h	/^	Matrix* Clone() const$/;"	f	class:Matrix
Clone	.\gdiplus\gdiplusmetafile.h	/^	virtual Metafile* Clone() const$/;"	f	class:Metafile
Clone	.\gdiplus\gdipluspath.h	/^	GraphicsPath* Clone() const$/;"	f	class:GraphicsPath
Clone	.\gdiplus\gdipluspath.h	/^	virtual PathGradientBrush *Clone() const$/;"	f	class:PathGradientBrush
Clone	.\gdiplus\gdipluspen.h	/^	Pen* Clone() const$/;"	f	class:Pen
Clone	.\gdiplus\gdiplusstringformat.h	/^	StringFormat* Clone() const$/;"	f	class:StringFormat
Clone	.\gdiplus\gdiplustypes.h	/^	Rect* Clone() const {$/;"	f	struct:Rect
Clone	.\gdiplus\gdiplustypes.h	/^	RectF* Clone() const {$/;"	f	struct:RectF
Clone	.\mspenum.h	/^  STDMETHOD(Clone)(Base **ppEnum) {$/;"	f	class:CSafeComEnum
CloseAllFigures	.\gdiplus\gdipluspath.h	/^	Status CloseAllFigures()$/;"	f	class:GraphicsPath
CloseFigure	.\gdiplus\gdipluspath.h	/^	Status CloseFigure()$/;"	f	class:GraphicsPath
CoCreateInstance	.\combaseapi.h	/^  __forceinline HRESULT CoCreateInstance (REFCLSID rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, REFIID riid, LPVOID *ppv) {$/;"	f
CoCreateInstanceEx	.\combaseapi.h	/^  __forceinline HRESULT CoCreateInstanceEx (REFCLSID Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults) {$/;"	f
Color	.\gdiplus\gdipluscolor.h	/^	Color(): Value(0xFF000000) {}$/;"	f	struct:Color
Color	.\gdiplus\gdipluscolor.h	/^	Color(ARGB argb): Value(argb) {}$/;"	f	struct:Color
Color	.\gdiplus\gdipluscolor.h	/^	Color(BYTE a, BYTE r, BYTE g, BYTE b): Value(MakeARGB(a, r, g, b)) {}$/;"	f	struct:Color
Color	.\gdiplus\gdipluscolor.h	/^	Color(BYTE r, BYTE g, BYTE b): Value(MakeARGB(0xFF, r, g, b)) {}$/;"	f	struct:Color
ColorF	.\d2d1helper.h	/^    D2D1FORCEINLINE ColorF(Enum knownColor, FLOAT _a = 1.0) {$/;"	f	class:D2D1::ColorF
ColorF	.\d2d1helper.h	/^    D2D1FORCEINLINE ColorF(FLOAT _r, FLOAT _g, FLOAT _b, FLOAT _a = 1.0) {$/;"	f	class:D2D1::ColorF
ColorF	.\d2d1helper.h	/^    FORCEINLINE ColorF(UINT32 rgb, FLOAT _a = 1.0) {$/;"	f	class:D2D1::ColorF
ComPtr	.\wrl\client.h	/^            ComPtr() throw() : ptr_(nullptr) {}$/;"	f	class:Microsoft::WRL::ComPtr
ComPtr	.\wrl\client.h	/^            ComPtr(ComPtr &&other) throw() : ptr_(nullptr) {$/;"	f	class:Microsoft::WRL::ComPtr
ComPtr	.\wrl\client.h	/^            ComPtr(ComPtr<U>&& other) throw() : ptr_(other.ptr_) {$/;"	f	class:Microsoft::WRL::ComPtr
ComPtr	.\wrl\client.h	/^            ComPtr(const ComPtr &other) throw() : ptr_(other.ptr_) {$/;"	f	class:Microsoft::WRL::ComPtr
ComPtr	.\wrl\client.h	/^            ComPtr(const ComPtr<U> &other) throw() : ptr_(other.ptr_) {$/;"	f	class:Microsoft::WRL::ComPtr
ComPtr	.\wrl\client.h	/^            template<class U> ComPtr(U *other) throw() : ptr_(other) {$/;"	f	class:Microsoft::WRL::ComPtr
ComPtrRef	.\wrl\client.h	/^                ComPtrRef(T *ptr) throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRef
Compare	.\comutil.h	/^inline int _bstr_t::Data_t::Compare(const _bstr_t::Data_t &str) const throw() {$/;"	f	class:_bstr_t::Data_t
Complement	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Complement(const GraphicsPath *path)$/;"	f	class:Region
Complement	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Complement(const Rect& rect)$/;"	f	class:Region
Complement	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Complement(const RectF& rect)$/;"	f	class:Region
Complement	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Complement(const Region *region)$/;"	f	class:Region
ConnectFilters	.\mspterm.h	/^  virtual HRESULT ConnectFilters() { return S_OK; }$/;"	f	class:CBaseTerminal
ConstructErrorObject	.\wmiatlprov.h	/^    HRESULT WINAPI ConstructErrorObject (const ULONG ulStatusCode,const BSTR bstrDescription,const BSTR bstrOperation,const BSTR bstrParameter,const BSTR bstrProviderName,IWbemClassObject **ppErrorObject) {$/;"	f	class:ATL::CProviderHelper
Contains	.\gdiplus\gdiplustypes.h	/^	BOOL Contains(INT x, INT y) const {$/;"	f	struct:Rect
Contains	.\gdiplus\gdiplustypes.h	/^	BOOL Contains(REAL x, REAL y) const {$/;"	f	struct:RectF
Contains	.\gdiplus\gdiplustypes.h	/^	BOOL Contains(const Point& point) const {$/;"	f	struct:Rect
Contains	.\gdiplus\gdiplustypes.h	/^	BOOL Contains(const PointF& point) const {$/;"	f	struct:RectF
Contains	.\gdiplus\gdiplustypes.h	/^	BOOL Contains(const Rect& rect) const {$/;"	f	struct:Rect
Contains	.\gdiplus\gdiplustypes.h	/^	BOOL Contains(const RectF& rect) const {$/;"	f	struct:RectF
ConvertFormat	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::ConvertFormat(PixelFormat format,$/;"	f	class:Bitmap
Copy	.\comutil.h	/^inline BSTR _bstr_t::Data_t::Copy() const {$/;"	f	class:_bstr_t::Data_t
Copy	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::Copy(const CDXArray &src) {$/;"	f	class:CDXArray
CopyData	.\gdiplus\gdipluspath.h	/^	INT CopyData(PointF *points, BYTE *types, INT startIndex, INT endIndex)$/;"	f	class:GraphicsPathIterator
CopyTo	.\wrl\client.h	/^            HRESULT CopyTo(InterfaceType **ptr) const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
CopyTo	.\wrl\client.h	/^            HRESULT CopyTo(REFIID riid, void **ptr) const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
CopyTo	.\wrl\client.h	/^            HRESULT CopyTo(U **ptr) const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
CopyTo	.\wrl\wrappers\corewrappers.h	/^                HRESULT CopyTo(HSTRING *str) const throw() {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
CorIsModifierElementType	.\cor.h	/^FORCEINLINE int CorIsModifierElementType (CorElementType et) {$/;"	f
CorIsPrimitiveType	.\cor.h	/^FORCEINLINE int CorIsPrimitiveType (CorElementType et) {$/;"	f
CorSigCompressData	.\cor.h	/^inline ULONG CorSigCompressData (ULONG len, void *p) {$/;"	f
CorSigCompressElementType	.\cor.h	/^inline ULONG CorSigCompressElementType (CorElementType et, void *d) {$/;"	f
CorSigCompressPointer	.\cor.h	/^inline ULONG CorSigCompressPointer (void *p, void *d) {$/;"	f
CorSigCompressSignedInt	.\cor.h	/^inline ULONG CorSigCompressSignedInt (int i, void *p) {$/;"	f
CorSigCompressToken	.\cor.h	/^inline ULONG CorSigCompressToken (mdToken tk, void *p) {$/;"	f
CorSigUncompressBigData	.\cor.h	/^inline ULONG CorSigUncompressBigData (PCCOR_SIGNATURE &d) {$/;"	f
CorSigUncompressCallingConv	.\cor.h	/^FORCEINLINE HRESULT CorSigUncompressCallingConv (PCCOR_SIGNATURE d, DWORD len, ULONG *pu) {$/;"	f
CorSigUncompressCallingConv	.\cor.h	/^FORCEINLINE ULONG CorSigUncompressCallingConv (PCCOR_SIGNATURE &d) { return *d++; }$/;"	f
CorSigUncompressData	.\cor.h	/^FORCEINLINE ULONG CorSigUncompressData (PCCOR_SIGNATURE &d) {$/;"	f
CorSigUncompressData	.\cor.h	/^inline HRESULT CorSigUncompressData (PCCOR_SIGNATURE d, DWORD len, ULONG *po, ULONG *plen) {$/;"	f
CorSigUncompressData	.\cor.h	/^inline ULONG CorSigUncompressData (PCCOR_SIGNATURE d, ULONG *po) {$/;"	f
CorSigUncompressElementType	.\cor.h	/^FORCEINLINE CorElementType CorSigUncompressElementType (PCCOR_SIGNATURE &d) { return (CorElementType) *d++; }$/;"	f
CorSigUncompressElementType	.\cor.h	/^inline ULONG CorSigUncompressElementType (PCCOR_SIGNATURE d, CorElementType *et) {$/;"	f
CorSigUncompressPointer	.\cor.h	/^inline ULONG CorSigUncompressPointer (PCCOR_SIGNATURE d, void **pptr) {$/;"	f
CorSigUncompressSignedInt	.\cor.h	/^inline ULONG CorSigUncompressSignedInt (PCCOR_SIGNATURE d, int *pi) {$/;"	f
CorSigUncompressToken	.\cor.h	/^inline HRESULT CorSigUncompressToken (PCCOR_SIGNATURE d, DWORD len, mdToken *t, DWORD *tlen) {$/;"	f
CorSigUncompressToken	.\cor.h	/^inline ULONG CorSigUncompressToken (PCCOR_SIGNATURE d, mdToken *ptok) {$/;"	f
CorSigUncompressToken	.\cor.h	/^inline mdToken CorSigUncompressToken (PCCOR_SIGNATURE &d) {$/;"	f
CorSigUncompressedDataSize	.\cor.h	/^FORCEINLINE ULONG CorSigUncompressedDataSize (PCCOR_SIGNATURE d) {$/;"	f
CountOfMediaTypes	.\msptrmvc.h	/^  virtual LONG CountOfMediaTypes() { return 1; }$/;"	f	class:CVideoCaptureTerminal
CountOfSetBitsUChar	.\ddk\classpnp.h	/^static inline ULONG CountOfSetBitsUChar(UCHAR _X)$/;"	f
CountOfSetBitsULong	.\ddk\classpnp.h	/^static inline ULONG CountOfSetBitsULong(ULONG _X)$/;"	f
CountOfSetBitsULong32	.\ddk\classpnp.h	/^static inline ULONG CountOfSetBitsULong32(ULONG32 _X)$/;"	f
CountOfSetBitsULong64	.\ddk\classpnp.h	/^static inline ULONG CountOfSetBitsULong64(ULONG64 _X)$/;"	f
CountOfSetBitsUlongPtr	.\ddk\classpnp.h	/^static inline ULONG CountOfSetBitsUlongPtr(ULONG_PTR _X)$/;"	f
Create	.\dxtmpl.h	/^  static CDXPlex *PASCAL_INLINE Create(CDXPlex *&pHead,UINT nMax,UINT cbElement) {$/;"	f	struct:CDXPlex
CreateClassEnum	.\wmiatlprov.h	/^    HRESULT WINAPI CreateClassEnum(const BSTR Superclass,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
CreateClassEnum	.\wmiatlprov.h	/^    virtual HRESULT WINAPI CreateClassEnum(const BSTR strSuperclass,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
CreateClassEnumAsync	.\wmiatlprov.h	/^    HRESULT WINAPI CreateClassEnumAsync(const BSTR Superclass,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
CreateFiltersIfRequired	.\msptrmac.h	/^inline HRESULT CAudioCaptureTerminal::CreateFiltersIfRequired() {$/;"	f	class:CAudioCaptureTerminal
CreateInstance	.\comip.h	/^  HRESULT CreateInstance(LPCSTR clsidStringA,IUnknown *pOuter = NULL,DWORD dwClsContext = CLSCTX_ALL) throw() {$/;"	f	class:_com_ptr_t
CreateInstance	.\comip.h	/^  HRESULT CreateInstance(LPCWSTR clsidString,IUnknown *pOuter = NULL,DWORD dwClsContext = CLSCTX_ALL) throw() {$/;"	f	class:_com_ptr_t
CreateInstance	.\comip.h	/^  HRESULT CreateInstance(const CLSID &rclsid,IUnknown *pOuter = NULL,DWORD dwClsContext = CLSCTX_ALL) throw() {$/;"	f	class:_com_ptr_t
CreateInstanceEnum	.\wmiatlprov.h	/^    HRESULT WINAPI CreateInstanceEnum(const BSTR Class,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
CreateInstanceEnum	.\wmiatlprov.h	/^    virtual HRESULT WINAPI CreateInstanceEnum(const BSTR strClass,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
CreateInstanceEnumAsync	.\wmiatlprov.h	/^    virtual HRESULT WINAPI CreateInstanceEnumAsync(const BSTR strClass,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
CreateMSPCallHelper	.\mspaddr.h	/^template <class T> HRESULT CreateMSPCallHelper(CMSPAddress *pCMSPAddress,MSP_HANDLE htCall,DWORD dwReserved,DWORD dwMediaType,IUnknown *pOuterUnknown,IUnknown **ppMSPCall,T **ppCMSPCall)$/;"	f
CreateProcess	.\dbgeng.h	/^  STDMETHOD(CreateProcess)(THIS_ ULONG64 ImageFileHandle,ULONG64 Handle,ULONG64 BaseOffset,ULONG ModuleSize,PCSTR ModuleName,PCSTR ImageName,ULONG CheckSum,ULONG TimeDateStamp,ULONG64 InitialThreadHandle,ULONG64 ThreadDataOffset,ULONG64 StartOffset) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
CreateThread	.\dbgeng.h	/^  STDMETHOD(CreateThread)(THIS_ ULONG64 Handle,ULONG64 DataOffset,ULONG64 StartOffset) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
CreateVssBackupComponents	.\vsbackup.h	/^HRESULT WINAPI CreateVssBackupComponents($/;"	f
CreateVssExamineWriterMetadata	.\vsbackup.h	/^HRESULT WINAPI CreateVssExamineWriterMetadata($/;"	f
CreateVssExpressWriter	.\vswriter.h	/^HRESULT WINAPI CreateVssExpressWriter($/;"	f
Ctor	.\comdef.h	/^inline void _com_error::Ctor(const _com_error &that) throw() {$/;"	f	class:_com_error
CurrentLine	.\sql_1.h	/^  int CurrentLine() { return m_nLine; }$/;"	f	class:SQL1_Parser
CurrentToken	.\sql_1.h	/^  LPWSTR CurrentToken() { return m_pTokenText; }$/;"	f	class:SQL1_Parser
CustomLineCap	.\gdiplus\gdiplusheaders.h	/^	CustomLineCap(GpCustomLineCap *customLineCap, Status status):$/;"	f	class:CustomLineCap
CustomLineCap	.\gdiplus\gdiplusimpl.h	/^__inline__ CustomLineCap::CustomLineCap($/;"	f	class:CustomLineCap
D2D1CreateFactory	.\d2d1.h	/^HRESULT D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType, Factory **factory) {$/;"	f
D2D1CreateFactory	.\d2d1.h	/^HRESULT D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType, const D2D1_FACTORY_OPTIONS &factoryOptions, Factory **factory) {$/;"	f
D2D1CreateFactory	.\d2d1.h	/^inline HRESULT D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType, REFIID riid, void **ppv) {$/;"	f
D3D11CalcSubresource	.\d3d11.h	/^inline UINT D3D11CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT MipLevels) {$/;"	f
DECLARE_INTERFACE	.\d3d10effect.h	/^DECLARE_INTERFACE(ID3D10EffectPass)$/;"	f
DECLARE_INTERFACE	.\d3d10effect.h	/^DECLARE_INTERFACE(ID3D10EffectTechnique)$/;"	f
DECLARE_INTERFACE	.\d3d10effect.h	/^DECLARE_INTERFACE(ID3D10EffectType)$/;"	f
DECLARE_INTERFACE	.\d3d10effect.h	/^DECLARE_INTERFACE(ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE	.\d3d10shader.h	/^DECLARE_INTERFACE(ID3D10ShaderReflectionConstantBuffer)$/;"	f
DECLARE_INTERFACE	.\d3d10shader.h	/^DECLARE_INTERFACE(ID3D10ShaderReflectionType)$/;"	f
DECLARE_INTERFACE	.\d3d10shader.h	/^DECLARE_INTERFACE(ID3D10ShaderReflectionVariable)$/;"	f
DECLARE_INTERFACE	.\d3d11shader.h	/^DECLARE_INTERFACE(ID3D11ShaderReflectionConstantBuffer)$/;"	f
DECLARE_INTERFACE	.\d3d11shader.h	/^DECLARE_INTERFACE(ID3D11ShaderReflectionType)$/;"	f
DECLARE_INTERFACE	.\d3d11shader.h	/^DECLARE_INTERFACE(ID3D11ShaderReflectionVariable)$/;"	f
DECLARE_INTERFACE	.\d3dx9anim.h	/^DECLARE_INTERFACE(ID3DXAllocateHierarchy)$/;"	f
DECLARE_INTERFACE	.\d3dx9anim.h	/^DECLARE_INTERFACE(ID3DXAnimationCallbackHandler)$/;"	f
DECLARE_INTERFACE	.\d3dx9anim.h	/^DECLARE_INTERFACE(ID3DXLoadUserData)$/;"	f
DECLARE_INTERFACE	.\d3dx9anim.h	/^DECLARE_INTERFACE(ID3DXSaveUserData)$/;"	f
DECLARE_INTERFACE	.\d3dx9shader.h	/^DECLARE_INTERFACE(ID3DXInclude)$/;"	f
DECLARE_INTERFACE	.\ddk\punknown.h	/^DECLARE_INTERFACE(IUnknown)$/;"	f
DECLARE_INTERFACE	.\ddk\stdunk.h	/^DECLARE_INTERFACE(INonDelegatingUnknown)$/;"	f
DECLARE_INTERFACE	.\kcom.h	/^DECLARE_INTERFACE(IIndirectedUnknown) {$/;"	f
DECLARE_INTERFACE	.\kcom.h	/^DECLARE_INTERFACE(INonDelegatedUnknown) {$/;"	f
DECLARE_INTERFACE	.\unknown.h	/^DECLARE_INTERFACE(IUnknown)$/;"	f
DECLARE_INTERFACE_	.\_dbdao.h	/^DECLARE_INTERFACE_(DAOMFCDCollection,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\_dbdao.h	/^DECLARE_INTERFACE_(DAOMFCSCollection,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\alink.h	/^DECLARE_INTERFACE_ (IALink, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\alink.h	/^DECLARE_INTERFACE_ (IALink2, IALink) {$/;"	f
DECLARE_INTERFACE_	.\alink.h	/^DECLARE_INTERFACE_ (IALink3, IALink2) {$/;"	f
DECLARE_INTERFACE_	.\amaudio.h	/^DECLARE_INTERFACE_(IAMDirectSound,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\audioengineendpoint.h	/^DECLARE_INTERFACE_(IAudioDeviceEndpoint,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\audioengineendpoint.h	/^DECLARE_INTERFACE_(IAudioEndpoint,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\audioengineendpoint.h	/^DECLARE_INTERFACE_(IAudioEndpointControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\audioengineendpoint.h	/^DECLARE_INTERFACE_(IAudioEndpointRT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\audioengineendpoint.h	/^DECLARE_INTERFACE_(IAudioEndpointVolumeEx,IAudioEndpointVolume)$/;"	f
DECLARE_INTERFACE_	.\audioengineendpoint.h	/^DECLARE_INTERFACE_(IAudioInputEndpointRT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\audioengineendpoint.h	/^DECLARE_INTERFACE_(IAudioOutputEndpointRT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\cmnquery.h	/^DECLARE_INTERFACE_(ICommonQuery,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cmnquery.h	/^DECLARE_INTERFACE_(IPersistQuery,IPersist) {$/;"	f
DECLARE_INTERFACE_	.\cmnquery.h	/^DECLARE_INTERFACE_(IQueryForm,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\commdlg.h	/^  DECLARE_INTERFACE_(IPrintDialogCallback,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\commdlg.h	/^  DECLARE_INTERFACE_(IPrintDialogServices,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (ICeeGen, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IHostFilter, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMapToken, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataAssemblyEmit, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataAssemblyImport, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataDispenser, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataDispenserEx, IMetaDataDispenser) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataEmit, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataEmit2, IMetaDataEmit) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataError, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataFilter, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataImport, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataImport2, IMetaDataImport) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataInfo, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataTables, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataTables2, IMetaDataTables) {$/;"	f
DECLARE_INTERFACE_	.\cor.h	/^  DECLARE_INTERFACE_ (IMetaDataValidate, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\correg.h	/^  DECLARE_INTERFACE_(IMapToken,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\correg.h	/^  DECLARE_INTERFACE_(IMemory,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\correg.h	/^  DECLARE_INTERFACE_(IMetaDataDispenser,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\correg.h	/^  DECLARE_INTERFACE_(IMetaDataError,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\correg.h	/^  DECLARE_INTERFACE_(IMetaDataRegEmit,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\correg.h	/^  DECLARE_INTERFACE_(IMetaDataRegImport,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\correg.h	/^  DECLARE_INTERFACE_(INTERFACE,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3D,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3D2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3D3,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3D7,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DDevice,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DDevice2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DDevice3,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DDevice7,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DExecuteBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DLight,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DMaterial,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DMaterial2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DMaterial3,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DTexture,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DTexture2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DVertexBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DVertexBuffer7,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DViewport,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DViewport2,IDirect3DViewport)$/;"	f
DECLARE_INTERFACE_	.\d3d.h	/^DECLARE_INTERFACE_(IDirect3DViewport3,IDirect3DViewport2)$/;"	f
DECLARE_INTERFACE_	.\d3d10_1shader.h	/^DECLARE_INTERFACE_(ID3D10ShaderReflection1, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10Effect, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectBlendVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectConstantBuffer, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectDepthStencilVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectDepthStencilViewVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectMatrixVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectPool, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectRasterizerVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectRenderTargetViewVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectSamplerVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectScalarVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectShaderResourceVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectShaderVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectStringVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10EffectVectorVariable, ID3D10EffectVariable)$/;"	f
DECLARE_INTERFACE_	.\d3d10effect.h	/^DECLARE_INTERFACE_(ID3D10StateBlock, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d10shader.h	/^DECLARE_INTERFACE_(ID3D10ShaderReflection, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d11shader.h	/^DECLARE_INTERFACE_(ID3D11ShaderReflection, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3D8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DBaseTexture8,IDirect3DResource8)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DCubeTexture8,IDirect3DBaseTexture8)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DDevice8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DIndexBuffer8,IDirect3DResource8)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DResource8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DSurface8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DSwapChain8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DTexture8,IDirect3DBaseTexture8)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DVertexBuffer8,IDirect3DResource8)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DVolume8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d8.h	/^DECLARE_INTERFACE_(IDirect3DVolumeTexture8,IDirect3DBaseTexture8)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3D9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3D9Ex,IDirect3D9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DBaseTexture9,IDirect3DResource9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DCubeTexture9,IDirect3DBaseTexture9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DDevice9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DDevice9Ex,IDirect3DDevice9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DIndexBuffer9,IDirect3DResource9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DPixelShader9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DQuery9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DResource9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DStateBlock9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DSurface9,IDirect3DResource9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DSwapChain9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DSwapChain9Ex,IDirect3DSwapChain9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DTexture9,IDirect3DBaseTexture9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DVertexBuffer9,IDirect3DResource9)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DVertexDeclaration9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DVertexShader9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DVolume9,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3d9.h	/^DECLARE_INTERFACE_(IDirect3DVolumeTexture9,IDirect3DBaseTexture9)$/;"	f
DECLARE_INTERFACE_	.\d3drm.h	/^DECLARE_INTERFACE_(IDirect3DRM,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3drm.h	/^DECLARE_INTERFACE_(IDirect3DRM2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3drm.h	/^DECLARE_INTERFACE_(IDirect3DRM3,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMAnimation, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMAnimation2, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMAnimationArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMAnimationSet, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMAnimationSet2, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMArray, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMClippedVisual, IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMDevice,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMDevice2,IDirect3DRMDevice)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMDevice3,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMDeviceArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMFace,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMFace2,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMFaceArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMFrame,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMFrame2,IDirect3DRMFrame)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMFrame3,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMFrameArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMInterpolator, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMLight,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMLightArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMMaterial, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMMaterial2, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMMesh,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMMeshBuilder,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMMeshBuilder2,IDirect3DRMMeshBuilder)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMMeshBuilder3,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMObject2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMObjectArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMPicked2Array, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMPickedArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMProgressiveMesh,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMShadow,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMShadow2,IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMTexture, IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMTexture2, IDirect3DRMTexture)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMTexture3, IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMUserVisual, IDirect3DRMVisual)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMViewport,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMViewport2,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMViewportArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMVisual,IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMVisualArray, IDirect3DRMArray)$/;"	f
DECLARE_INTERFACE_	.\d3drmobj.h	/^DECLARE_INTERFACE_(IDirect3DRMWrap, IDirect3DRMObject)$/;"	f
DECLARE_INTERFACE_	.\d3dx9anim.h	/^DECLARE_INTERFACE_(ID3DXAnimationController, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9anim.h	/^DECLARE_INTERFACE_(ID3DXAnimationSet, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9anim.h	/^DECLARE_INTERFACE_(ID3DXCompressedAnimationSet, ID3DXAnimationSet)$/;"	f
DECLARE_INTERFACE_	.\d3dx9anim.h	/^DECLARE_INTERFACE_(ID3DXKeyframedAnimationSet, ID3DXAnimationSet)$/;"	f
DECLARE_INTERFACE_	.\d3dx9core.h	/^DECLARE_INTERFACE_(ID3DXBuffer, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9core.h	/^DECLARE_INTERFACE_(ID3DXFont, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9core.h	/^DECLARE_INTERFACE_(ID3DXLine, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9core.h	/^DECLARE_INTERFACE_(ID3DXRenderToEnvMap, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9core.h	/^DECLARE_INTERFACE_(ID3DXRenderToSurface, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9core.h	/^DECLARE_INTERFACE_(ID3DXSprite, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9effect.h	/^DECLARE_INTERFACE_(ID3DXBaseEffect, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9effect.h	/^DECLARE_INTERFACE_(ID3DXEffect, ID3DXBaseEffect)$/;"	f
DECLARE_INTERFACE_	.\d3dx9effect.h	/^DECLARE_INTERFACE_(ID3DXEffectCompiler, ID3DXBaseEffect)$/;"	f
DECLARE_INTERFACE_	.\d3dx9effect.h	/^DECLARE_INTERFACE_(ID3DXEffectPool, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9effect.h	/^DECLARE_INTERFACE_(ID3DXEffectStateManager, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9math.h	/^DECLARE_INTERFACE_(ID3DXMatrixStack, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXBaseMesh, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXMesh, ID3DXBaseMesh)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXPMesh, ID3DXBaseMesh)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXPRTBuffer, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXPRTCompBuffer, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXPRTEngine, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXPatchMesh, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXSPMesh, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXSkinInfo, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9mesh.h	/^DECLARE_INTERFACE_(ID3DXTextureGutterHelper, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9shader.h	/^DECLARE_INTERFACE_(ID3DXConstantTable, ID3DXBuffer)$/;"	f
DECLARE_INTERFACE_	.\d3dx9shader.h	/^DECLARE_INTERFACE_(ID3DXFragmentLinker, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\d3dx9shader.h	/^DECLARE_INTERFACE_(ID3DXTextureShader, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\daogetrw.h	/^DECLARE_INTERFACE_(ICDAORecordset,IDispatch) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOConnection,IDispatch) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOConnections,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOContainer,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOContainers,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAODatabase,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAODatabases,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAODocument,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAODocuments,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOError,IDispatch) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOErrors,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOFields,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOGroups,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOIndexFields,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOIndexes,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOParameter,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOParameters,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOProperties,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOProperty,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOQueryDefs,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAORecordset,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAORecordsets,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAORelations,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOTableDefs,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOUsers,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOWorkspace,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(DAOWorkspaces,_DAODynaCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAO,IDispatch) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAOCollection,IDispatch) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAODBEngine,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAODynaCollection,_DAOCollection) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAOField,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAOGroup,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAOIndex,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAOQueryDef,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAORelation,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAOTableDef,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbdaoint.h	/^DECLARE_INTERFACE_(_DAOUser,_DAO) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugAdvanced,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugBreakpoint,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugClient,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugClient2,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugClient3,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugClient4,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugControl,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugControl2,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugControl3,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugDataSpaces,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugDataSpaces2,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugDataSpaces3,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugEventCallbacks,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugInputCallbacks,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugOutputCallbacks,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugRegisters,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugSymbolGroup,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugSymbols,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugSymbols2,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugSystemObjects,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugSystemObjects2,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dbgeng.h	/^  DECLARE_INTERFACE_(IDebugSystemObjects3,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\ddk\dmusicks.h	/^DECLARE_INTERFACE_(IAllocatorMXF, IMXF)$/;"	f
DECLARE_INTERFACE_	.\ddk\dmusicks.h	/^DECLARE_INTERFACE_(IMXF,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\dmusicks.h	/^DECLARE_INTERFACE_(IMasterClock,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\dmusicks.h	/^DECLARE_INTERFACE_(IMiniportDMus, IMiniport)$/;"	f
DECLARE_INTERFACE_	.\ddk\dmusicks.h	/^DECLARE_INTERFACE_(IPortDMus, IPort)$/;"	f
DECLARE_INTERFACE_	.\ddk\drmk.h	/^DECLARE_INTERFACE_(IDrmAudioStream, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IAdapterPowerManagement, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IDmaChannel, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IDmaChannelSlave, IDmaChannel)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IDrmPort, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IDrmPort2, IDrmPort)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IInterruptSync, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniport, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportMidi, IMiniport)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportMidiStream, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportTopology,IMiniport)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportWaveCyclic, IMiniport)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportWaveCyclicStream,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportWavePci,IMiniport)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportWavePciStream,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportWaveRT, IMiniport)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportWaveRTStream, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMiniportWaveRTStreamNotification, IMiniportWaveRTStream)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IMusicTechnology, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPinCount, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPort, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortClsVersion, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortEvents, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortMidi, IPort)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortTopology, IPort)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortWaveCyclic, IPort)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortWavePci, IPort)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortWavePciStream,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortWaveRT,IPort)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPortWaveRTStream, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IPowerNotify, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IRegistryKey, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IResourceList, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IServiceGroup, IServiceSink)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IServiceSink, IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IUnregisterPhysicalConnection,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddk\portcls.h	/^DECLARE_INTERFACE_(IUnregisterSubdevice,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDraw,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDraw2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDraw3,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDraw4,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDraw7,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawClipper,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawColorControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawGammaControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawPalette,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawSurface,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawSurface2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawSurface3,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawSurface4,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ddraw.h	/^DECLARE_INTERFACE_(IDirectDrawSurface7,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInput2A,IDirectInputA)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInput2W,IDirectInputW)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInput7A,IDirectInput2A)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInput7W,IDirectInput2W)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInput8A,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInput8W,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputA,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice2A,IDirectInputDeviceA)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice2W,IDirectInputDeviceW)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice7A,IDirectInputDevice2A)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice7W,IDirectInputDevice2W)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice8A,IDirectInputDevice7A)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDevice8W,IDirectInputDevice7W)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDeviceA,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputDeviceW,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputEffect,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dinput.h	/^DECLARE_INTERFACE_(IDirectInputW,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmksctrl.h	/^DECLARE_INTERFACE_ (IKsControl, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dmplugin.h	/^DECLARE_INTERFACE_(IDirectMusicTool,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmplugin.h	/^DECLARE_INTERFACE_(IDirectMusicTool8,IDirectMusicTool)$/;"	f
DECLARE_INTERFACE_	.\dmplugin.h	/^DECLARE_INTERFACE_(IDirectMusicTrack,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmplugin.h	/^DECLARE_INTERFACE_(IDirectMusicTrack8,IDirectMusicTrack)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusic,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusic8,IDirectMusic)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicCollection,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicDownload,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicDownloadedInstrument,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicInstrument,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicPort,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicPortDownload,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IDirectMusicThru,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusicc.h	/^DECLARE_INTERFACE_(IReferenceClock,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicAudioPath,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicBand,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicChordMap,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicComposer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicContainer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicGetLoader,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicGraph,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicLoader,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicLoader8,IDirectMusicLoader)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicPatternTrack,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicPerformance,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicPerformance8,IDirectMusicPerformance)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicScript,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicSegment,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicSegment8,IDirectMusicSegment)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicSegmentState,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicSegmentState8,IDirectMusicSegmentState)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicStyle,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusici.h	/^DECLARE_INTERFACE_(IDirectMusicStyle8,IDirectMusicStyle)$/;"	f
DECLARE_INTERFACE_	.\dmusics.h	/^DECLARE_INTERFACE_(IDirectMusicSynth,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dmusics.h	/^DECLARE_INTERFACE_(IDirectMusicSynth8,IDirectMusicSynth)$/;"	f
DECLARE_INTERFACE_	.\dmusics.h	/^DECLARE_INTERFACE_(IDirectMusicSynthSink,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dpaddr.h	/^DECLARE_INTERFACE_(IDirectPlay8Address,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dpaddr.h	/^DECLARE_INTERFACE_(IDirectPlay8AddressIP,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplay.h	/^DECLARE_INTERFACE_(IDirectPlay,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplay.h	/^DECLARE_INTERFACE_(IDirectPlay2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplay.h	/^DECLARE_INTERFACE_(IDirectPlay3,IDirectPlay2)$/;"	f
DECLARE_INTERFACE_	.\dplay.h	/^DECLARE_INTERFACE_(IDirectPlay4,IDirectPlay3)$/;"	f
DECLARE_INTERFACE_	.\dplay8.h	/^DECLARE_INTERFACE_(IDirectPlay8Client,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplay8.h	/^DECLARE_INTERFACE_(IDirectPlay8NATResolver,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplay8.h	/^DECLARE_INTERFACE_(IDirectPlay8Peer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplay8.h	/^DECLARE_INTERFACE_(IDirectPlay8Server,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplay8.h	/^DECLARE_INTERFACE_(IDirectPlay8ThreadPool,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplobby.h	/^DECLARE_INTERFACE_(IDirectPlayLobby,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplobby.h	/^DECLARE_INTERFACE_(IDirectPlayLobby2,IDirectPlayLobby)$/;"	f
DECLARE_INTERFACE_	.\dplobby.h	/^DECLARE_INTERFACE_(IDirectPlayLobby3,IDirectPlayLobby2)$/;"	f
DECLARE_INTERFACE_	.\dplobby8.h	/^DECLARE_INTERFACE_(IDirectPlay8LobbiedApplication,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dplobby8.h	/^DECLARE_INTERFACE_(IDirectPlay8LobbyClient,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dpnathlp.h	/^DECLARE_INTERFACE_(IDirectPlayNATHelp,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsadmin.h	/^DECLARE_INTERFACE_(IDsAdminCreateObj,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsadmin.h	/^DECLARE_INTERFACE_(IDsAdminNewObj,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsadmin.h	/^DECLARE_INTERFACE_(IDsAdminNewObjExt,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsadmin.h	/^DECLARE_INTERFACE_(IDsAdminNewObjPrimarySite,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsadmin.h	/^DECLARE_INTERFACE_(IDsAdminNotifyHandler,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsclient.h	/^DECLARE_INTERFACE_(IDsBrowseDomainTree,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsclient.h	/^DECLARE_INTERFACE_(IDsDisplaySpecifier,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsdriver.h	/^DECLARE_INTERFACE_(IDsCaptureDriver,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsdriver.h	/^DECLARE_INTERFACE_(IDsCaptureDriverBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsdriver.h	/^DECLARE_INTERFACE_(IDsDriver,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsdriver.h	/^DECLARE_INTERFACE_(IDsDriverBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsdriver.h	/^DECLARE_INTERFACE_(IDsDriverNotify,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsdriver.h	/^DECLARE_INTERFACE_(IDsDriverPropertySet,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dskquota.h	/^DECLARE_INTERFACE_(IDiskQuotaControl,IConnectionPointContainer) {$/;"	f
DECLARE_INTERFACE_	.\dskquota.h	/^DECLARE_INTERFACE_(IDiskQuotaEvents,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dskquota.h	/^DECLARE_INTERFACE_(IDiskQuotaUser,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dskquota.h	/^DECLARE_INTERFACE_(IDiskQuotaUserBatch,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dskquota.h	/^DECLARE_INTERFACE_(IEnumDiskQuotaUsers,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSound,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSound3DBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSound3DListener,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSound8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSoundBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSoundBuffer8,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSoundCapture,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSoundCaptureBuffer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSoundCaptureBuffer8,IDirectSoundCaptureBuffer)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSoundFullDuplex,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IDirectSoundNotify,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dsound.h	/^DECLARE_INTERFACE_(IKsPropertySet,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_BAT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_DIT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_EIT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_EIT2,IDVB_EIT)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_NIT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_RST,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_SDT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_SIT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_ST,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_TDT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDVB_TOT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbComponentDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbContentDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbContentIdentifierDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbDataBroadcastDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbDataBroadcastIDDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbDefaultAuthorityDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbExtendedEventDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbHDSimulcastLogicalChannelDescriptor,IDvbLogicalChannelDescriptor)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbLinkageDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbLogicalChannel2Descriptor,IDvbLogicalChannelDescriptor2)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbLogicalChannelDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbLogicalChannelDescriptor2,IDvbLogicalChannelDescriptor)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbMultilingualServiceNameDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbNetworkNameDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbParentalRatingDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbPrivateDataSpecifierDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbServiceDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbServiceDescriptor2,IDvbServiceDescriptor)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbServiceListDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbShortEventDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbSiParser,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbSiParser2,IDvbSiParser)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbSubtitlingDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dvbsiparser.h	/^DECLARE_INTERFACE_(IDvbTeletextDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteBitmapRenderTarget,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFactory,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFont,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontCollection,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontCollectionLoader,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontFace,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontFamily,IDWriteFontList)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontFile,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontFileEnumerator,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontFileLoader,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontFileStream,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteFontList,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteGdiInterop,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteGlyphRunAnalysis,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteInlineObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteLocalFontFileLoader,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteLocalizedStrings,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteNumberSubstitution,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWritePixelSnapping,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteRenderingParams,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteTextAnalysisSink,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteTextAnalysisSource,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteTextAnalyzer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteTextFormat,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteTextLayout,IDWriteTextFormat)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteTextRenderer,IDWritePixelSnapping)$/;"	f
DECLARE_INTERFACE_	.\dwrite.h	/^DECLARE_INTERFACE_(IDWriteTypography,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite_1.h	/^DECLARE_INTERFACE_(IDWriteFactory1,IDWriteFactory)$/;"	f
DECLARE_INTERFACE_	.\dwrite_1.h	/^DECLARE_INTERFACE_(IDWriteFontFace1, IDWriteFontFace)$/;"	f
DECLARE_INTERFACE_	.\dwrite_1.h	/^DECLARE_INTERFACE_(IDWriteRenderingParams1,IDWriteRenderingParams)$/;"	f
DECLARE_INTERFACE_	.\dwrite_2.h	/^DECLARE_INTERFACE_(IDWriteColorGlyphRunEnumerator,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite_2.h	/^DECLARE_INTERFACE_(IDWriteFactory2,IDWriteFactory1)$/;"	f
DECLARE_INTERFACE_	.\dwrite_2.h	/^DECLARE_INTERFACE_(IDWriteFontFallback,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite_2.h	/^DECLARE_INTERFACE_(IDWriteFontFallbackBuilder,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dwrite_2.h	/^DECLARE_INTERFACE_(IDWriteRenderingParams2,IDWriteRenderingParams1)$/;"	f
DECLARE_INTERFACE_	.\dxdiag.h	/^DECLARE_INTERFACE_(IDxDiagContainer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dxdiag.h	/^DECLARE_INTERFACE_(IDxDiagProvider,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dxfile.h	/^DECLARE_INTERFACE_(IDirectXFile,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dxfile.h	/^DECLARE_INTERFACE_(IDirectXFileBinary,IDirectXFileObject)$/;"	f
DECLARE_INTERFACE_	.\dxfile.h	/^DECLARE_INTERFACE_(IDirectXFileData,IDirectXFileObject)$/;"	f
DECLARE_INTERFACE_	.\dxfile.h	/^DECLARE_INTERFACE_(IDirectXFileDataReference,IDirectXFileObject)$/;"	f
DECLARE_INTERFACE_	.\dxfile.h	/^DECLARE_INTERFACE_(IDirectXFileEnumObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dxfile.h	/^DECLARE_INTERFACE_(IDirectXFileObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dxfile.h	/^DECLARE_INTERFACE_(IDirectXFileSaveObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dxvahd.h	/^DECLARE_INTERFACE_(IDXVAHD_Device,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\dxvahd.h	/^DECLARE_INTERFACE_(IDXVAHD_VideoProcessor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\evr.h	/^DECLARE_INTERFACE_(IMFDesiredSample,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\evr.h	/^DECLARE_INTERFACE_(IMFTrackedSample,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\evr.h	/^DECLARE_INTERFACE_(IMFVideoDeviceID,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\evr.h	/^DECLARE_INTERFACE_(IMFVideoDisplayControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\evr.h	/^DECLARE_INTERFACE_(IMFVideoPositionMapper,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\evr.h	/^DECLARE_INTERFACE_(IMFVideoPresenter,IMFClockStateSink)$/;"	f
DECLARE_INTERFACE_	.\evr.h	/^DECLARE_INTERFACE_(IMFVideoRenderer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\functiondiscoveryapi.h	/^DECLARE_INTERFACE_(IFunctionDiscovery,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\functiondiscoveryapi.h	/^DECLARE_INTERFACE_(IFunctionInstance,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\functiondiscoveryapi.h	/^DECLARE_INTERFACE_(IFunctionInstanceCollection,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\functiondiscoveryapi.h	/^DECLARE_INTERFACE_(IFunctionInstanceCollectionQuery,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\functiondiscoveryapi.h	/^DECLARE_INTERFACE_(IFunctionInstanceQuery,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\functiondiscoverynotification.h	/^DECLARE_INTERFACE_(IFunctionDiscoveryNotification,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\gpedit.h	/^  DECLARE_INTERFACE_(IGPEInformation,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\gpedit.h	/^  DECLARE_INTERFACE_(IGroupPolicyObject,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\gpedit.h	/^  DECLARE_INTERFACE_(IRSOPInformation,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\icrsint.h	/^DECLARE_INTERFACE_(IADORecordBinding,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\identitystore.h	/^DECLARE_INTERFACE_(IAssociatedIdentityProvider,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\iimgctx.h	/^DECLARE_INTERFACE_(IImgCtx,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\intshcut.h	/^  DECLARE_INTERFACE_(IUniformResourceLocatorA,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\intshcut.h	/^  DECLARE_INTERFACE_(IUniformResourceLocatorW,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\kcom.h	/^DECLARE_INTERFACE_(IKoInitializeParentDeviceObject, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\ks.h	/^DECLARE_INTERFACE_(IKsControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ks.h	/^DECLARE_INTERFACE_(IKsDeviceFunctions,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ks.h	/^DECLARE_INTERFACE_(IKsReferenceClock,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsAggregateControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsAllocator,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsAllocatorEx,IKsAllocator)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsClockPropertySet,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsDataTypeCompletion,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsDataTypeHandler,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsInterfaceHandler,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsNotifyEvent,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsPin,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsPinEx,IKsPin)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsPinFactory,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsPinPipe,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsPropertySet,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsQualityForwarder,IKsObject)$/;"	f
DECLARE_INTERFACE_	.\ksproxy.h	/^DECLARE_INTERFACE_(IKsTopology,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mfplay.h	/^DECLARE_INTERFACE_(IMFPMediaItem,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mfplay.h	/^DECLARE_INTERFACE_(IMFPMediaPlayer,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mfplay.h	/^DECLARE_INTERFACE_(IMFPMediaPlayerCallback,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2data.h	/^DECLARE_INTERFACE_(IMpeg2Data,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2data.h	/^DECLARE_INTERFACE_(IMpeg2Stream,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2data.h	/^DECLARE_INTERFACE_(ISectionList,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2psiparser.h	/^DECLARE_INTERFACE_(ICAT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2psiparser.h	/^DECLARE_INTERFACE_(IGenericDescriptor,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2psiparser.h	/^DECLARE_INTERFACE_(IPAT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2psiparser.h	/^DECLARE_INTERFACE_(IPMT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2psiparser.h	/^DECLARE_INTERFACE_(IPSITables,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\mpeg2psiparser.h	/^DECLARE_INTERFACE_(ITSDT,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\msoav.h	/^DECLARE_INTERFACE_(IOfficeAntiVirus,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\msrdc.h	/^DECLARE_INTERFACE_(IFindSimilarResults,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\msrdc.h	/^DECLARE_INTERFACE_(IRdcFileWriter,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\msrdc.h	/^DECLARE_INTERFACE_(ISimilarity,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\msrdc.h	/^DECLARE_INTERFACE_(ISimilarityFileIdTable,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\msrdc.h	/^DECLARE_INTERFACE_(ISimilarityReportProgress,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\msrdc.h	/^DECLARE_INTERFACE_(ISimilarityTraitsMappedView,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\msrdc.h	/^DECLARE_INTERFACE_(ISimilarityTraitsMapping,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ndhelper.h	/^DECLARE_INTERFACE_(INetDiagHelper,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ndhelper.h	/^DECLARE_INTERFACE_(INetDiagHelperEx,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ndhelper.h	/^DECLARE_INTERFACE_(INetDiagHelperInfo,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ndhelper.h	/^DECLARE_INTERFACE_(INetDiagHelperUtilFactory,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\objsel.h	/^DECLARE_INTERFACE_(IDsObjectPicker,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\oledlg.h	/^  DECLARE_INTERFACE_(IOleUILinkContainerA,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\oledlg.h	/^  DECLARE_INTERFACE_(IOleUILinkContainerW,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\oledlg.h	/^  DECLARE_INTERFACE_(IOleUILinkInfoA,IOleUILinkContainerA) {$/;"	f
DECLARE_INTERFACE_	.\oledlg.h	/^  DECLARE_INTERFACE_(IOleUILinkInfoW,IOleUILinkContainerW) {$/;"	f
DECLARE_INTERFACE_	.\oledlg.h	/^  DECLARE_INTERFACE_(IOleUIObjInfoA,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\oledlg.h	/^  DECLARE_INTERFACE_(IOleUIObjInfoW,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\opmapi.h	/^DECLARE_INTERFACE_(IOPMVideoOutput,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\portabledeviceconnectapi.h	/^DECLARE_INTERFACE_(IConnectionRequestCallback,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\ratings.h	/^DECLARE_INTERFACE_(IObtainRating,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\rdpencomapi.h	/^DECLARE_INTERFACE_(IRDPSRAPIAttendee,IDispatch)$/;"	f
DECLARE_INTERFACE_	.\rdpencomapi.h	/^DECLARE_INTERFACE_(IRDPSRAPITcpConnectionInfo,IDispatch)$/;"	f
DECLARE_INTERFACE_	.\reconcil.h	/^  DECLARE_INTERFACE_(IBriefcaseInitiator,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\reconcil.h	/^  DECLARE_INTERFACE_(INotifyReplica,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\reconcil.h	/^  DECLARE_INTERFACE_(IReconcilableObject,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\reconcil.h	/^  DECLARE_INTERFACE_(IReconcileInitiator,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\richole.h	/^DECLARE_INTERFACE_ (IRichEditOle, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\richole.h	/^DECLARE_INTERFACE_ (IRichEditOleCallback, IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\shlwapi.h	/^  DECLARE_INTERFACE_(IQueryAssociations,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\sti.h	/^  DECLARE_INTERFACE_(IStiDevice,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\sti.h	/^  DECLARE_INTERFACE_(IStillImageA,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\sti.h	/^  DECLARE_INTERFACE_(IStillImageW,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\strmif.h	/^DECLARE_INTERFACE_(IAMAsyncReaderTimestampScaling,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\strmif.h	/^DECLARE_INTERFACE_(IAMPluginControl,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vfw.h	/^  DECLARE_INTERFACE_(IAVIEditStream,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\vfw.h	/^  DECLARE_INTERFACE_(IAVIFile,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\vfw.h	/^  DECLARE_INTERFACE_(IAVIPersistFile,IPersistFile) {$/;"	f
DECLARE_INTERFACE_	.\vfw.h	/^  DECLARE_INTERFACE_(IAVIStream,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\vfw.h	/^  DECLARE_INTERFACE_(IAVIStreaming,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\vfw.h	/^  DECLARE_INTERFACE_(IGetFrame,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\vsadmin.h	/^DECLARE_INTERFACE_(IVssAdmin,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssBackupComponents,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssBackupComponentsEx,IVssBackupComponents)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssBackupComponentsEx2,IVssBackupComponentsEx)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssBackupComponentsEx3,IVssBackupComponentsEx2)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssExamineWriterMetadata,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssExamineWriterMetadataEx,IVssExamineWriterMetadata)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssExamineWriterMetadataEx2,IVssExamineWriterMetadataEx)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssWMComponent,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsbackup.h	/^DECLARE_INTERFACE_(IVssWriterComponentsExt,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsmgmt.h	/^DECLARE_INTERFACE_(IVssDifferentialSoftwareSnapshotMgmt,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsmgmt.h	/^DECLARE_INTERFACE_(IVssDifferentialSoftwareSnapshotMgmt2,IVssDifferentialSoftwareSnapshotMgmt)$/;"	f
DECLARE_INTERFACE_	.\vsmgmt.h	/^DECLARE_INTERFACE_(IVssDifferentialSoftwareSnapshotMgmt3,IVssDifferentialSoftwareSnapshotMgmt2)$/;"	f
DECLARE_INTERFACE_	.\vsmgmt.h	/^DECLARE_INTERFACE_(IVssEnumMgmtObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsmgmt.h	/^DECLARE_INTERFACE_(IVssSnapshotMgmt,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsmgmt.h	/^DECLARE_INTERFACE_(IVssSnapshotMgmt2,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsprov.h	/^DECLARE_INTERFACE_(IVssHardwareSnapshotProvider,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsprov.h	/^DECLARE_INTERFACE_(IVssHardwareSnapshotProviderEx,IVssHardwareSnapshotProvider)$/;"	f
DECLARE_INTERFACE_	.\vsprov.h	/^DECLARE_INTERFACE_(IVssProviderCreateSnapshotSet,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsprov.h	/^DECLARE_INTERFACE_(IVssProviderNotifications,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vsprov.h	/^DECLARE_INTERFACE_(IVssSoftwareSnapshotProvider,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vss.h	/^DECLARE_INTERFACE_(IVssAsync,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vss.h	/^DECLARE_INTERFACE_(IVssEnumObject,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssComponent,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssComponentEx,IVssComponent)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssComponentEx2,IVssComponentEx)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssCreateExpressWriterMetadata,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssCreateWriterMetadata,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssCreateWriterMetadataEx,IVssCreateWriterMetadata)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssExpressWriter,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssWMDependency,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssWMFiledesc,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\vswriter.h	/^DECLARE_INTERFACE_(IVssWriterComponents,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\wiadevd.h	/^  DECLARE_INTERFACE_(IWiaUIExtension,IUnknown) {$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IAsynchronousDataRetriever,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IChangeConflict,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IChangeUnitException,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IChangeUnitListFilterInfo,ISyncFilterInfo)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IClockVector,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IClockVectorElement,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IConstructReplicaKeyMap,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(ICoreFragment,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IDataRetrieverCallback,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IEnumSyncChangeUnits,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(ILoadChangeContext,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(IRecoverableErrorData,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(ISyncChange,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(ISyncChangeUnit,IUnknown)$/;"	f
DECLARE_INTERFACE_	.\winsync.h	/^DECLARE_INTERFACE_(ISyncFilterInfo,IUnknown)$/;"	f
DECLARE_INTERFACE_IID	.\shlobj.h	/^  DECLARE_INTERFACE_IID (IFileViewerA, "000214f0-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID	.\shlobj.h	/^  DECLARE_INTERFACE_IID (IFileViewerW, "000214f8-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\aclui.h	/^  DECLARE_INTERFACE_IID_ (IEffectivePermission, IUnknown, "3853DC76-9F35-407c-88A1-D19344365FBC") {$/;"	f
DECLARE_INTERFACE_IID_	.\aclui.h	/^  DECLARE_INTERFACE_IID_ (IEffectivePermission2, IUnknown, "941FABCA-DD47-4FCA-90BB-B0E10255F20D") {$/;"	f
DECLARE_INTERFACE_IID_	.\aclui.h	/^  DECLARE_INTERFACE_IID_ (ISecurityInformation, IUnknown, "965FC360-16FF-11d0-91CB-00AA00BBB723") {$/;"	f
DECLARE_INTERFACE_IID_	.\aclui.h	/^  DECLARE_INTERFACE_IID_ (ISecurityInformation2, IUnknown, "c3ccfdb4-6f88-11d2-a3ce-00c04fb1782a") {$/;"	f
DECLARE_INTERFACE_IID_	.\aclui.h	/^  DECLARE_INTERFACE_IID_ (ISecurityInformation3, IUnknown, "E2CDC9CC-31BD-4f8f-8C8B-B641AF516A1A") {$/;"	f
DECLARE_INTERFACE_IID_	.\aclui.h	/^  DECLARE_INTERFACE_IID_ (ISecurityInformation4, IUnknown, "EA961070-CD14-4621-ACE4-F63C03E583E4") {$/;"	f
DECLARE_INTERFACE_IID_	.\aclui.h	/^  DECLARE_INTERFACE_IID_ (ISecurityObjectTypeInfo, IUnknown, "FC3066EB-79EF-444b-9111-D18A75EBF2FA") {$/;"	f
DECLARE_INTERFACE_IID_	.\d3dx9xof.h	/^DECLARE_INTERFACE_IID_(ID3DXFile,IUnknown,"cef08cf9-7b4f-4429-9624-2a690a933201")$/;"	f
DECLARE_INTERFACE_IID_	.\d3dx9xof.h	/^DECLARE_INTERFACE_IID_(ID3DXFileData,IUnknown,"cef08cfd-7b4f-4429-9624-2a690a933201")$/;"	f
DECLARE_INTERFACE_IID_	.\d3dx9xof.h	/^DECLARE_INTERFACE_IID_(ID3DXFileEnumObject,IUnknown,"cef08cfc-7b4f-4429-9624-2a690a933201")$/;"	f
DECLARE_INTERFACE_IID_	.\d3dx9xof.h	/^DECLARE_INTERFACE_IID_(ID3DXFileSaveData,IUnknown,"cef08cfb-7b4f-4429-9624-2a690a933201")$/;"	f
DECLARE_INTERFACE_IID_	.\d3dx9xof.h	/^DECLARE_INTERFACE_IID_(ID3DXFileSaveObject,IUnknown,"cef08cfa-7b4f-4429-9624-2a690a933201")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionClip,IUnknown,"64ac3703-9d3f-45ec-a109-7cac0e7a13a7")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionDevice,IUnknown,"c37ea93a-e7aa-450d-b16f-9746cb0407f3")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionEffect,IUnknown,"ec81b08f-bfcb-4e8d-b193-a915587999e8")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionEffectGroup,IDCompositionEffect,"a7929a74-e6b2-4bd6-8b95-4040119ca34d")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionMatrixTransform,IDCompositionTransform,"16cdff07-c503-419c-83f2-0965c7af1fa6")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionMatrixTransform3D,IDCompositionTransform3D,"4b3363f0-643b-41b7-b6e0-ccf22d34467c")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionRectangleClip,IDCompositionClip,"9842ad7d-d9cf-4908-aed7-48b51da5e7c2")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionRotateTransform,IDCompositionTransform,"641ed83c-ae96-46c5-90dc-32774cc5c6d5")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionRotateTransform3D,IDCompositionTransform3D,"d8f5b23f-d429-4a91-b55a-d2f45fd75b18")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionScaleTransform,IDCompositionTransform,"71fde914-40ef-45ef-bd51-68b037c339f9")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionScaleTransform3D,IDCompositionTransform3D,"2a9e9ead-364b-4b15-a7c4-a1997f78b389")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionSkewTransform,IDCompositionTransform,"e57aa735-dcdb-4c72-9c61-0591f58889ee")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionSurface,IUnknown,"bb8a4953-2c99-4f5a-96f5-4819027fa3ac")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionTarget,IUnknown,"eacdd04c-117e-4e17-88f4-d1b12b0e3d89")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionTransform,IDCompositionTransform3D,"fd55faa7-37e0-4c20-95d2-9be45bc33f55")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionTransform3D,IDCompositionEffect,"71185722-246b-41f2-aad1-0443f7f4bfc2")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionTranslateTransform,IDCompositionTransform,"06791122-c6f0-417d-8323-269e987f5954")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionTranslateTransform3D,IDCompositionTransform3D,"91636d4b-9ba1-4532-aaf7-e3344994d788")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionVirtualSurface,IDCompositionSurface,"ae471c51-5f53-4a24-8d3e-d0c39c30b3f0")$/;"	f
DECLARE_INTERFACE_IID_	.\dcomp.h	/^DECLARE_INTERFACE_IID_(IDCompositionVisual,IUnknown,"4d93059d-097b-4651-9a60-f0f25116e2f3")$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IACList, IUnknown, "77A130B0-94FD-11D0-A544-00C04FD7d062") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IACList2, IACList, "470141a0-5186-11d2-bbb6-0060977b464c") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IADesktopP2, IUnknown, "B22754E2-4574-11d1-9888-006097DEACF9") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IActiveDesktop, IUnknown, "f490eb00-1240-11d1-9888-006097deacf9") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IActiveDesktopP, IUnknown, "52502EE0-EC80-11D0-89AB-00C04FC2972D") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IBanneredBar, IUnknown, "596A9A94-013E-11d1-8D34-00A0C90F2719") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IColumnProvider, IUnknown, "E8025004-1C42-11d2-BE2C-00A0C9A83DA1") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (ICopyHookA, IUnknown, "000214EF-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (ICopyHookW, IUnknown, "000214FC-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (ICurrentWorkingDirectory, IUnknown, "91956D21-9276-11d1-921A-006097DF5BD4") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IDefViewFrame, IUnknown, "710EB7A0-45ED-11D0-924A-0020AFC7AC4D") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IDeskBarClient, IOleWindow, "EB0FE175-1A3A-11D0-89B3-00A0C90A90AC") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IDocViewSite, IUnknown, "87D605E0-C511-11CF-89A9-00A0C9054129") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IDockingWindowFrame, IOleWindow, "47d2657a-7b27-11d0-8ca9-00a0c92dbfe8") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IDockingWindowSite, IOleWindow, "2a342fc2-7b26-11d0-8ca9-00a0c92dbfe8") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IEnumShellImageStore, IUnknown, "6DFD582B-92E3-11D1-98A3-00C04FB687DA") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IExtractIconA, IUnknown, "000214eb-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IExtractIconW, IUnknown, "000214fa-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IFileViewerSite, IUnknown, "000214f3-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IInitializeObject, IUnknown, "4622AD16-FF23-11d0-8D34-00A0C90F2719") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (INewShortcutHookA, IUnknown, "000214e1-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (INewShortcutHookW, IUnknown, "000214f7-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IObjMgr, IUnknown, "00BB2761-6A77-11D0-A535-00C04FD7D062") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IProgressDialog, IUnknown, "EBBC7C04-315E-11d2-B62F-006097DF5BD4") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IQueryInfo, IUnknown, "00021500-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (ISearchContext, IUnknown, "09F656A2-41AF-480C-88F7-16CC0D164615") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellChangeNotify, IUnknown, "D82BE2B1-5764-11D0-A96E-00C04FD705A2") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellDetails, IUnknown, "000214EC-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellExecuteHookA, IUnknown, "000214f5-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellExecuteHookW, IUnknown, "000214fb-0000-0000-c000-000000000046") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellFolderBand, IUnknown, "7FE80CC8-C247-11d0-B93A-00A0C90312E1") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellFolderView, IUnknown, "37A378C0-F82D-11CE-AE65-08002B2E1262") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellFolderViewCB, IUnknown, "2047E320-F2A9-11CE-AE65-08002B2E1262") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellIconOverlay, IUnknown, "7d688a70-c613-11d0-999b-00c04fd655e1") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellIconOverlayIdentifier, IUnknown, "0c6c4200-c589-11d0-999a-00c04fd655e1") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellIconOverlayManager, IUnknown, "f10b5e34-dd3b-42a7-aa7d-2f4ec54bb09b") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IShellImageStore, IUnknown, "48C8118C-B924-11D1-98D5-00C04FB687DA") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IThumbnailCapture, IUnknown, "4ea39266-7211-409f-b622-f63dbd16c533") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IURLSearchHook, IUnknown, "ac60f6a0-0fd9-11d0-99cb-00c04fd64497") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^  DECLARE_INTERFACE_IID_ (IURLSearchHook2, IURLSearchHook, "5ee44da4-6d32-46e3-86bc-07540dedd0e0") {$/;"	f
DECLARE_INTERFACE_IID_	.\shlobj.h	/^DECLARE_INTERFACE_IID_ (INamedPropertyBag, IUnknown, "FB700430-952C-11d1-946F-000000000000") {$/;"	f
DECLARE_MAPI_INTERFACE	.\wabapi.h	/^    DECLARE_MAPI_INTERFACE(IWABOBJECT_)$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IABContainer,IMAPIContainer) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IAttach,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IDistList,IMAPIContainer) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIAdviseSink,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIContainer,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIControl,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIFolder,IMAPIContainer) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIProgress,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIProp,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIStatus,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPITable,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMailUser,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMessage,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IMsgStore,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IProfSect,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapidefs.h	/^  DECLARE_MAPI_INTERFACE_(IProviderAdmin,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIForm,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIFormAdviseSink,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIFormContainer,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIFormFactory,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIFormInfo,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIFormMgr,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIMessageSite,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIViewAdviseSink,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IMAPIViewContext,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiform.h	/^DECLARE_MAPI_INTERFACE_(IPersistMessage,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapihook.h	/^  DECLARE_MAPI_INTERFACE_(ISpoolerHook,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapispi.h	/^  DECLARE_MAPI_INTERFACE_(IABLogon,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapispi.h	/^  DECLARE_MAPI_INTERFACE_(IABProvider,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapispi.h	/^  DECLARE_MAPI_INTERFACE_(IMAPISupport,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapispi.h	/^  DECLARE_MAPI_INTERFACE_(IMSLogon,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapispi.h	/^  DECLARE_MAPI_INTERFACE_(IMSProvider,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapispi.h	/^  DECLARE_MAPI_INTERFACE_(IXPLogon,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapispi.h	/^  DECLARE_MAPI_INTERFACE_(IXPProvider,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiutil.h	/^  DECLARE_MAPI_INTERFACE_(IPropData,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapiutil.h	/^  DECLARE_MAPI_INTERFACE_(ITableData,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapix.h	/^  DECLARE_MAPI_INTERFACE_(IAddrBook,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapix.h	/^  DECLARE_MAPI_INTERFACE_(IMAPISession,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapix.h	/^  DECLARE_MAPI_INTERFACE_(IMsgServiceAdmin,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\mapix.h	/^  DECLARE_MAPI_INTERFACE_(IProfAdmin,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\tnef.h	/^  DECLARE_MAPI_INTERFACE_(ITnef,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabapi.h	/^  DECLARE_MAPI_INTERFACE_(IWABExtInit,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabapi.h	/^  DECLARE_MAPI_INTERFACE_(IWABObject,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IABContainer,IMAPIContainer) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IAttach,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IDistList,IMAPIContainer) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIAdviseSink,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIContainer,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIControl,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIFolder,IMAPIContainer) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIProgress,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIProp,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPIStatus,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMAPITable,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMailUser,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMessage,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IMsgStore,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IProfSect,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabdefs.h	/^  DECLARE_MAPI_INTERFACE_(IProviderAdmin,IUnknown) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabiab.h	/^DECLARE_MAPI_INTERFACE_(IAddrBook,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabutil.h	/^  DECLARE_MAPI_INTERFACE_(IPropData,IMAPIProp) {$/;"	f
DECLARE_MAPI_INTERFACE_	.\wabutil.h	/^  DECLARE_MAPI_INTERFACE_(ITableData,IUnknown) {$/;"	f
DPA_DestroyCallback	.\commctrl.h	/^  extern "C++" __inline void DPA_DestroyCallback (HDPA hdpa, PFNDAENUMCALLBACKCONST pfnCB, void *pData) {$/;"	f
DPA_EnumCallback	.\commctrl.h	/^  extern "C++" __inline void DPA_EnumCallback (HDPA hdpa, PFNDAENUMCALLBACKCONST pfnCB, void *pData) {$/;"	f
DPA_Merge	.\commctrl.h	/^  extern "C++" __inline WINBOOL DPA_Merge (HDPA hdpaDest, HDPA hdpaSrc, DWORD dwFlags, PFNDACOMPARECONST pfnCompare, PFNDPAMERGECONST pfnMerge, LPARAM lParam) {$/;"	f
DPA_Search	.\commctrl.h	/^  extern "C++" __inline int DPA_Search (HDPA hdpa, const void *pFind, int iStart, PFNDACOMPARECONST pfnCompare, LPARAM lParam, UINT options) {$/;"	f
DPA_Sort	.\commctrl.h	/^  extern "C++" __inline WINBOOL DPA_Sort (HDPA hdpa, PFNDACOMPARECONST pfnCompare, LPARAM lParam) {$/;"	f
DSA_DestroyCallback	.\commctrl.h	/^  extern "C++" __inline void DSA_DestroyCallback (HDSA hdsa, PFNDAENUMCALLBACKCONST pfnCB, void *pData) {$/;"	f
DSA_EnumCallback	.\commctrl.h	/^  extern "C++" __inline void DSA_EnumCallback (HDSA hdsa, PFNDAENUMCALLBACKCONST pfnCB, void *pData) {$/;"	f
DSA_Sort	.\commctrl.h	/^  extern "C++" __inline WINBOOL DSA_Sort (HDSA hdsa, PFNDACOMPARECONST pfnCompare, LPARAM lParam) {$/;"	f
DXCompareElements	.\dxtmpl.h	/^WINBOOL DXCompareElements(const TYPE *pElement1,const ARG_TYPE *pElement2) {$/;"	f
DXConstructElements	.\dxtmpl.h	/^inline void DXConstructElements(TYPE *pElements,int nCount) {$/;"	f
DXCopyElements	.\dxtmpl.h	/^inline void DXCopyElements(TYPE *pDest,const TYPE *pSrc,int nCount) {$/;"	f
DXDestructElements	.\dxtmpl.h	/^inline void DXDestructElements(TYPE *pElements,int nCount) {$/;"	f
DXHashKey	.\dxtmpl.h	/^inline UINT DXHashKey(ARG_KEY key) { return ((UINT)(void*)(DWORD)key) >> 4; }$/;"	f
DXIsValidAddress	.\dxtmpl.h	/^__CRT_INLINE WINBOOL DXIsValidAddress(const void *lp,UINT nBytes,WINBOOL bReadWrite) { return (lp!=NULL && !IsBadReadPtr(lp,nBytes) && (!bReadWrite || !IsBadWritePtr((LPVOID)lp,nBytes))); }$/;"	f
DXVA2FixedToFloat	.\dxva2api.h	/^__forceinline float DXVA2FixedToFloat (const DXVA2_Fixed32 f32) {$/;"	f
DXVA2FloatToFixed	.\dxva2api.h	/^__forceinline DXVA2_Fixed32 DXVA2FloatToFixed (const float f) {$/;"	f
DXVA2_Fixed32OpaqueAlpha	.\dxva2api.h	/^__forceinline const DXVA2_Fixed32 DXVA2_Fixed32OpaqueAlpha (void) {$/;"	f
DXVA2_Fixed32TransparentAlpha	.\dxva2api.h	/^__forceinline const DXVA2_Fixed32 DXVA2_Fixed32TransparentAlpha (void) {$/;"	f
Data_t	.\comutil.h	/^inline _bstr_t::Data_t::Data_t(BSTR bstr,bool fCopy) : m_str(NULL),m_RefCount(1) {$/;"	f	class:_bstr_t::Data_t
Data_t	.\comutil.h	/^inline _bstr_t::Data_t::Data_t(const _bstr_t &s1,const _bstr_t &s2) : m_str(NULL),m_RefCount(1) {$/;"	f	class:_bstr_t::Data_t
Data_t	.\comutil.h	/^inline _bstr_t::Data_t::Data_t(const char *s) : m_str(NULL),m_RefCount(1) {$/;"	f	class:_bstr_t::Data_t
Data_t	.\comutil.h	/^inline _bstr_t::Data_t::Data_t(const wchar_t *s) : m_str(NULL),m_RefCount(1) {$/;"	f	class:_bstr_t::Data_t
DebugCommandException	.\dbgeng.h	/^  __CRT_INLINE void DebugCommandException(ULONG Command,ULONG ArgSize,PVOID Arg) {$/;"	f
DeleteClass	.\wmiatlprov.h	/^    HRESULT WINAPI DeleteClass(const BSTR Class,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
DeleteClass	.\wmiatlprov.h	/^    virtual HRESULT WINAPI DeleteClass(const BSTR strClass,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult){return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
DeleteClassAsync	.\wmiatlprov.h	/^    HRESULT WINAPI DeleteClassAsync(const BSTR Class,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
DeleteInstance	.\wmiatlprov.h	/^    HRESULT WINAPI DeleteInstance(const BSTR ObjectPath,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
DeleteInstance	.\wmiatlprov.h	/^    virtual HRESULT WINAPI DeleteInstance(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult){return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
DeleteInstanceAsync	.\wmiatlprov.h	/^    virtual HRESULT WINAPI DeleteInstanceAsync(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler){return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
Description	.\comdef.h	/^inline _bstr_t _com_error::Description() const {$/;"	f	class:_com_error
Detach	.\comip.h	/^  Interface *Detach() throw() {$/;"	f	class:_com_ptr_t
Detach	.\comutil.h	/^inline BSTR _bstr_t::Detach() throw () {$/;"	f	class:_bstr_t
Detach	.\comutil.h	/^inline VARIANT _variant_t::Detach()$/;"	f	class:_variant_t
Detach	.\wrl\client.h	/^            InterfaceType *Detach() throw() {$/;"	f	class:Microsoft::WRL::ComPtr
Determinant	.\d2d1helper.h	/^    inline FLOAT Determinant() const {$/;"	f	class:D2D1::Matrix3x2F
DisplayDibWindowCreateEx	.\dispdib.h	/^static __inline HWND DisplayDibWindowCreateEx(HWND hwndParent,HINSTANCE hInstance,DWORD dwStyle) {$/;"	f
DisplayDibWindowMessage	.\dispdib.h	/^static __inline UINT DisplayDibWindowMessage(HWND hwnd,UINT msg,WPARAM wParam,LPARAM lParam,DWORD cbSize) {$/;"	f
DrawArc	.\gdiplus\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
DrawArc	.\gdiplus\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Graphics
DrawArc	.\gdiplus\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, const Rect& rect,$/;"	f	class:Graphics
DrawArc	.\gdiplus\gdiplusgraphics.h	/^	Status DrawArc(const Pen *pen, const RectF& rect,$/;"	f	class:Graphics
DrawBezier	.\gdiplus\gdiplusgraphics.h	/^	Status DrawBezier(const Pen *pen,$/;"	f	class:Graphics
DrawBeziers	.\gdiplus\gdiplusgraphics.h	/^	Status DrawBeziers(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawBeziers	.\gdiplus\gdiplusgraphics.h	/^	Status DrawBeziers(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawCachedBitmap	.\gdiplus\gdiplusgraphics.h	/^	Status DrawCachedBitmap(CachedBitmap *cb, INT x, INT y)$/;"	f	class:Graphics
DrawClosedCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawClosedCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const Point *points, INT count,$/;"	f	class:Graphics
DrawClosedCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawClosedCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawClosedCurve(const Pen *pen, const PointF *points, INT count,$/;"	f	class:Graphics
DrawCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const Point *points, INT count,$/;"	f	class:Graphics
DrawCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawCurve	.\gdiplus\gdiplusgraphics.h	/^	Status DrawCurve(const Pen *pen, const PointF *points, INT count,$/;"	f	class:Graphics
DrawDriverString	.\gdiplus\gdiplusgraphics.h	/^	Status DrawDriverString(const UINT16 *text, INT length,$/;"	f	class:Graphics
DrawEllipse	.\gdiplus\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, INT x, INT y, INT width, INT height)$/;"	f	class:Graphics
DrawEllipse	.\gdiplus\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, const Rect& rect)$/;"	f	class:Graphics
DrawEllipse	.\gdiplus\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen, const RectF& rect)$/;"	f	class:Graphics
DrawEllipse	.\gdiplus\gdiplusgraphics.h	/^	Status DrawEllipse(const Pen *pen,$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y, INT srcx, INT srcy,$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, INT x, INT y, INT width, INT height)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y, REAL srcx, REAL srcy,$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, REAL x, REAL y, REAL width, REAL height)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point *destPoints, INT count)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point *destPoints, INT count,$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Point& point)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF *destPoints, INT count)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF *destPoints, INT count,$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const PointF& point)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Rect& destRect,$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const Rect& rect)$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const RectF& destRect,$/;"	f	class:Graphics
DrawImage	.\gdiplus\gdiplusgraphics.h	/^	Status DrawImage(Image *image, const RectF& rect)$/;"	f	class:Graphics
DrawLine	.\gdiplus\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, INT x1, INT y1, INT x2, INT y2)$/;"	f	class:Graphics
DrawLine	.\gdiplus\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, REAL x1, REAL y1, REAL x2, REAL y2)$/;"	f	class:Graphics
DrawLine	.\gdiplus\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, const Point& pt1, const Point& pt2)$/;"	f	class:Graphics
DrawLine	.\gdiplus\gdiplusgraphics.h	/^	Status DrawLine(const Pen *pen, const PointF& pt1, const PointF& pt2)$/;"	f	class:Graphics
DrawLines	.\gdiplus\gdiplusgraphics.h	/^	Status DrawLines(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawLines	.\gdiplus\gdiplusgraphics.h	/^	Status DrawLines(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawPath	.\gdiplus\gdiplusgraphics.h	/^	Status DrawPath(const Pen *pen, const GraphicsPath *path)$/;"	f	class:Graphics
DrawPie	.\gdiplus\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
DrawPie	.\gdiplus\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Graphics
DrawPie	.\gdiplus\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, const Rect& rect,$/;"	f	class:Graphics
DrawPie	.\gdiplus\gdiplusgraphics.h	/^	Status DrawPie(const Pen *pen, const RectF& rect,$/;"	f	class:Graphics
DrawPolygon	.\gdiplus\gdiplusgraphics.h	/^	Status DrawPolygon(const Pen *pen, const Point *points, INT count)$/;"	f	class:Graphics
DrawPolygon	.\gdiplus\gdiplusgraphics.h	/^	Status DrawPolygon(const Pen *pen, const PointF *points, INT count)$/;"	f	class:Graphics
DrawRectangle	.\gdiplus\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen, const Rect& rect)$/;"	f	class:Graphics
DrawRectangle	.\gdiplus\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen, const RectF& rect)$/;"	f	class:Graphics
DrawRectangle	.\gdiplus\gdiplusgraphics.h	/^	Status DrawRectangle(const Pen *pen,$/;"	f	class:Graphics
DrawRectangles	.\gdiplus\gdiplusgraphics.h	/^	Status DrawRectangles(const Pen *pen, const Rect *rects, INT count)$/;"	f	class:Graphics
DrawRectangles	.\gdiplus\gdiplusgraphics.h	/^	Status DrawRectangles(const Pen *pen, const RectF *rects, INT count)$/;"	f	class:Graphics
DrawString	.\gdiplus\gdiplusgraphics.h	/^	Status DrawString(const WCHAR *string, INT length, const Font *font,$/;"	f	class:Graphics
DrawString	.\gdiplus\gdiplusgraphics.h	/^	Status DrawString(const WCHAR *string, INT length,$/;"	f	class:Graphics
DrawingStateDescription	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_DRAWING_STATE_DESCRIPTION DrawingStateDescription($/;"	f	namespace:D2D1
Dtor	.\comdef.h	/^inline void _com_error::Dtor() throw() {$/;"	f	class:_com_error
ElementAt	.\dxtmpl.h	/^inline TYPE &CDXArray<TYPE,ARG_TYPE>::ElementAt(int nIndex) { _ASSERT((nIndex >= 0 && nIndex < m_nSize)); return m_pData[nIndex]; }$/;"	f	class:CDXArray
Ellipse	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_ELLIPSE Ellipse(const D2D1_POINT_2F &center, FLOAT radiusX, FLOAT radiusY) {$/;"	f	namespace:D2D1
EmfToWmfBits	.\gdiplus\gdiplusmetafile.h	/^	static UINT EmfToWmfBits(HENHMETAFILE hEmf,$/;"	f	class:Metafile
Empty	.\gdiplus\gdiplustypes.h	/^	BOOL Empty() const {$/;"	f	struct:Size
Empty	.\gdiplus\gdiplustypes.h	/^	BOOL Empty() const {$/;"	f	struct:SizeF
Emulate_GetDiskFreeSpaceEx	.\newapis.h	/^  static WINBOOL WINAPI Emulate_GetDiskFreeSpaceEx(LPCTSTR ptszRoot,PULARGE_INTEGER pliQuota,PULARGE_INTEGER pliTotal,PULARGE_INTEGER pliFree) {$/;"	f
Emulate_GetLongPathName	.\newapis.h	/^  static DWORD WINAPI Emulate_GetLongPathName(LPCTSTR ptszShort,LPTSTR ptszLong,DWORD ctchBuf) {$/;"	f
EndContainer	.\gdiplus\gdiplusgraphics.h	/^	Status EndContainer(GraphicsContainer state)$/;"	f	class:Graphics
Enter	.\stllock.h	/^  void Enter() { EnterCriticalSection(this); }$/;"	f	class:CCritSec
Enumerate	.\gdiplus\gdipluspath.h	/^	INT Enumerate(PointF *points, BYTE *types, INT count)$/;"	f	class:GraphicsPathIterator
EnumerateMetafile	.\gdiplus\gdiplusgraphics.h	/^	Status EnumerateMetafile(const Metafile *metafile,$/;"	f	class:Graphics
Equals	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::Equals(const Region *region, const Graphics *graphics)$/;"	f	class:Region
Equals	.\gdiplus\gdiplusmatrix.h	/^	BOOL Equals(const Matrix *matrix) const$/;"	f	class:Matrix
Equals	.\gdiplus\gdiplustypes.h	/^	BOOL Equals(const Point& point) const {$/;"	f	struct:Point
Equals	.\gdiplus\gdiplustypes.h	/^	BOOL Equals(const PointF& point) const {$/;"	f	struct:PointF
Equals	.\gdiplus\gdiplustypes.h	/^	BOOL Equals(const Rect& rect) const {$/;"	f	struct:Rect
Equals	.\gdiplus\gdiplustypes.h	/^	BOOL Equals(const RectF& rect) const {$/;"	f	struct:RectF
Equals	.\gdiplus\gdiplustypes.h	/^	BOOL Equals(const Size& size) const {$/;"	f	struct:Size
Equals	.\gdiplus\gdiplustypes.h	/^	BOOL Equals(const SizeF& size) const {$/;"	f	struct:SizeF
Error	.\comdef.h	/^inline HRESULT _com_error::Error() const throw() { return m_hresult; }$/;"	f	class:_com_error
ErrorInfo	.\comdef.h	/^inline IErrorInfo *_com_error::ErrorInfo() const throw() {$/;"	f	class:_com_error
ErrorMessage	.\comdef.h	/^inline const TCHAR *_com_error::ErrorMessage() const throw() {$/;"	f	class:_com_error
EventDataDescCreate	.\evntprov.h	/^  FORCEINLINE VOID EventDataDescCreate (PEVENT_DATA_DESCRIPTOR evp, const VOID *d, ULONG sz) {$/;"	f
EventDescCreate	.\evntprov.h	/^  FORCEINLINE VOID EventDescCreate (PEVENT_DESCRIPTOR ev, USHORT Id, UCHAR ver, UCHAR ch, UCHAR lvl, USHORT t, UCHAR opc, ULONGLONG keyw) {$/;"	f
EventDescGetChannel	.\evntprov.h	/^  FORCEINLINE UCHAR EventDescGetChannel (PCEVENT_DESCRIPTOR ev) {$/;"	f
EventDescGetId	.\evntprov.h	/^  FORCEINLINE USHORT EventDescGetId (PCEVENT_DESCRIPTOR ev) {$/;"	f
EventDescGetKeyword	.\evntprov.h	/^  FORCEINLINE ULONGLONG EventDescGetKeyword (PCEVENT_DESCRIPTOR ev) {$/;"	f
EventDescGetLevel	.\evntprov.h	/^  FORCEINLINE UCHAR EventDescGetLevel (PCEVENT_DESCRIPTOR ev) {$/;"	f
EventDescGetOpcode	.\evntprov.h	/^  FORCEINLINE UCHAR EventDescGetOpcode (PCEVENT_DESCRIPTOR ev) {$/;"	f
EventDescGetTask	.\evntprov.h	/^  FORCEINLINE USHORT EventDescGetTask (PCEVENT_DESCRIPTOR ev) {$/;"	f
EventDescGetVersion	.\evntprov.h	/^  FORCEINLINE UCHAR EventDescGetVersion (PCEVENT_DESCRIPTOR ev) {$/;"	f
EventDescOrKeyword	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescOrKeyword (PEVENT_DESCRIPTOR ev, ULONGLONG keyw) {$/;"	f
EventDescSetChannel	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescSetChannel (PEVENT_DESCRIPTOR ev, UCHAR ch) {$/;"	f
EventDescSetId	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescSetId (PEVENT_DESCRIPTOR ev, USHORT Id) {$/;"	f
EventDescSetKeyword	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescSetKeyword (PEVENT_DESCRIPTOR ev, ULONGLONG keyw) {$/;"	f
EventDescSetLevel	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescSetLevel (PEVENT_DESCRIPTOR ev, UCHAR lvl) {$/;"	f
EventDescSetOpcode	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescSetOpcode (PEVENT_DESCRIPTOR ev, UCHAR opc) {$/;"	f
EventDescSetTask	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescSetTask (PEVENT_DESCRIPTOR ev, USHORT t) {$/;"	f
EventDescSetVersion	.\evntprov.h	/^  FORCEINLINE PEVENT_DESCRIPTOR EventDescSetVersion (PEVENT_DESCRIPTOR ev, UCHAR ver) {$/;"	f
EventDescZero	.\evntprov.h	/^  FORCEINLINE VOID EventDescZero (PEVENT_DESCRIPTOR ev) {$/;"	f
ExAllocateFromLookasideListEx	.\ddk\wdm.h	/^ExAllocateFromLookasideListEx($/;"	f
ExAllocateFromNPagedLookasideList	.\ddk\wdm.h	/^ExAllocateFromNPagedLookasideList($/;"	f
ExAllocateFromPagedLookasideList	.\ddk\wdm.h	/^ExAllocateFromPagedLookasideList($/;"	f
ExAllocateFromZone	.\ddk\ntddk.h	/^ExAllocateFromZone($/;"	f
ExFreeToLookasideListEx	.\ddk\wdm.h	/^ExFreeToLookasideListEx($/;"	f
ExFreeToNPagedLookasideList	.\ddk\wdm.h	/^ExFreeToNPagedLookasideList($/;"	f
ExFreeToPagedLookasideList	.\ddk\wdm.h	/^ExFreeToPagedLookasideList($/;"	f
ExFreeToZone	.\ddk\ntddk.h	/^ExFreeToZone($/;"	f
ExInitializeFastMutex	.\ddk\wdm.h	/^ExInitializeFastMutex($/;"	f
ExQueryDepthSList	.\ddk\wdm.h	/^ExQueryDepthSList(IN PSLIST_HEADER ListHead)$/;"	f
Exception	.\dbgeng.h	/^  STDMETHOD(Exception)(THIS_ PEXCEPTION_RECORD64 Exception,ULONG FirstChance) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
Exclude	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const GraphicsPath *path)$/;"	f	class:Region
Exclude	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const Rect& rect)$/;"	f	class:Region
Exclude	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const RectF& rect)$/;"	f	class:Region
Exclude	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Exclude(const Region *region)$/;"	f	class:Region
ExcludeClip	.\gdiplus\gdiplusgraphics.h	/^	Status ExcludeClip(const Rect& rect)$/;"	f	class:Graphics
ExcludeClip	.\gdiplus\gdiplusgraphics.h	/^	Status ExcludeClip(const RectF& rect)$/;"	f	class:Graphics
ExcludeClip	.\gdiplus\gdiplusgraphics.h	/^	Status ExcludeClip(const Region *region)$/;"	f	class:Graphics
ExecMethod	.\wmiatlprov.h	/^    HRESULT WINAPI ExecMethod(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext *pCtx,IWbemClassObject *pInParams,IWbemClassObject **ppOutParams,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
ExecMethod	.\wmiatlprov.h	/^    virtual HRESULT WINAPI ExecMethod(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext *pCtx,IWbemClassObject *pInParams,IWbemClassObject **ppOutParams,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
ExecMethodAsync	.\wmiatlprov.h	/^    HRESULT WINAPI ExecMethodAsync(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext *pCtx,IWbemClassObject *pInParams,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
ExecMethodAsync	.\wmiatlprov.h	/^    virtual HRESULT WINAPI ExecMethodAsync(const BSTR strObjectPath,const BSTR strMethodName,__LONG32 lFlags,IWbemContext *pCtx,IWbemClassObject *pInParams,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
ExecNotificationQuery	.\wmiatlprov.h	/^    HRESULT WINAPI ExecNotificationQuery(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
ExecNotificationQuery	.\wmiatlprov.h	/^    virtual HRESULT WINAPI ExecNotificationQuery(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
ExecNotificationQueryAsync	.\wmiatlprov.h	/^    HRESULT WINAPI ExecNotificationQueryAsync(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
ExecNotificationQueryAsync	.\wmiatlprov.h	/^    virtual HRESULT WINAPI ExecNotificationQueryAsync(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
ExecQuery	.\wmiatlprov.h	/^    HRESULT WINAPI ExecQuery(const BSTR QueryLanguage,const BSTR Query,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
ExecQuery	.\wmiatlprov.h	/^    virtual HRESULT WINAPI ExecQuery(const BSTR strQueryLanguage,const BSTR strQuery,__LONG32 lFlags,IWbemContext *pCtx,IEnumWbemClassObject **ppEnum) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
ExitProcess	.\dbgeng.h	/^  STDMETHOD(ExitProcess)(THIS_ ULONG ExitCode) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
ExitThread	.\dbgeng.h	/^  STDMETHOD(ExitThread)(THIS_ ULONG ExitCode) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
F32vec1	.\fvec.h	/^  EXPLICIT F32vec1(double d) { vec = _mm_set_ss((float) d); }$/;"	f	class:F32vec1
F32vec1	.\fvec.h	/^  EXPLICIT F32vec1(float f) { vec = _mm_set_ss(f); }$/;"	f	class:F32vec1
F32vec1	.\fvec.h	/^  F32vec1() {}$/;"	f	class:F32vec1
F32vec1	.\fvec.h	/^  F32vec1(__m128 m) { vec = m; }$/;"	f	class:F32vec1
F32vec1	.\fvec.h	/^  F32vec1(int i) { vec = _mm_cvt_si2ss(vec,i);};$/;"	f	class:F32vec1
F32vec1ToInt	.\fvec.h	/^inline int F32vec1ToInt(const F32vec1 &a)$/;"	f
F32vec4	.\fvec.h	/^  EXPLICIT F32vec4(double d) { vec = _mm_set_ps1((float) d); }$/;"	f	class:F32vec4
F32vec4	.\fvec.h	/^  EXPLICIT F32vec4(float f) { vec = _mm_set_ps1(f); }$/;"	f	class:F32vec4
F32vec4	.\fvec.h	/^  F32vec4() {}$/;"	f	class:F32vec4
F32vec4	.\fvec.h	/^  F32vec4(__m128 m) { vec = m;}$/;"	f	class:F32vec4
F32vec4	.\fvec.h	/^  F32vec4(float f3,float f2,float f1,float f0) { vec= _mm_set_ps(f3,f2,f1,f0); }$/;"	f	class:F32vec4
F32vec4ToF64vec2	.\dvec.h	/^inline F64vec2 F32vec4ToF64vec2(const F32vec4 &a) { return _mm_cvtps_pd(a); }$/;"	f
F64vec2	.\dvec.h	/^  EXPLICIT F64vec2(double d) { vec = _mm_set1_pd(d); }$/;"	f	class:F64vec2
F64vec2	.\dvec.h	/^  F64vec2() {}$/;"	f	class:F64vec2
F64vec2	.\dvec.h	/^  F64vec2(__m128d m) { vec = m;}$/;"	f	class:F64vec2
F64vec2	.\dvec.h	/^  F64vec2(double d1,double d0) { vec= _mm_set_pd(d1,d0); }$/;"	f	class:F64vec2
F64vec2ToF32vec4	.\dvec.h	/^inline F32vec4 F64vec2ToF32vec4(const F64vec2 &a) { return _mm_cvtpd_ps(a); }$/;"	f
F64vec2ToInt	.\dvec.h	/^inline int F64vec2ToInt(const F64vec2 &a) { return _mm_cvttsd_si32(a); }$/;"	f
FLOATSAFE	.\ddk\fltsafe.h	/^  FLOATSAFE::FLOATSAFE(void) {$/;"	f	class:FLOATSAFE::FLOATSAFE
FREE_PORT_ALLOCATED_SENSE_BUFFER	.\ddk\classpnp.h	/^FREE_PORT_ALLOCATED_SENSE_BUFFER($/;"	f
FillClosedCurve	.\gdiplus\gdiplusgraphics.h	/^	Status FillClosedCurve(const Brush *brush,$/;"	f	class:Graphics
FillEllipse	.\gdiplus\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush, const Rect& rect)$/;"	f	class:Graphics
FillEllipse	.\gdiplus\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush, const RectF& rect)$/;"	f	class:Graphics
FillEllipse	.\gdiplus\gdiplusgraphics.h	/^	Status FillEllipse(const Brush *brush,$/;"	f	class:Graphics
FillPath	.\gdiplus\gdiplusgraphics.h	/^	Status FillPath(const Brush *brush, const GraphicsPath *path)$/;"	f	class:Graphics
FillPie	.\gdiplus\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, INT x, INT y, INT width, INT height,$/;"	f	class:Graphics
FillPie	.\gdiplus\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, const Rect& rect,$/;"	f	class:Graphics
FillPie	.\gdiplus\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush, const RectF& rect,$/;"	f	class:Graphics
FillPie	.\gdiplus\gdiplusgraphics.h	/^	Status FillPie(const Brush *brush,$/;"	f	class:Graphics
FillPolygon	.\gdiplus\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const Point *points, INT count)$/;"	f	class:Graphics
FillPolygon	.\gdiplus\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const Point *points, INT count,$/;"	f	class:Graphics
FillPolygon	.\gdiplus\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const PointF *points, INT count)$/;"	f	class:Graphics
FillPolygon	.\gdiplus\gdiplusgraphics.h	/^	Status FillPolygon(const Brush *brush, const PointF *points, INT count,$/;"	f	class:Graphics
FillRectangle	.\gdiplus\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush, const Rect& rect)$/;"	f	class:Graphics
FillRectangle	.\gdiplus\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush, const RectF& rect)$/;"	f	class:Graphics
FillRectangle	.\gdiplus\gdiplusgraphics.h	/^	Status FillRectangle(const Brush *brush,$/;"	f	class:Graphics
FillRectangles	.\gdiplus\gdiplusgraphics.h	/^	Status FillRectangles(const Brush *brush, const Rect *rects, INT count)$/;"	f	class:Graphics
FillRectangles	.\gdiplus\gdiplusgraphics.h	/^	Status FillRectangles(const Brush *brush, const RectF *rects, INT count)$/;"	f	class:Graphics
FillRegion	.\gdiplus\gdiplusgraphics.h	/^	Status FillRegion(const Brush *brush, const Region *region)$/;"	f	class:Graphics
FinalRelease	.\mspcoll.h	/^  void FinalRelease() {$/;"	f	class:CTapiBstrCollection
FinalRelease	.\mspcoll.h	/^  void FinalRelease() {$/;"	f	class:CTapiIfCollection
FinalRelease	.\mspenum.h	/^  void FinalRelease(void) {$/;"	f	class:CSafeComEnum
Find	.\dxtmpl.h	/^DXLISTPOS CDXList<TYPE,ARG_TYPE>::Find(ARG_TYPE searchValue,DXLISTPOS startAfter) const {$/;"	f	class:CDXList
Find	.\msputils.h	/^  int Find(T &t) const {$/;"	f	class:CMSPArray
FindFirstItem	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::FindFirstItem(ImageItemData *item)$/;"	f	class:Image
FindIndex	.\dxtmpl.h	/^DXLISTPOS CDXList<TYPE,ARG_TYPE>::FindIndex(int nIndex) const {$/;"	f	class:CDXList
FindNextItem	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::FindNextItem(ImageItemData *item)$/;"	f	class:Image
FireCreationEvent	.\wmiatlprov.h	/^    HRESULT WINAPI FireCreationEvent(IWbemClassObject *pNewInstance,IWbemObjectSink *pSink) {$/;"	f	class:ATL::CIntrinsicEventProviderHelper
FireDeletionEvent	.\wmiatlprov.h	/^    HRESULT WINAPI FireDeletionEvent(IWbemClassObject *pInstanceToDelete,IWbemObjectSink *pSink) {$/;"	f	class:ATL::CIntrinsicEventProviderHelper
FireModificationEvent	.\wmiatlprov.h	/^    HRESULT WINAPI FireModificationEvent(IWbemClassObject *pOldInstance,IWbemClassObject *pNewInstance,IWbemObjectSink *pSink) {$/;"	f	class:ATL::CIntrinsicEventProviderHelper
Flatten	.\gdiplus\gdipluspath.h	/^	Status Flatten(const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
FloatMax	.\d2d1helper.h	/^static inline FLOAT FloatMax() {$/;"	f	namespace:D2D1
Flush	.\gdiplus\gdiplusgraphics.h	/^	VOID Flush(FlushIntention intention = FlushIntentionFlush)$/;"	f	class:Graphics
Font	.\gdiplus\gdiplusheaders.h	/^	Font(GpFont *font, Status status):$/;"	f	class:Font
Font	.\gdiplus\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc):$/;"	f	class:Font
Font	.\gdiplus\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, HFONT hfont):$/;"	f	class:Font
Font	.\gdiplus\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, const LOGFONTA *logfont):$/;"	f	class:Font
Font	.\gdiplus\gdiplusimpl.h	/^__inline__ Font::Font(HDC hdc, const LOGFONTW *logfont):$/;"	f	class:Font
Font	.\gdiplus\gdiplusimpl.h	/^__inline__ Font::Font(const FontFamily *family,$/;"	f	class:Font
Font	.\gdiplus\gdiplusimpl.h	/^__inline__ Font::Font(const WCHAR *familyName, REAL emSize, INT style,$/;"	f	class:Font
FontCollection	.\gdiplus\gdiplusimpl.h	/^__inline__ FontCollection::FontCollection():$/;"	f	class:FontCollection
FontFamily	.\gdiplus\gdiplusheaders.h	/^	FontFamily(GpFontFamily *fontFamily, Status status):$/;"	f	class:FontFamily
FontFamily	.\gdiplus\gdiplusimpl.h	/^__inline__ FontFamily::FontFamily():$/;"	f	class:FontFamily
FontFamily	.\gdiplus\gdiplusimpl.h	/^__inline__ FontFamily::FontFamily(const WCHAR *name,$/;"	f	class:FontFamily
FreeArrays	.\gdiplus\gdiplusimpl.h	/^__inline__ VOID PathData::FreeArrays()$/;"	f	class:PathData
FreeAssoc	.\dxtmpl.h	/^void CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::FreeAssoc(CAssoc *pAssoc) {$/;"	f	class:CDXMap
FreeDataChain	.\dxtmpl.h	/^  void FreeDataChain() {$/;"	f	struct:CDXPlex
FreeExtra	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::FreeExtra() {$/;"	f	class:CDXArray
FreeIDListArray	.\shobjidl.h	/^  __forceinline void FreeIDListArray(PIDLIST_RELATIVE *ppidls, UINT cItems) {$/;"	f
FreeIDListArrayChild	.\shobjidl.h	/^  __forceinline void FreeIDListArrayChild(PITEMID_CHILD *ppidls, UINT cItems) {$/;"	f
FreeIDListArrayFull	.\shobjidl.h	/^  __forceinline void FreeIDListArrayFull(PIDLIST_ABSOLUTE *ppidls, UINT cItems) {$/;"	f
FreeKnownFolderDefinitionFields	.\shobjidl.h	/^  __forceinline void FreeKnownFolderDefinitionFields(KNOWNFOLDER_DEFINITION *pKFD) {$/;"	f
FreeNode	.\dxtmpl.h	/^void CDXList<TYPE,ARG_TYPE>::FreeNode(CNode *pNode) {$/;"	f	class:CDXList
FromBITMAPINFO	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromBITMAPINFO(const BITMAPINFO *gdiBitmapInfo,$/;"	f	class:Bitmap
FromDirectDrawSurface7	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromDirectDrawSurface7(IDirectDrawSurface7 *surface)$/;"	f	class:Bitmap
FromFile	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromFile(const WCHAR *filename,$/;"	f	class:Bitmap
FromFile	.\gdiplus\gdiplusimpl.h	/^__inline__ Image* Image::FromFile(const WCHAR *filename,$/;"	f	class:Image
FromHBITMAP	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromHBITMAP(HBITMAP hbm, HPALETTE hpal)$/;"	f	class:Bitmap
FromHDC	.\gdiplus\gdiplusgraphics.h	/^	static Graphics* FromHDC(HDC hdc)$/;"	f	class:Graphics
FromHDC	.\gdiplus\gdiplusgraphics.h	/^	static Graphics* FromHDC(HDC hdc, HANDLE hdevice)$/;"	f	class:Graphics
FromHICON	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromHICON(HICON icon)$/;"	f	class:Bitmap
FromHRGN	.\gdiplus\gdiplusimpl.h	/^__inline__ Region* Region::FromHRGN(HRGN hrgn)$/;"	f	class:Region
FromHWND	.\gdiplus\gdiplusgraphics.h	/^	static Graphics* FromHWND(HWND hwnd, BOOL icm = FALSE)$/;"	f	class:Graphics
FromImage	.\gdiplus\gdiplusgraphics.h	/^	static Graphics* FromImage(Image *image)$/;"	f	class:Graphics
FromResource	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromResource($/;"	f	class:Bitmap
FromStream	.\gdiplus\gdiplusimpl.h	/^__inline__ Bitmap* Bitmap::FromStream(IStream *stream,$/;"	f	class:Bitmap
FromStream	.\gdiplus\gdiplusimpl.h	/^__inline__ Image* Image::FromStream(IStream *stream,$/;"	f	class:Image
FsRtlSetupAdvancedHeader	.\ddk\ntifs.h	/^FsRtlSetupAdvancedHeader($/;"	f
GUID_	.\comdef.h	/^inline _GUID _com_error::GUID_() const throw() {$/;"	f	class:_com_error
GdiplusStartupInput	.\gdiplus\gdiplusinit.h	/^	GdiplusStartupInput(DebugEventProc debugEventCallback = NULL,$/;"	f	struct:GdiplusStartupInput
GdiplusStartupOutput	.\gdiplus\gdiplusinit.h	/^	GdiplusStartupOutput():$/;"	f	struct:GdiplusStartupOutput
GenericDefault	.\gdiplus\gdiplusstringformat.h	/^__inline__ const StringFormat* StringFormat::GenericDefault()$/;"	f	class:StringFormat
GenericMonospace	.\gdiplus\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericMonospace()$/;"	f	class:FontFamily
GenericSansSerif	.\gdiplus\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericSansSerif()$/;"	f	class:FontFamily
GenericSerif	.\gdiplus\gdiplusimpl.h	/^__inline__ const FontFamily* FontFamily::GenericSerif()$/;"	f	class:FontFamily
GenericTypographic	.\gdiplus\gdiplusstringformat.h	/^__inline__ const StringFormat* StringFormat::GenericTypographic()$/;"	f	class:StringFormat
Get	.\wrl\client.h	/^            InterfaceType *Get() const throw()  {$/;"	f	class:Microsoft::WRL::ComPtr
Get	.\wrl\wrappers\corewrappers.h	/^                HSTRING Get() const throw() {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
GetA	.\gdiplus\gdipluscolor.h	/^	BYTE GetA() const$/;"	f	struct:Color
GetActivationFactory	.\roapi.h	/^    template<class T> __inline HRESULT GetActivationFactory(HSTRING classid, T **factory) {$/;"	f	namespace:ABI::Windows
GetActivationFactory	.\roapi.h	/^    template<class T> __inline HRESULT GetActivationFactory(HSTRING classid, T **factory) {$/;"	f	namespace:Windows::Foundation
GetActivationFactory	.\wrl\client.h	/^            inline HRESULT GetActivationFactory(HSTRING classid, ::Microsoft::WRL::Details::ComPtrRef<T> factory) throw() {$/;"	f	namespace:ABI::Windows::Foundation
GetActivationFactory	.\wrl\client.h	/^        inline HRESULT GetActivationFactory(HSTRING classid, ::Microsoft::WRL::Details::ComPtrRef<T> factory) throw() {$/;"	f	namespace:Windows::Foundation
GetActiveObject	.\comip.h	/^  HRESULT GetActiveObject(LPCSTR clsidStringA) throw() {$/;"	f	class:_com_ptr_t
GetActiveObject	.\comip.h	/^  HRESULT GetActiveObject(LPCWSTR clsidString) throw() {$/;"	f	class:_com_ptr_t
GetActiveObject	.\comip.h	/^  HRESULT GetActiveObject(const CLSID &rclsid) throw() {$/;"	f	class:_com_ptr_t
GetAddress	.\comutil.h	/^inline BSTR *_bstr_t::GetAddress() {$/;"	f	class:_bstr_t
GetAddress	.\comutil.h	/^inline VARIANT *_variant_t::GetAddress() {$/;"	f	class:_variant_t
GetAddressOf	.\wrl\client.h	/^                typename ComPtrRefBase<T>::InterfaceType *const *GetAddressOf() const throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRef::ComPtrRefBase
GetAddressOf	.\wrl\client.h	/^            InterfaceType **GetAddressOf() throw() {$/;"	f	class:Microsoft::WRL::ComPtr
GetAddressOf	.\wrl\client.h	/^            InterfaceType *const *GetAddressOf() const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
GetAdjustedPalette	.\gdiplus\gdiplusimageattributes.h	/^	Status GetAdjustedPalette(ColorPalette *colorPalette,$/;"	f	class:ImageAttributes
GetAlignment	.\gdiplus\gdipluspen.h	/^	PenAlignment GetAlignment() const$/;"	f	class:Pen
GetAlignment	.\gdiplus\gdiplusstringformat.h	/^	StringAlignment GetAlignment() const$/;"	f	class:StringFormat
GetAllPropertyItems	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetAllPropertyItems(UINT totalBufferSize,$/;"	f	class:Image
GetAlpha	.\gdiplus\gdipluscolor.h	/^	BYTE GetAlpha() const$/;"	f	struct:Color
GetAssocAt	.\dxtmpl.h	/^CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::GetAssocAt(ARG_KEY key,UINT& nHash) const {$/;"	f	class:CDXMap
GetAt	.\dxtmpl.h	/^inline TYPE &CDXList<TYPE,ARG_TYPE>::GetAt(DXLISTPOS position) {$/;"	f	class:CDXList
GetAt	.\dxtmpl.h	/^inline TYPE CDXArray<TYPE,ARG_TYPE>::GetAt(int nIndex) const { _ASSERT((nIndex >= 0 && nIndex < m_nSize)); return m_pData[nIndex]; }$/;"	f	class:CDXArray
GetAt	.\dxtmpl.h	/^inline TYPE CDXList<TYPE,ARG_TYPE>::GetAt(DXLISTPOS position) const {$/;"	f	class:CDXList
GetB	.\gdiplus\gdipluscolor.h	/^	BYTE GetB() const$/;"	f	struct:Color
GetBSTR	.\comutil.h	/^inline BSTR &_bstr_t::GetBSTR() {$/;"	f	class:_bstr_t
GetBackgroundColor	.\gdiplus\gdiplusbrush.h	/^	Status GetBackgroundColor(Color *color) const$/;"	f	class:HatchBrush
GetBaseCap	.\gdiplus\gdiplusimpl.h	/^__inline__ LineCap CustomLineCap::GetBaseCap() const$/;"	f	class:CustomLineCap
GetBaseInset	.\gdiplus\gdiplusimpl.h	/^__inline__ REAL CustomLineCap::GetBaseInset() const$/;"	f	class:CustomLineCap
GetBlend	.\gdiplus\gdiplusbrush.h	/^	Status GetBlend(REAL *blendFactors, REAL *blendPositions,$/;"	f	class:LinearGradientBrush
GetBlend	.\gdiplus\gdipluspath.h	/^	Status GetBlend(REAL *blendFactors, REAL *blendPositions,$/;"	f	class:PathGradientBrush
GetBlendCount	.\gdiplus\gdiplusbrush.h	/^	INT GetBlendCount() const$/;"	f	class:LinearGradientBrush
GetBlendCount	.\gdiplus\gdipluspath.h	/^	INT GetBlendCount() const$/;"	f	class:PathGradientBrush
GetBlue	.\gdiplus\gdipluscolor.h	/^	BYTE GetBlue() const$/;"	f	struct:Color
GetBottom	.\gdiplus\gdiplustypes.h	/^	INT GetBottom() const {$/;"	f	struct:Rect
GetBottom	.\gdiplus\gdiplustypes.h	/^	REAL GetBottom() const {$/;"	f	struct:RectF
GetBounds	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetBounds(RectF *srcRect, Unit *srcUnit)$/;"	f	class:Image
GetBounds	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::GetBounds(Rect *rect, const Graphics *graphics) const$/;"	f	class:Region
GetBounds	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::GetBounds(RectF *rect, const Graphics *graphics) const$/;"	f	class:Region
GetBounds	.\gdiplus\gdiplusmetaheader.h	/^	void GetBounds(Rect *rect) const$/;"	f	struct:MetafileHeader
GetBounds	.\gdiplus\gdipluspath.h	/^	Status GetBounds(Rect *bounds, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetBounds	.\gdiplus\gdipluspath.h	/^	Status GetBounds(RectF *bounds, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
GetBounds	.\gdiplus\gdiplustypes.h	/^	VOID GetBounds(Rect *rect) const {$/;"	f	struct:Rect
GetBounds	.\gdiplus\gdiplustypes.h	/^	VOID GetBounds(RectF *rect) const {$/;"	f	struct:RectF
GetCellAscent	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetCellAscent(INT style) const$/;"	f	class:FontFamily
GetCellDescent	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetCellDescent(INT style) const$/;"	f	class:FontFamily
GetCenterColor	.\gdiplus\gdipluspath.h	/^	Status GetCenterColor(Color *color) const$/;"	f	class:PathGradientBrush
GetCenterPoint	.\gdiplus\gdipluspath.h	/^	Status GetCenterPoint(Point *point) const$/;"	f	class:PathGradientBrush
GetCenterPoint	.\gdiplus\gdipluspath.h	/^	Status GetCenterPoint(PointF *point) const$/;"	f	class:PathGradientBrush
GetClip	.\gdiplus\gdiplusgraphics.h	/^	Status GetClip(Region *region) const$/;"	f	class:Graphics
GetClipBounds	.\gdiplus\gdiplusgraphics.h	/^	Status GetClipBounds(Rect *rect) const$/;"	f	class:Graphics
GetClipBounds	.\gdiplus\gdiplusgraphics.h	/^	Status GetClipBounds(RectF *rect) const$/;"	f	class:Graphics
GetColor	.\gdiplus\gdiplusbrush.h	/^	Status GetColor(Color *color) const$/;"	f	class:SolidBrush
GetColor	.\gdiplus\gdipluspen.h	/^	Status GetColor(Color *color) const$/;"	f	class:Pen
GetCompositingMode	.\gdiplus\gdiplusgraphics.h	/^	CompositingMode GetCompositingMode() const$/;"	f	class:Graphics
GetCompositingQuality	.\gdiplus\gdiplusgraphics.h	/^	CompositingQuality GetCompositingQuality() const$/;"	f	class:Graphics
GetCompoundArray	.\gdiplus\gdipluspen.h	/^	Status GetCompoundArray(REAL *compoundArray, INT count) const$/;"	f	class:Pen
GetCompoundArrayCount	.\gdiplus\gdipluspen.h	/^	INT GetCompoundArrayCount() const$/;"	f	class:Pen
GetContractDelegateWindow	.\shobjidl.h	/^  __forceinline HWND GetContractDelegateWindow(HWND hwndSource) { return (HWND)GetPropW(hwndSource, PROP_CONTRACT_DELEGATE); }$/;"	f
GetCount	.\dxtmpl.h	/^inline int CDXList<TYPE,ARG_TYPE>::GetCount() const { return m_nCount; }$/;"	f	class:CDXList
GetCount	.\dxtmpl.h	/^inline int CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::GetCount() const { return m_nCount; }$/;"	f	class:CDXMap
GetCount	.\gdiplus\gdipluspath.h	/^	INT GetCount() const$/;"	f	class:GraphicsPathIterator
GetCurrentFiber	.\winnt.h	/^    FORCEINLINE PVOID GetCurrentFiber(VOID) { return (PVOID)(((PNT_TIB)NtCurrentTeb())->FiberData); }$/;"	f
GetCurrentFiber	.\winnt.h	/^    FORCEINLINE PVOID GetCurrentFiber(VOID) { return(PVOID)__readgsqword(FIELD_OFFSET(NT_TIB,FiberData)); }$/;"	f
GetCurrentFiber	.\winnt.h	/^  FORCEINLINE PVOID GetCurrentFiber(void)$/;"	f
GetCurrentImpersonationLevel	.\wmiatlprov.h	/^    HRESULT GetCurrentImpersonationLevel (DWORD & a_Level) {$/;"	f	class:ATL::CImpersonateClientHelper
GetCustomEndCap	.\gdiplus\gdipluspen.h	/^	Status GetCustomEndCap(CustomLineCap *customCap) const$/;"	f	class:Pen
GetCustomStartCap	.\gdiplus\gdipluspen.h	/^	Status GetCustomStartCap(CustomLineCap *customCap) const$/;"	f	class:Pen
GetDashCap	.\gdiplus\gdipluspen.h	/^	DashCap GetDashCap() const$/;"	f	class:Pen
GetDashOffset	.\gdiplus\gdipluspen.h	/^	REAL GetDashOffset() const$/;"	f	class:Pen
GetDashPattern	.\gdiplus\gdipluspen.h	/^	Status GetDashPattern(REAL *dashArray, INT count) const$/;"	f	class:Pen
GetDashPatternCount	.\gdiplus\gdipluspen.h	/^	INT GetDashPatternCount() const$/;"	f	class:Pen
GetDashStyle	.\gdiplus\gdipluspen.h	/^	DashStyle GetDashStyle() const$/;"	f	class:Pen
GetData	.\dxtmpl.h	/^inline TYPE *CDXArray<TYPE,ARG_TYPE>::GetData() { return (TYPE*)m_pData; }$/;"	f	class:CDXArray
GetData	.\dxtmpl.h	/^inline const TYPE *CDXArray<TYPE,ARG_TYPE>::GetData() const { return (const TYPE*)m_pData; }$/;"	f	class:CDXArray
GetData	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::GetData(BYTE *buffer, UINT bufferSize,$/;"	f	class:Region
GetData	.\msputils.h	/^  T *GetData() const { return m_aT; }$/;"	f	class:CMSPArray
GetDataSize	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Region::GetDataSize() const$/;"	f	class:Region
GetDigitSubstitutionLanguage	.\gdiplus\gdiplusstringformat.h	/^	LANGID GetDigitSubstitutionLanguage() const$/;"	f	class:StringFormat
GetDigitSubstitutionMethod	.\gdiplus\gdiplusstringformat.h	/^	StringDigitSubstitute GetDigitSubstitutionMethod() const$/;"	f	class:StringFormat
GetDownLevelRasterizationLimit	.\gdiplus\gdiplusmetafile.h	/^	UINT GetDownLevelRasterizationLimit() const$/;"	f	class:Metafile
GetDpiX	.\gdiplus\gdiplusgraphics.h	/^	REAL GetDpiX() const$/;"	f	class:Graphics
GetDpiX	.\gdiplus\gdiplusmetaheader.h	/^	REAL GetDpiX() const$/;"	f	struct:MetafileHeader
GetDpiY	.\gdiplus\gdiplusgraphics.h	/^	REAL GetDpiY() const$/;"	f	class:Graphics
GetDpiY	.\gdiplus\gdiplusmetaheader.h	/^	REAL GetDpiY() const$/;"	f	struct:MetafileHeader
GetElements	.\gdiplus\gdiplusmatrix.h	/^	Status GetElements(REAL *m) const$/;"	f	class:Matrix
GetEmHeight	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetEmHeight(INT style) const$/;"	f	class:FontFamily
GetEmfHeader	.\gdiplus\gdiplusmetaheader.h	/^	const ENHMETAHEADER3* GetEmfHeader() const$/;"	f	struct:MetafileHeader
GetEmfPlusFlags	.\gdiplus\gdiplusmetaheader.h	/^	UINT GetEmfPlusFlags() const$/;"	f	struct:MetafileHeader
GetEncoderParameterList	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetEncoderParameterList(const CLSID *clsidEncoder,$/;"	f	class:Image
GetEncoderParameterListSize	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetEncoderParameterListSize(const CLSID *clsidEncoder)$/;"	f	class:Image
GetEndCap	.\gdiplus\gdipluspen.h	/^	LineCap GetEndCap() const$/;"	f	class:Pen
GetError	.\parser.h	/^  DWORD GetError () { return m_dwError; }$/;"	f	class:CParseXML
GetEventProcessorIndex	.\evntcons.h	/^  FORCEINLINE ULONG GetEventProcessorIndex (PCEVENT_RECORD er) {$/;"	f
GetFamilies	.\gdiplus\gdiplusimpl.h	/^__inline__ Status FontCollection::GetFamilies(INT numSought,$/;"	f	class:FontCollection
GetFamily	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Font::GetFamily(FontFamily *family) const$/;"	f	class:Font
GetFamilyCount	.\gdiplus\gdiplusimpl.h	/^__inline__ INT FontCollection::GetFamilyCount() const$/;"	f	class:FontCollection
GetFamilyName	.\gdiplus\gdiplusimpl.h	/^__inline__ Status FontFamily::GetFamilyName(WCHAR name[LF_FACESIZE],$/;"	f	class:FontFamily
GetFiberData	.\winnt.h	/^    FORCEINLINE PVOID GetFiberData (VOID) { return *(PVOID *)GetCurrentFiber (); }$/;"	f
GetFiberData	.\winnt.h	/^    FORCEINLINE PVOID GetFiberData(VOID) {$/;"	f
GetFiberData	.\winnt.h	/^  FORCEINLINE PVOID GetFiberData(void)$/;"	f
GetFillMode	.\gdiplus\gdipluspath.h	/^	FillMode GetFillMode() const$/;"	f	class:GraphicsPath
GetFlags	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetFlags()$/;"	f	class:Image
GetFocusScales	.\gdiplus\gdipluspath.h	/^	Status GetFocusScales(REAL *xScale, REAL *yScale) const$/;"	f	class:PathGradientBrush
GetForegroundColor	.\gdiplus\gdiplusbrush.h	/^	Status GetForegroundColor(Color *color) const$/;"	f	class:HatchBrush
GetFormatFlags	.\gdiplus\gdiplusstringformat.h	/^	INT GetFormatFlags() const$/;"	f	class:StringFormat
GetFrameCount	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetFrameCount(const GUID *dimensionID)$/;"	f	class:Image
GetFrameDimensionsCount	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetFrameDimensionsCount()$/;"	f	class:Image
GetFrameDimensionsList	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetFrameDimensionsList(GUID *dimensionIDs, UINT count)$/;"	f	class:Image
GetFwMceLogProcessorNumber	.\ddk\mce.h	/^GetFwMceLogProcessorNumber($/;"	f
GetG	.\gdiplus\gdipluscolor.h	/^	BYTE GetG() const$/;"	f	struct:Color
GetGammaCorrection	.\gdiplus\gdiplusbrush.h	/^	BOOL GetGammaCorrection() const$/;"	f	class:LinearGradientBrush
GetGammaCorrection	.\gdiplus\gdipluspath.h	/^	BOOL GetGammaCorrection() const$/;"	f	class:PathGradientBrush
GetGreen	.\gdiplus\gdipluscolor.h	/^	BYTE GetGreen() const$/;"	f	struct:Color
GetHBITMAP	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHBITMAP($/;"	f	class:Bitmap
GetHDC	.\gdiplus\gdiplusgraphics.h	/^	HDC GetHDC()$/;"	f	class:Graphics
GetHENHMETAFILE	.\gdiplus\gdiplusmetafile.h	/^	HENHMETAFILE GetHENHMETAFILE()$/;"	f	class:Metafile
GetHICON	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHICON(HICON *icon) const$/;"	f	class:Bitmap
GetHRGN	.\gdiplus\gdiplusimpl.h	/^__inline__ HRGN Region::GetHRGN(const Graphics *graphics) const$/;"	f	class:Region
GetHalftonePalette	.\gdiplus\gdiplusgraphics.h	/^	static HPALETTE GetHalftonePalette()$/;"	f	class:Graphics
GetHashTableSize	.\dxtmpl.h	/^inline UINT CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::GetHashTableSize() const { return m_nHashTableSize; }$/;"	f	class:CDXMap
GetHatchStyle	.\gdiplus\gdiplusbrush.h	/^	HatchStyle GetHatchStyle() const$/;"	f	class:HatchBrush
GetHead	.\dxtmpl.h	/^inline TYPE &CDXList<TYPE,ARG_TYPE>::GetHead() { _ASSERT(m_pNodeHead!=NULL); return m_pNodeHead->data; }$/;"	f	class:CDXList
GetHead	.\dxtmpl.h	/^inline TYPE CDXList<TYPE,ARG_TYPE>::GetHead() const { _ASSERT(m_pNodeHead!=NULL); return m_pNodeHead->data; }$/;"	f	class:CDXList
GetHeadPosition	.\dxtmpl.h	/^inline DXLISTPOS CDXList<TYPE,ARG_TYPE>::GetHeadPosition() const { return (DXLISTPOS) m_pNodeHead; }$/;"	f	class:CDXList
GetHeight	.\gdiplus\gdiplusimpl.h	/^__inline__ REAL Font::GetHeight(REAL dpi) const$/;"	f	class:Font
GetHeight	.\gdiplus\gdiplusimpl.h	/^__inline__ REAL Font::GetHeight(const Graphics *graphics) const$/;"	f	class:Font
GetHeight	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetHeight()$/;"	f	class:Image
GetHeight	.\gdiplus\gdipluslinecaps.h	/^	REAL GetHeight() const$/;"	f	class:AdjustableArrowCap
GetHistogram	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHistogram(HistogramFormat format,$/;"	f	class:Bitmap
GetHistogramSize	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::GetHistogramSize(HistogramFormat format,$/;"	f	class:Bitmap
GetHorizontalResolution	.\gdiplus\gdiplusimpl.h	/^__inline__ REAL Image::GetHorizontalResolution()$/;"	f	class:Image
GetHotkeyPrefix	.\gdiplus\gdiplusstringformat.h	/^	HotkeyPrefix GetHotkeyPrefix() const$/;"	f	class:StringFormat
GetIID	.\comip.h	/^  static const IID& GetIID() throw() { return *_IID; }$/;"	f	class:_com_IIID
GetIID	.\comip.h	/^  static const IID& GetIID() throw() { return ThisIIID::GetIID(); }$/;"	f	class:_com_ptr_t
GetIID	.\comip.h	/^  static const IID& GetIID() throw() { return iid_getter(); }$/;"	f	class:_com_IIID_getter
GetImageDecoders	.\gdiplus\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageDecoders(UINT numDecoders, UINT size,$/;"	f
GetImageDecodersSize	.\gdiplus\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageDecodersSize(UINT *numDecoders, UINT *size)$/;"	f
GetImageEncoders	.\gdiplus\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageEncoders(UINT numEncoders, UINT size,$/;"	f
GetImageEncodersSize	.\gdiplus\gdiplusimagecodec.h	/^static __inline__ GpStatus GetImageEncodersSize(UINT *numEncoders, UINT *size)$/;"	f
GetInterface	.\comip.h	/^  static _Interface& GetInterface() throw() { return *GetInterfacePtr(); }$/;"	f	class:_com_IIID
GetInterface	.\comip.h	/^  static _Interface& GetInterface() throw() { return *GetInterfacePtr(); }$/;"	f	class:_com_IIID_getter
GetInterfacePtr	.\comip.h	/^  Interface *GetInterfacePtr() const throw() { return m_pInterface; }$/;"	f	class:_com_ptr_t
GetInterfacePtr	.\comip.h	/^  Interface*& GetInterfacePtr() throw() { return m_pInterface; }$/;"	f	class:_com_ptr_t
GetInterfacePtr	.\comip.h	/^  static _Interface *GetInterfacePtr() throw() { return NULL; }$/;"	f	class:_com_IIID
GetInterfacePtr	.\comip.h	/^  static _Interface *GetInterfacePtr() throw() { return NULL; }$/;"	f	class:_com_IIID_getter
GetInterfaceSafetyOptions	.\msputils.h	/^  STDMETHOD(GetInterfaceSafetyOptions)(REFIID riid,DWORD *pdwSupportedOptions,DWORD *pdwEnabledOptions) {$/;"	f	class:CMSPObjectSafetyImpl
GetInterpolationColorCount	.\gdiplus\gdiplusbrush.h	/^	INT GetInterpolationColorCount() const$/;"	f	class:LinearGradientBrush
GetInterpolationColorCount	.\gdiplus\gdipluspath.h	/^	INT GetInterpolationColorCount() const$/;"	f	class:PathGradientBrush
GetInterpolationColors	.\gdiplus\gdiplusbrush.h	/^	Status GetInterpolationColors(Color *presetColors,$/;"	f	class:LinearGradientBrush
GetInterpolationColors	.\gdiplus\gdipluspath.h	/^	Status GetInterpolationColors(Color *presetColors,$/;"	f	class:PathGradientBrush
GetInterpolationMode	.\gdiplus\gdiplusgraphics.h	/^	InterpolationMode GetInterpolationMode() const$/;"	f	class:Graphics
GetItemData	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetItemData(ImageItemData *item)$/;"	f	class:Image
GetLastPoint	.\gdiplus\gdipluspath.h	/^	Status GetLastPoint(PointF *lastPoint) const$/;"	f	class:GraphicsPath
GetLastStatus	.\gdiplus\gdiplusbrush.h	/^	Status GetLastStatus() const$/;"	f	class:Brush
GetLastStatus	.\gdiplus\gdiplusgraphics.h	/^	Status GetLastStatus() const$/;"	f	class:Graphics
GetLastStatus	.\gdiplus\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:CachedBitmap
GetLastStatus	.\gdiplus\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:CustomLineCap
GetLastStatus	.\gdiplus\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Font
GetLastStatus	.\gdiplus\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:FontCollection
GetLastStatus	.\gdiplus\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:FontFamily
GetLastStatus	.\gdiplus\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Image
GetLastStatus	.\gdiplus\gdiplusheaders.h	/^	Status GetLastStatus() const$/;"	f	class:Region
GetLastStatus	.\gdiplus\gdiplusimageattributes.h	/^	Status GetLastStatus() const$/;"	f	class:ImageAttributes
GetLastStatus	.\gdiplus\gdiplusmatrix.h	/^	Status GetLastStatus() const$/;"	f	class:Matrix
GetLastStatus	.\gdiplus\gdipluspath.h	/^	Status GetLastStatus() const$/;"	f	class:GraphicsPath
GetLastStatus	.\gdiplus\gdipluspath.h	/^	Status GetLastStatus() const$/;"	f	class:GraphicsPathIterator
GetLastStatus	.\gdiplus\gdipluspen.h	/^	Status GetLastStatus() const$/;"	f	class:Pen
GetLastStatus	.\gdiplus\gdiplusstringformat.h	/^	Status GetLastStatus() const$/;"	f	class:StringFormat
GetLeft	.\gdiplus\gdiplustypes.h	/^	INT GetLeft() const {$/;"	f	struct:Rect
GetLeft	.\gdiplus\gdiplustypes.h	/^	REAL GetLeft() const {$/;"	f	struct:RectF
GetLineAlignment	.\gdiplus\gdiplusstringformat.h	/^	StringAlignment GetLineAlignment() const$/;"	f	class:StringFormat
GetLineJoin	.\gdiplus\gdipluspen.h	/^	LineJoin GetLineJoin() const$/;"	f	class:Pen
GetLineSpacing	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT16 FontFamily::GetLineSpacing(INT style) const$/;"	f	class:FontFamily
GetLinearColors	.\gdiplus\gdiplusbrush.h	/^	Status GetLinearColors(Color *colors) const$/;"	f	class:LinearGradientBrush
GetLocation	.\gdiplus\gdiplustypes.h	/^	VOID GetLocation(Point *point) const {$/;"	f	struct:Rect
GetLocation	.\gdiplus\gdiplustypes.h	/^	VOID GetLocation(PointF *point) const {$/;"	f	struct:RectF
GetLogFontA	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Font::GetLogFontA(const Graphics *graphics, LOGFONTA *logfontA)$/;"	f	class:Font
GetLogFontW	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Font::GetLogFontW(const Graphics *graphics, LOGFONTW *logfontW)$/;"	f	class:Font
GetMeasurableCharacterRangeCount	.\gdiplus\gdiplusstringformat.h	/^	INT GetMeasurableCharacterRangeCount() const$/;"	f	class:StringFormat
GetMetafileHeader	.\gdiplus\gdiplusmetafile.h	/^	Status GetMetafileHeader(MetafileHeader *header) const$/;"	f	class:Metafile
GetMetafileHeader	.\gdiplus\gdiplusmetafile.h	/^	static Status GetMetafileHeader(HENHMETAFILE hEmf,$/;"	f	class:Metafile
GetMetafileHeader	.\gdiplus\gdiplusmetafile.h	/^	static Status GetMetafileHeader(IStream *stream, MetafileHeader *header)$/;"	f	class:Metafile
GetMetafileHeader	.\gdiplus\gdiplusmetafile.h	/^	static Status GetMetafileHeader(const WCHAR *filename,$/;"	f	class:Metafile
GetMetafileSize	.\gdiplus\gdiplusmetaheader.h	/^	UINT GetMetafileSize() const$/;"	f	struct:MetafileHeader
GetMiddleInset	.\gdiplus\gdipluslinecaps.h	/^	REAL GetMiddleInset() const$/;"	f	class:AdjustableArrowCap
GetMiterLimit	.\gdiplus\gdipluspen.h	/^	REAL GetMiterLimit() const$/;"	f	class:Pen
GetNearestColor	.\gdiplus\gdiplusgraphics.h	/^	Status GetNearestColor(Color *color) const$/;"	f	class:Graphics
GetNext	.\dxtmpl.h	/^inline TYPE &CDXList<TYPE,ARG_TYPE>::GetNext(DXLISTPOS &rPosition) {$/;"	f	class:CDXList
GetNext	.\dxtmpl.h	/^inline TYPE CDXList<TYPE,ARG_TYPE>::GetNext(DXLISTPOS &rPosition) const {$/;"	f	class:CDXList
GetNextAssoc	.\dxtmpl.h	/^void CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::GetNextAssoc(DXLISTPOS &rNextPosition,KEY& rKey,VALUE& rValue) const {$/;"	f	class:CDXMap
GetObject	.\wmiatlprov.h	/^    HRESULT WINAPI GetObject(const BSTR ObjectPath,__LONG32 lFlags,IWbemContext *pCtx,IWbemClassObject **ppObject,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
GetObject	.\wmiatlprov.h	/^    virtual HRESULT WINAPI GetObject(const BSTR strObjectPath,__LONG32 lFlags,IWbemContext *pCtx,IWbemClassObject **ppObject,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
GetOuterUnknown	.\ddk\stdunk.h	/^        PUNKNOWN GetOuterUnknown()$/;"	f	class:CUnknown
GetPageScale	.\gdiplus\gdiplusgraphics.h	/^	REAL GetPageScale() const$/;"	f	class:Graphics
GetPageUnit	.\gdiplus\gdiplusgraphics.h	/^	Unit GetPageUnit() const$/;"	f	class:Graphics
GetPalette	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetPalette(ColorPalette *palette, INT size)$/;"	f	class:Image
GetPaletteSize	.\gdiplus\gdiplusimpl.h	/^__inline__ INT Image::GetPaletteSize()$/;"	f	class:Image
GetPathData	.\gdiplus\gdipluspath.h	/^	Status GetPathData(PathData *pathData) const$/;"	f	class:GraphicsPath
GetPathPoints	.\gdiplus\gdipluspath.h	/^	Status GetPathPoints(Point *points, INT count) const$/;"	f	class:GraphicsPath
GetPathPoints	.\gdiplus\gdipluspath.h	/^	Status GetPathPoints(PointF *points, INT count) const$/;"	f	class:GraphicsPath
GetPathTypes	.\gdiplus\gdipluspath.h	/^	Status GetPathTypes(BYTE *types, INT count) const$/;"	f	class:GraphicsPath
GetPenType	.\gdiplus\gdipluspen.h	/^	PenType GetPenType() const$/;"	f	class:Pen
GetPhysicalDimension	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetPhysicalDimension(SizeF *size)$/;"	f	class:Image
GetPixel	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::GetPixel(INT x, INT y, Color *color) const$/;"	f	class:Bitmap
GetPixelFormat	.\gdiplus\gdiplusimpl.h	/^__inline__ PixelFormat Image::GetPixelFormat()$/;"	f	class:Image
GetPixelFormatSize	.\gdiplus\gdipluspixelformats.h	/^static __inline__ UINT GetPixelFormatSize(PixelFormat pixfmt)$/;"	f
GetPixelOffsetMode	.\gdiplus\gdiplusgraphics.h	/^	PixelOffsetMode GetPixelOffsetMode() const$/;"	f	class:Graphics
GetPointCount	.\gdiplus\gdipluspath.h	/^	INT GetPointCount() const$/;"	f	class:GraphicsPath
GetPointCount	.\gdiplus\gdipluspath.h	/^	INT GetPointCount() const$/;"	f	class:PathGradientBrush
GetPrev	.\dxtmpl.h	/^inline TYPE &CDXList<TYPE,ARG_TYPE>::GetPrev(DXLISTPOS &rPosition) {$/;"	f	class:CDXList
GetPrev	.\dxtmpl.h	/^inline TYPE CDXList<TYPE,ARG_TYPE>::GetPrev(DXLISTPOS &rPosition) const {$/;"	f	class:CDXList
GetPropertyCount	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetPropertyCount()$/;"	f	class:Image
GetPropertyIdList	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetPropertyIdList(UINT numOfProperty, PROPID *list)$/;"	f	class:Image
GetPropertyInstanceData	.\netmon.h	/^  INLINE LPVOID GetPropertyInstanceData(LPPROPERTYINST PropertyInst) {$/;"	f
GetPropertyInstanceExDataLength	.\netmon.h	/^  INLINE DWORD GetPropertyInstanceExDataLength(LPPROPERTYINST PropertyInst) {$/;"	f
GetPropertyInstanceFrameDataLength	.\netmon.h	/^  INLINE DWORD GetPropertyInstanceFrameDataLength(LPPROPERTYINST PropertyInst) {$/;"	f
GetPropertyItem	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetPropertyItem(PROPID propId, UINT propSize,$/;"	f	class:Image
GetPropertyItemSize	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetPropertyItemSize(PROPID propId)$/;"	f	class:Image
GetPropertySize	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetPropertySize($/;"	f	class:Image
GetProviderMgmtInterface	.\vsbackup.h	/^HRESULT WINAPI GetProviderMgmtInterface($/;"	f
GetR	.\gdiplus\gdipluscolor.h	/^	BYTE GetR() const$/;"	f	struct:Color
GetRawBuffer	.\wrl\wrappers\corewrappers.h	/^                const wchar_t *GetRawBuffer(unsigned int *len) const {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
GetRawFormat	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::GetRawFormat(GUID *format)$/;"	f	class:Image
GetRectangle	.\gdiplus\gdiplusbrush.h	/^	Status GetRectangle(Rect *rect) const$/;"	f	class:LinearGradientBrush
GetRectangle	.\gdiplus\gdiplusbrush.h	/^	Status GetRectangle(RectF *rect) const$/;"	f	class:LinearGradientBrush
GetRectangle	.\gdiplus\gdipluspath.h	/^	Status GetRectangle(Rect *rect) const$/;"	f	class:PathGradientBrush
GetRectangle	.\gdiplus\gdipluspath.h	/^	Status GetRectangle(RectF *rect) const$/;"	f	class:PathGradientBrush
GetRed	.\gdiplus\gdipluscolor.h	/^	BYTE GetRed() const$/;"	f	struct:Color
GetRegionScans	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::GetRegionScans(const Matrix *matrix,$/;"	f	class:Region
GetRegionScansCount	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Region::GetRegionScansCount(const Matrix *matrix) const$/;"	f	class:Region
GetRenderingOrigin	.\gdiplus\gdiplusgraphics.h	/^	Status GetRenderingOrigin(INT *x, INT *y) const$/;"	f	class:Graphics
GetRight	.\gdiplus\gdiplustypes.h	/^	INT GetRight() const {$/;"	f	struct:Rect
GetRight	.\gdiplus\gdiplustypes.h	/^	REAL GetRight() const {$/;"	f	struct:RectF
GetSize	.\dxtmpl.h	/^inline int CDXArray<TYPE,ARG_TYPE>::GetSize() const { return m_nSize; }$/;"	f	class:CDXArray
GetSize	.\gdiplus\gdiplusimpl.h	/^__inline__ REAL Font::GetSize() const$/;"	f	class:Font
GetSize	.\gdiplus\gdiplustypes.h	/^	VOID GetSize(Size *size) const {$/;"	f	struct:Rect
GetSize	.\gdiplus\gdiplustypes.h	/^	VOID GetSize(SizeF *size) const {$/;"	f	struct:RectF
GetSize	.\msputils.h	/^  int GetSize() const { return m_nSize; }$/;"	f	class:CMSPArray
GetSmoothingMode	.\gdiplus\gdiplusgraphics.h	/^	SmoothingMode GetSmoothingMode() const$/;"	f	class:Graphics
GetStartCap	.\gdiplus\gdipluspen.h	/^	LineCap GetStartCap() const$/;"	f	class:Pen
GetStartPosition	.\dxtmpl.h	/^inline DXLISTPOS CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::GetStartPosition() const { return (m_nCount==0) ? NULL : DX_BEFORE_START_POSITION; }$/;"	f	class:CDXMap
GetState	.\mspstrm.h	/^  virtual HRESULT GetState(DWORD *pdwStatus) { return E_NOTIMPL; }$/;"	f	class:CMSPStream
GetString	.\comutil.h	/^inline const char *_bstr_t::Data_t::GetString() const {$/;"	f	class:_bstr_t::Data_t
GetStrokeCaps	.\gdiplus\gdiplusimpl.h	/^__inline__ Status CustomLineCap::GetStrokeCaps(LineCap *startCap,$/;"	f	class:CustomLineCap
GetStrokeJoin	.\gdiplus\gdiplusimpl.h	/^__inline__ LineJoin CustomLineCap::GetStrokeJoin() const$/;"	f	class:CustomLineCap
GetStyle	.\gdiplus\gdiplusimpl.h	/^__inline__ INT Font::GetStyle() const$/;"	f	class:Font
GetSubpathCount	.\gdiplus\gdipluspath.h	/^	INT GetSubpathCount() const$/;"	f	class:GraphicsPathIterator
GetSupportedMediaTypes	.\msptrmac.h	/^  virtual DWORD GetSupportedMediaTypes(void) { return (DWORD) TAPIMEDIATYPE_AUDIO; }$/;"	f	class:CAudioCaptureTerminal
GetSupportedMediaTypes	.\msptrmar.h	/^  virtual DWORD GetSupportedMediaTypes(void) { return (DWORD) TAPIMEDIATYPE_AUDIO; }$/;"	f	class:CAudioRenderTerminal
GetSupportedMediaTypes	.\msptrmvc.h	/^  virtual DWORD GetSupportedMediaTypes(void) { return (DWORD) TAPIMEDIATYPE_VIDEO; }$/;"	f	class:CVideoCaptureTerminal
GetSurroundColorCount	.\gdiplus\gdipluspath.h	/^	INT GetSurroundColorCount() const$/;"	f	class:PathGradientBrush
GetSurroundColors	.\gdiplus\gdipluspath.h	/^	Status GetSurroundColors(Color *colors, INT *count)$/;"	f	class:PathGradientBrush
GetTabStopCount	.\gdiplus\gdiplusstringformat.h	/^	INT GetTabStopCount() const$/;"	f	class:StringFormat
GetTabStops	.\gdiplus\gdiplusstringformat.h	/^	Status GetTabStops(INT count, REAL *firstTabOffset, REAL *tabStops)$/;"	f	class:StringFormat
GetTail	.\dxtmpl.h	/^inline TYPE &CDXList<TYPE,ARG_TYPE>::GetTail() { _ASSERT(m_pNodeTail!=NULL); return m_pNodeTail->data; }$/;"	f	class:CDXList
GetTail	.\dxtmpl.h	/^inline TYPE CDXList<TYPE,ARG_TYPE>::GetTail() const { _ASSERT(m_pNodeTail!=NULL); return m_pNodeTail->data; }$/;"	f	class:CDXList
GetTailPosition	.\dxtmpl.h	/^inline DXLISTPOS CDXList<TYPE,ARG_TYPE>::GetTailPosition() const { return (DXLISTPOS) m_pNodeTail; }$/;"	f	class:CDXList
GetTextContrast	.\gdiplus\gdiplusgraphics.h	/^	UINT GetTextContrast() const$/;"	f	class:Graphics
GetTextRenderingHint	.\gdiplus\gdiplusgraphics.h	/^	TextRenderingHint GetTextRenderingHint() const$/;"	f	class:Graphics
GetThumbnailImage	.\gdiplus\gdiplusimpl.h	/^__inline__ Image* Image::GetThumbnailImage(UINT thumbWidth, UINT thumbHeight,$/;"	f	class:Image
GetTop	.\gdiplus\gdiplustypes.h	/^	INT GetTop() const {$/;"	f	struct:Rect
GetTop	.\gdiplus\gdiplustypes.h	/^	REAL GetTop() const {$/;"	f	struct:RectF
GetTransform	.\gdiplus\gdiplusbrush.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:LinearGradientBrush
GetTransform	.\gdiplus\gdiplusgraphics.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:Graphics
GetTransform	.\gdiplus\gdipluspath.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:PathGradientBrush
GetTransform	.\gdiplus\gdipluspen.h	/^	Status GetTransform(Matrix *matrix) const$/;"	f	class:Pen
GetTransfrom	.\gdiplus\gdiplusbrush.h	/^	Status GetTransfrom(Matrix *matrix) const$/;"	f	class:TextureBrush
GetTrimming	.\gdiplus\gdiplusstringformat.h	/^	StringTrimming GetTrimming() const$/;"	f	class:StringFormat
GetType	.\d2d1effecthelpers.h	/^T GetType(T t) {$/;"	f
GetType	.\gdiplus\gdiplusbrush.h	/^	BrushType GetType() const$/;"	f	class:Brush
GetType	.\gdiplus\gdiplusimpl.h	/^__inline__ ImageType Image::GetType() const$/;"	f	class:Image
GetType	.\gdiplus\gdiplusmetaheader.h	/^	MetafileType GetType() const$/;"	f	struct:MetafileHeader
GetUnit	.\gdiplus\gdiplusimpl.h	/^__inline__ Unit Font::GetUnit() const$/;"	f	class:Font
GetUpperBound	.\dxtmpl.h	/^inline int CDXArray<TYPE,ARG_TYPE>::GetUpperBound() const { return m_nSize-1; }$/;"	f	class:CDXArray
GetVARIANT	.\comutil.h	/^inline VARIANT &_variant_t::GetVARIANT() throw()$/;"	f	class:_variant_t
GetValue	.\gdiplus\gdipluscolor.h	/^	ARGB GetValue() const$/;"	f	struct:Color
GetVersion	.\gdiplus\gdiplusmetaheader.h	/^	UINT GetVersion() const$/;"	f	struct:MetafileHeader
GetVerticalResolution	.\gdiplus\gdiplusimpl.h	/^__inline__ REAL Image::GetVerticalResolution()$/;"	f	class:Image
GetVisibleClipBounds	.\gdiplus\gdiplusgraphics.h	/^	Status GetVisibleClipBounds(Rect *rect) const$/;"	f	class:Graphics
GetVisibleClipBounds	.\gdiplus\gdiplusgraphics.h	/^	Status GetVisibleClipBounds(RectF *rect) const$/;"	f	class:Graphics
GetWString	.\comutil.h	/^inline const wchar_t *_bstr_t::Data_t::GetWString() const throw() { return m_wstr; }$/;"	f	class:_bstr_t::Data_t
GetWString	.\comutil.h	/^inline wchar_t *&_bstr_t::Data_t::GetWString() throw() { return m_wstr; }$/;"	f	class:_bstr_t::Data_t
GetWidth	.\gdiplus\gdiplusimpl.h	/^__inline__ UINT Image::GetWidth()$/;"	f	class:Image
GetWidth	.\gdiplus\gdipluslinecaps.h	/^	REAL GetWidth() const$/;"	f	class:AdjustableArrowCap
GetWidth	.\gdiplus\gdipluspen.h	/^	REAL GetWidth() const$/;"	f	class:Pen
GetWidthScale	.\gdiplus\gdiplusimpl.h	/^__inline__ REAL CustomLineCap::GetWidthScale() const$/;"	f	class:CustomLineCap
GetWmfHeader	.\gdiplus\gdiplusmetaheader.h	/^	const METAHEADER* GetWmfHeader() const$/;"	f	struct:MetafileHeader
GetWrapMode	.\gdiplus\gdiplusbrush.h	/^	WrapMode GetWrapMode() const$/;"	f	class:LinearGradientBrush
GetWrapMode	.\gdiplus\gdiplusbrush.h	/^	WrapMode GetWrapMode() const$/;"	f	class:TextureBrush
GetWrapMode	.\gdiplus\gdipluspath.h	/^	WrapMode GetWrapMode() const$/;"	f	class:PathGradientBrush
GradientStop	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_GRADIENT_STOP GradientStop(FLOAT position, const D2D1_COLOR_F &color) {$/;"	f	namespace:D2D1
Graphics	.\gdiplus\gdiplusgraphics.h	/^	Graphics(HDC hdc): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	.\gdiplus\gdiplusgraphics.h	/^	Graphics(HDC hdc, HANDLE hdevice): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
Graphics	.\gdiplus\gdiplusgraphics.h	/^	Graphics(HWND hwnd, BOOL icm = FALSE):$/;"	f	class:Graphics
Graphics	.\gdiplus\gdiplusgraphics.h	/^	Graphics(Image *image): nativeGraphics(NULL), lastStatus(Ok)$/;"	f	class:Graphics
GraphicsPath	.\gdiplus\gdipluspath.h	/^	GraphicsPath(FillMode fillMode = FillModeAlternate):$/;"	f	class:GraphicsPath
GraphicsPath	.\gdiplus\gdipluspath.h	/^	GraphicsPath(GpPath *path, Status status):$/;"	f	class:GraphicsPath
GraphicsPath	.\gdiplus\gdipluspath.h	/^	GraphicsPath(const Point *points, const BYTE *types, INT count,$/;"	f	class:GraphicsPath
GraphicsPath	.\gdiplus\gdipluspath.h	/^	GraphicsPath(const PointF *points, const BYTE *types, INT count,$/;"	f	class:GraphicsPath
GraphicsPathIterator	.\gdiplus\gdipluspath.h	/^	GraphicsPathIterator(GpPathIterator *pathIterator, Status status):$/;"	f	class:GraphicsPathIterator
GraphicsPathIterator	.\gdiplus\gdipluspath.h	/^	GraphicsPathIterator(GraphicsPath *path):$/;"	f	class:GraphicsPathIterator
Grow	.\msputils.h	/^  WINBOOL Grow() {$/;"	f	class:CMSPArray
HEAP_MAKE_TAG_FLAGS	.\ddk\ntifs.h	/^HEAP_MAKE_TAG_FLAGS($/;"	f
HRESULTToWCode	.\comdef.h	/^inline WORD _com_error::HRESULTToWCode(HRESULT hr) throw() { return (hr >= WCODE_HRESULT_FIRST && hr <= WCODE_HRESULT_LAST) ? WORD(hr - WCODE_HRESULT_FIRST) : 0; }$/;"	f	class:_com_error
HRESULT_FROM_WIN32	.\winerror.h	/^__CRT_INLINE HRESULT HRESULT_FROM_WIN32(__LONG32 x) { return x <= 0 ? (HRESULT)x : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}$/;"	f
HRESULT_TO_NMERR	.\netmon.h	/^  INLINE DWORD HRESULT_TO_NMERR(HRESULT hResult) { return HRESULT_CODE(hResult); }$/;"	f
HStringReference	.\wrl\wrappers\corewrappers.h	/^                 explicit HStringReference(wchar_t const (&str)[sizeDest]) throw() : hstr_(nullptr) {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
HStringReference	.\wrl\wrappers\corewrappers.h	/^                HStringReference() : hstr_(nullptr) {}$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
HStringReference	.\wrl\wrappers\corewrappers.h	/^                HStringReference(const HStringReference &other) throw() : hstr_(nullptr) {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
HStringReference	.\wrl\wrappers\corewrappers.h	/^                HStringReference(const wchar_t* str, unsigned int len) throw() : hstr_(nullptr) {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
HStringReference	.\wrl\wrappers\corewrappers.h	/^                explicit HStringReference(const T &strRef) throw() : hstr_(nullptr) {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
HStringReference	.\wrl\wrappers\corewrappers.h	/^                explicit HStringReference(wchar_t (&strRef)[sizeDest]) throw() {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
HalAllocateCommonBuffer	.\ddk\wdm.h	/^HalAllocateCommonBuffer($/;"	f
HalFreeCommonBuffer	.\ddk\wdm.h	/^HalFreeCommonBuffer($/;"	f
HalGetDmaAlignment	.\ddk\wdm.h	/^HalGetDmaAlignment($/;"	f
HalReadDmaCounter	.\ddk\wdm.h	/^HalReadDmaCounter($/;"	f
Handle32ToHandle	.\basetsd.h	/^  static __inline void *Handle32ToHandle (const void *POINTER_32 h) { return ((void *) (LONG_PTR) (__LONG32) (ULONG_PTR) h); }$/;"	f
Handle64ToHandle	.\basetsd.h	/^  static __inline void *Handle64ToHandle (const void *POINTER_64 h) { return ((void *) (ULONG_PTR) h); }$/;"	f
HandleToHandle64	.\basetsd.h	/^  static __inline void *POINTER_64 HandleToHandle64 (const void *h) { return ((void *POINTER_64) (LONG_PTR) h); }$/;"	f
HandleToLong	.\basetsd.h	/^  static __inline __LONG32 HandleToLong (const void *h) { return ((__LONG32) (LONG_PTR) h); }$/;"	f
HandleToULong	.\basetsd.h	/^  static __inline unsigned __LONG32 HandleToULong (const void *h) { return ((unsigned __LONG32) (ULONG_PTR) h); }$/;"	f
HasCurve	.\gdiplus\gdipluspath.h	/^	BOOL HasCurve() const$/;"	f	class:GraphicsPathIterator
HatchBrush	.\gdiplus\gdiplusbrush.h	/^	HatchBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:HatchBrush
HatchBrush	.\gdiplus\gdiplusbrush.h	/^	HatchBrush(HatchStyle hatchStyle,$/;"	f	class:HatchBrush
HelpContext	.\comdef.h	/^inline DWORD _com_error::HelpContext() const throw() {$/;"	f	class:_com_error
HelpFile	.\comdef.h	/^inline _bstr_t _com_error::HelpFile() const {$/;"	f	class:_com_error
HwndMSWheel	.\zmouse.h	/^__CRT_INLINE HWND HwndMSWheel (PUINT puiMsh_MsgMouseWheel, PUINT puiMsh_Msg3DSupport, PUINT puiMsh_MsgScrollLines, PBOOL pf3DSupport, PINT piScrollLines) {$/;"	f
HwndRenderTargetProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_HWND_RENDER_TARGET_PROPERTIES HwndRenderTargetProperties($/;"	f	namespace:D2D1
I128vec1	.\dvec.h	/^  I128vec1() { }$/;"	f	class:I128vec1
I128vec1	.\dvec.h	/^  I128vec1(__m128i mm) : M128(mm) { }$/;"	f	class:I128vec1
I16vec8	.\dvec.h	/^  I16vec8() { }$/;"	f	class:I16vec8
I16vec8	.\dvec.h	/^  I16vec8(__m128i mm) : M128(mm) { }$/;"	f	class:I16vec8
I32vec4	.\dvec.h	/^  I32vec4() { }$/;"	f	class:I32vec4
I32vec4	.\dvec.h	/^  I32vec4(__m128i mm) : M128(mm) { }$/;"	f	class:I32vec4
I64vec2	.\dvec.h	/^  I64vec2() { }$/;"	f	class:I64vec2
I64vec2	.\dvec.h	/^  I64vec2(__m128i mm) : M128(mm) { }$/;"	f	class:I64vec2
I64vec2	.\dvec.h	/^  __MINGW_EXTENSION I64vec2(__m64 q1,__m64 q0)$/;"	f	class:I64vec2
I8vec16	.\dvec.h	/^  I8vec16() { }$/;"	f	class:I8vec16
I8vec16	.\dvec.h	/^  I8vec16(__m128i mm) : M128(mm) { }$/;"	f	class:I8vec16
IBaseVideoMixer_AddRef	.\amvideo.h	/^static FORCEINLINE ULONG IBaseVideoMixer_AddRef(IBaseVideoMixer* This) {$/;"	f
IBaseVideoMixer_GetClockPeriod	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_GetClockPeriod(IBaseVideoMixer* This,int *pbValue) {$/;"	f
IBaseVideoMixer_GetInputPinCount	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_GetInputPinCount(IBaseVideoMixer* This,int *piPinCount) {$/;"	f
IBaseVideoMixer_GetLeadPin	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_GetLeadPin(IBaseVideoMixer* This,int *piPin) {$/;"	f
IBaseVideoMixer_IsUsingClock	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_IsUsingClock(IBaseVideoMixer* This,int *pbValue) {$/;"	f
IBaseVideoMixer_QueryInterface	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_QueryInterface(IBaseVideoMixer* This,REFIID riid,void **ppvObject) {$/;"	f
IBaseVideoMixer_Release	.\amvideo.h	/^static FORCEINLINE ULONG IBaseVideoMixer_Release(IBaseVideoMixer* This) {$/;"	f
IBaseVideoMixer_SetClockPeriod	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_SetClockPeriod(IBaseVideoMixer* This,int bValue) {$/;"	f
IBaseVideoMixer_SetLeadPin	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_SetLeadPin(IBaseVideoMixer* This,int iPin) {$/;"	f
IBaseVideoMixer_SetUsingClock	.\amvideo.h	/^static FORCEINLINE HRESULT IBaseVideoMixer_SetUsingClock(IBaseVideoMixer* This,int bValue) {$/;"	f
ICDecompressEx	.\vfw.h	/^  __CRT_INLINE LRESULT WINAPI ICDecompressEx(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiSrc,LPVOID lpSrc,int xSrc,int ySrc,int dxSrc,int dySrc,LPBITMAPINFOHEADER lpbiDst,LPVOID lpDst,int xDst,int yDst,int dxDst,int dyDst) {$/;"	f
ICDecompressExBegin	.\vfw.h	/^  __CRT_INLINE LRESULT WINAPI ICDecompressExBegin(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiSrc,LPVOID lpSrc,int xSrc,int ySrc,int dxSrc,int dySrc,LPBITMAPINFOHEADER lpbiDst,LPVOID lpDst,int xDst,int yDst,int dxDst,int dyDst) {$/;"	f
ICDecompressExQuery	.\vfw.h	/^  __CRT_INLINE LRESULT WINAPI ICDecompressExQuery(HIC hic,DWORD dwFlags,LPBITMAPINFOHEADER lpbiSrc,LPVOID lpSrc,int xSrc,int ySrc,int dxSrc,int dySrc,LPBITMAPINFOHEADER lpbiDst,LPVOID lpDst,int xDst,int yDst,int dxDst,int dyDst) {$/;"	f
ICDrawSuggestFormat	.\vfw.h	/^  __CRT_INLINE LRESULT WINAPI ICDrawSuggestFormat(HIC hic,LPBITMAPINFOHEADER lpbiIn,LPBITMAPINFOHEADER lpbiOut,int dxSrc,int dySrc,int dxDst,int dyDst,HIC hicDecomp) {$/;"	f
ICSetStatusProc	.\vfw.h	/^  __CRT_INLINE LRESULT WINAPI ICSetStatusProc(HIC hic,DWORD dwFlags,LRESULT lParam,LONG (CALLBACK *fpfnStatus)(LPARAM,UINT,LONG)) {$/;"	f
ID3DInclude_Close	.\d3dcommon.h	/^static FORCEINLINE HRESULT ID3DInclude_Close(ID3DInclude* This,const void *data) {$/;"	f
ID3DInclude_Open	.\d3dcommon.h	/^static FORCEINLINE HRESULT ID3DInclude_Open(ID3DInclude* This,D3D_INCLUDE_TYPE include_type,const char *filename,const void *parent_data,const void **data,UINT *bytes) {$/;"	f
IDListContainerIsConsistent	.\shlobj.h	/^  __forceinline WINBOOL IDListContainerIsConsistent(PCUIDLIST_RELATIVE p, UINT sz) {$/;"	f
IDirectDrawVideo_AddRef	.\amvideo.h	/^static FORCEINLINE ULONG IDirectDrawVideo_AddRef(IDirectDrawVideo* This) {$/;"	f
IDirectDrawVideo_CanUseOverlayStretch	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_CanUseOverlayStretch(IDirectDrawVideo* This,LONG *UseOverlayStretch) {$/;"	f
IDirectDrawVideo_CanUseScanLine	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_CanUseScanLine(IDirectDrawVideo* This,LONG *UseScanLine) {$/;"	f
IDirectDrawVideo_GetCaps	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_GetCaps(IDirectDrawVideo* This,DDCAPS *pCaps) {$/;"	f
IDirectDrawVideo_GetDirectDraw	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_GetDirectDraw(IDirectDrawVideo* This,IDirectDraw **ddraw) {$/;"	f
IDirectDrawVideo_GetEmulatedCaps	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_GetEmulatedCaps(IDirectDrawVideo* This,DDCAPS *pCaps) {$/;"	f
IDirectDrawVideo_GetFourCCCodes	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_GetFourCCCodes(IDirectDrawVideo* This,DWORD *pCount,DWORD *pCodes) {$/;"	f
IDirectDrawVideo_GetSurfaceDesc	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_GetSurfaceDesc(IDirectDrawVideo* This,DDSURFACEDESC *pSurfaceDesc) {$/;"	f
IDirectDrawVideo_GetSurfaceType	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_GetSurfaceType(IDirectDrawVideo* This,DWORD *pSurfaceType) {$/;"	f
IDirectDrawVideo_GetSwitches	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_GetSwitches(IDirectDrawVideo* This,DWORD *pSwitches) {$/;"	f
IDirectDrawVideo_QueryInterface	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_QueryInterface(IDirectDrawVideo* This,REFIID riid,void **ppvObject) {$/;"	f
IDirectDrawVideo_Release	.\amvideo.h	/^static FORCEINLINE ULONG IDirectDrawVideo_Release(IDirectDrawVideo* This) {$/;"	f
IDirectDrawVideo_SetDefault	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_SetDefault(IDirectDrawVideo* This) {$/;"	f
IDirectDrawVideo_SetDirectDraw	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_SetDirectDraw(IDirectDrawVideo* This,IDirectDraw *ddraw) {$/;"	f
IDirectDrawVideo_SetSwitches	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_SetSwitches(IDirectDrawVideo* This,DWORD Switches) {$/;"	f
IDirectDrawVideo_UseOverlayStretch	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_UseOverlayStretch(IDirectDrawVideo* This,LONG UseOverlayStretch) {$/;"	f
IDirectDrawVideo_UseScanLine	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_UseScanLine(IDirectDrawVideo* This,LONG UseScanLine) {$/;"	f
IDirectDrawVideo_UseWhenFullScreen	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_UseWhenFullScreen(IDirectDrawVideo* This,LONG UseWhenFullScreen) {$/;"	f
IDirectDrawVideo_WillUseFullScreen	.\amvideo.h	/^static FORCEINLINE HRESULT IDirectDrawVideo_WillUseFullScreen(IDirectDrawVideo* This,LONG *UseWhenFullScreen) {$/;"	f
IFullScreenVideoEx_AddRef	.\amvideo.h	/^static FORCEINLINE ULONG IFullScreenVideoEx_AddRef(IFullScreenVideoEx* This) {$/;"	f
IFullScreenVideoEx_CountModes	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_CountModes(IFullScreenVideoEx* This,LONG *pModes) {$/;"	f
IFullScreenVideoEx_GetAcceleratorTable	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_GetAcceleratorTable(IFullScreenVideoEx* This,HWND *phwnd,HACCEL *phAccel) {$/;"	f
IFullScreenVideoEx_GetCaption	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_GetCaption(IFullScreenVideoEx* This,BSTR *pstrCaption) {$/;"	f
IFullScreenVideoEx_GetClipFactor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_GetClipFactor(IFullScreenVideoEx* This,LONG *pClipFactor) {$/;"	f
IFullScreenVideoEx_GetCurrentMode	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_GetCurrentMode(IFullScreenVideoEx* This,LONG *pMode) {$/;"	f
IFullScreenVideoEx_GetMessageDrain	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_GetMessageDrain(IFullScreenVideoEx* This,HWND *hwnd) {$/;"	f
IFullScreenVideoEx_GetModeInfo	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_GetModeInfo(IFullScreenVideoEx* This,LONG Mode,LONG *pWidth,LONG *pHeight,LONG *pDepth) {$/;"	f
IFullScreenVideoEx_GetMonitor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_GetMonitor(IFullScreenVideoEx* This,LONG *Monitor) {$/;"	f
IFullScreenVideoEx_HideOnDeactivate	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_HideOnDeactivate(IFullScreenVideoEx* This,LONG Hide) {$/;"	f
IFullScreenVideoEx_IsHideOnDeactivate	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_IsHideOnDeactivate(IFullScreenVideoEx* This) {$/;"	f
IFullScreenVideoEx_IsKeepPixelAspectRatio	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_IsKeepPixelAspectRatio(IFullScreenVideoEx* This,LONG *pKeepAspect) {$/;"	f
IFullScreenVideoEx_IsModeAvailable	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_IsModeAvailable(IFullScreenVideoEx* This,LONG Mode) {$/;"	f
IFullScreenVideoEx_IsModeEnabled	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_IsModeEnabled(IFullScreenVideoEx* This,LONG Mode) {$/;"	f
IFullScreenVideoEx_KeepPixelAspectRatio	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_KeepPixelAspectRatio(IFullScreenVideoEx* This,LONG KeepAspect) {$/;"	f
IFullScreenVideoEx_QueryInterface	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_QueryInterface(IFullScreenVideoEx* This,REFIID riid,void **ppvObject) {$/;"	f
IFullScreenVideoEx_Release	.\amvideo.h	/^static FORCEINLINE ULONG IFullScreenVideoEx_Release(IFullScreenVideoEx* This) {$/;"	f
IFullScreenVideoEx_SetAcceleratorTable	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_SetAcceleratorTable(IFullScreenVideoEx* This,HWND hwnd,HACCEL hAccel) {$/;"	f
IFullScreenVideoEx_SetCaption	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_SetCaption(IFullScreenVideoEx* This,BSTR strCaption) {$/;"	f
IFullScreenVideoEx_SetClipFactor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_SetClipFactor(IFullScreenVideoEx* This,LONG ClipFactor) {$/;"	f
IFullScreenVideoEx_SetDefault	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_SetDefault(IFullScreenVideoEx* This) {$/;"	f
IFullScreenVideoEx_SetEnabled	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_SetEnabled(IFullScreenVideoEx* This,LONG Mode,LONG bEnabled) {$/;"	f
IFullScreenVideoEx_SetMessageDrain	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_SetMessageDrain(IFullScreenVideoEx* This,HWND hwnd) {$/;"	f
IFullScreenVideoEx_SetMonitor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideoEx_SetMonitor(IFullScreenVideoEx* This,LONG Monitor) {$/;"	f
IFullScreenVideo_AddRef	.\amvideo.h	/^static FORCEINLINE ULONG IFullScreenVideo_AddRef(IFullScreenVideo* This) {$/;"	f
IFullScreenVideo_CountModes	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_CountModes(IFullScreenVideo* This,LONG *pModes) {$/;"	f
IFullScreenVideo_GetCaption	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_GetCaption(IFullScreenVideo* This,BSTR *pstrCaption) {$/;"	f
IFullScreenVideo_GetClipFactor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_GetClipFactor(IFullScreenVideo* This,LONG *pClipFactor) {$/;"	f
IFullScreenVideo_GetCurrentMode	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_GetCurrentMode(IFullScreenVideo* This,LONG *pMode) {$/;"	f
IFullScreenVideo_GetMessageDrain	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_GetMessageDrain(IFullScreenVideo* This,HWND *hwnd) {$/;"	f
IFullScreenVideo_GetModeInfo	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_GetModeInfo(IFullScreenVideo* This,LONG Mode,LONG *pWidth,LONG *pHeight,LONG *pDepth) {$/;"	f
IFullScreenVideo_GetMonitor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_GetMonitor(IFullScreenVideo* This,LONG *Monitor) {$/;"	f
IFullScreenVideo_HideOnDeactivate	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_HideOnDeactivate(IFullScreenVideo* This,LONG Hide) {$/;"	f
IFullScreenVideo_IsHideOnDeactivate	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_IsHideOnDeactivate(IFullScreenVideo* This) {$/;"	f
IFullScreenVideo_IsModeAvailable	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_IsModeAvailable(IFullScreenVideo* This,LONG Mode) {$/;"	f
IFullScreenVideo_IsModeEnabled	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_IsModeEnabled(IFullScreenVideo* This,LONG Mode) {$/;"	f
IFullScreenVideo_QueryInterface	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_QueryInterface(IFullScreenVideo* This,REFIID riid,void **ppvObject) {$/;"	f
IFullScreenVideo_Release	.\amvideo.h	/^static FORCEINLINE ULONG IFullScreenVideo_Release(IFullScreenVideo* This) {$/;"	f
IFullScreenVideo_SetCaption	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_SetCaption(IFullScreenVideo* This,BSTR strCaption) {$/;"	f
IFullScreenVideo_SetClipFactor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_SetClipFactor(IFullScreenVideo* This,LONG ClipFactor) {$/;"	f
IFullScreenVideo_SetDefault	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_SetDefault(IFullScreenVideo* This) {$/;"	f
IFullScreenVideo_SetEnabled	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_SetEnabled(IFullScreenVideo* This,LONG Mode,LONG bEnabled) {$/;"	f
IFullScreenVideo_SetMessageDrain	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_SetMessageDrain(IFullScreenVideo* This,HWND hwnd) {$/;"	f
IFullScreenVideo_SetMonitor	.\amvideo.h	/^static FORCEINLINE HRESULT IFullScreenVideo_SetMonitor(IFullScreenVideo* This,LONG Monitor) {$/;"	f
IID_INS_ARGS_internal	.\inspectable.h	/^  template<typename T> void **IID_INS_ARGS_internal (T **p) {$/;"	f
IID_PPV_ARGS_Helper	.\combaseapi.h	/^  template<typename T> void **IID_PPV_ARGS_Helper (T **pp) {$/;"	f
IID_PPV_ARGS_Helper	.\wrl\client.h	/^void **IID_PPV_ARGS_Helper(::Microsoft::WRL::Details::ComPtrRef<T> pp) throw() {$/;"	f
IImageListToHIMAGELIST	.\commctrl.h	/^  FORCEINLINE HIMAGELIST IImageListToHIMAGELIST (struct IImageList *il) {$/;"	f
ILCloneChild	.\shlobj.h	/^inline PITEMID_CHILD ILCloneChild(PCUITEMID_CHILD p) { return ILCloneFirst (p); }$/;"	f
ILCloneFull	.\shlobj.h	/^inline PIDLIST_ABSOLUTE ILCloneFull(PCUIDLIST_ABSOLUTE p) { return reinterpret_cast<PIDLIST_ABSOLUTE> (ILClone (p)); }$/;"	f
ILFindChild	.\shlobj.h	/^inline PCUIDLIST_RELATIVE ILFindChild(PCIDLIST_ABSOLUTE p, PCIDLIST_ABSOLUTE c) { return const_cast<PCUIDLIST_RELATIVE> (ILFindChild (const_cast<PIDLIST_ABSOLUTE> (p), c)); }$/;"	f
ILIsAligned	.\shlobj.h	/^inline WINBOOL ILIsAligned(PCUIDLIST_RELATIVE p) { return ((((DWORD_PTR) p) & (sizeof (void *) - 1)) == 0); }$/;"	f
ILIsChild	.\shlobj.h	/^inline WINBOOL ILIsChild(PCUIDLIST_RELATIVE p) { return (ILIsEmpty (p) || ILIsEmpty (ILNext (p))); }$/;"	f
ILIsEmpty	.\shlobj.h	/^inline WINBOOL ILIsEmpty(PCUIDLIST_RELATIVE p) { return (!p || p->mkid.cb == 0); }$/;"	f
ILLoadFromStreamEx	.\shlobj.h	/^inline HRESULT ILLoadFromStreamEx(IStream *s, PIDLIST_ABSOLUTE *p) { return ILLoadFromStreamEx (s, reinterpret_cast<PIDLIST_RELATIVE *> (p)); }$/;"	f
ILLoadFromStreamEx	.\shlobj.h	/^inline HRESULT ILLoadFromStreamEx(IStream *s, PITEMID_CHILD *p) { return ILLoadFromStreamEx (s, reinterpret_cast<PIDLIST_RELATIVE *> (p)); }$/;"	f
ILNext	.\shlobj.h	/^inline PCUIDLIST_RELATIVE ILNext(PCUIDLIST_RELATIVE p) { return ILSkip (p, p->mkid.cb); }$/;"	f
ILNext	.\shlobj.h	/^inline PUIDLIST_RELATIVE ILNext(PUIDLIST_RELATIVE p) { return const_cast<PUIDLIST_RELATIVE> (ILNext (const_cast<PCUIDLIST_RELATIVE> (p))); }$/;"	f
ILSkip	.\shlobj.h	/^inline PCUIDLIST_RELATIVE ILSkip(PCUIDLIST_RELATIVE p, UINT c) { return reinterpret_cast<PCUIDLIST_RELATIVE> (VOID_OFFSET (p, c)); }$/;"	f
ILSkip	.\shlobj.h	/^inline PUIDLIST_RELATIVE ILSkip(PUIDLIST_RELATIVE p, UINT c) { return const_cast<PUIDLIST_RELATIVE> (ILSkip (const_cast<PCUIDLIST_RELATIVE> (p), c)); }$/;"	f
IN6ADDR_ISANY	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6ADDR_ISANY(const struct sockaddr_in6 *a) { return ((a->sin6_family==AF_INET6) && IN6_IS_ADDR_UNSPECIFIED(&a->sin6_addr)); }$/;"	f
IN6ADDR_ISLOOPBACK	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6ADDR_ISLOOPBACK(const struct sockaddr_in6 *a) { return ((a->sin6_family==AF_INET6) && IN6_IS_ADDR_LOOPBACK(&a->sin6_addr)); }$/;"	f
IN6ADDR_SETANY	.\ws2tcpip.h	/^WS2TCPIP_INLINE void IN6ADDR_SETANY(struct sockaddr_in6 *a) {$/;"	f
IN6ADDR_SETLOOPBACK	.\ws2tcpip.h	/^WS2TCPIP_INLINE void IN6ADDR_SETLOOPBACK(struct sockaddr_in6 *a) {$/;"	f
IN6_ADDR_EQUAL	.\ws2ipdef.h	/^WS2TCPIP_INLINE int IN6_ADDR_EQUAL(const struct in6_addr *a, const struct in6_addr *b) {$/;"	f
IN6_IS_ADDR_LINKLOCAL	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_LINKLOCAL(const struct in6_addr *a) { return ((a->s6_bytes[0]==0xfe) && ((a->s6_bytes[1] & 0xc0)==0x80)); }$/;"	f
IN6_IS_ADDR_LOOPBACK	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_LOOPBACK(const struct in6_addr *a) { return ((a->s6_words[0]==0) && (a->s6_words[1]==0) && (a->s6_words[2]==0) && (a->s6_words[3]==0) && (a->s6_words[4]==0) && (a->s6_words[5]==0) && (a->s6_words[6]==0) && (a->s6_words[7]==0x0100)); }$/;"	f
IN6_IS_ADDR_MC_GLOBAL	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_MC_GLOBAL(const struct in6_addr *a) { return IN6_IS_ADDR_MULTICAST(a) && ((a->s6_bytes[1] & 0xf)==0xe); }$/;"	f
IN6_IS_ADDR_MC_LINKLOCAL	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_MC_LINKLOCAL(const struct in6_addr *a) { return IN6_IS_ADDR_MULTICAST(a) && ((a->s6_bytes[1] & 0xf)==2); }$/;"	f
IN6_IS_ADDR_MC_NODELOCAL	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_MC_NODELOCAL(const struct in6_addr *a) { return IN6_IS_ADDR_MULTICAST(a) && ((a->s6_bytes[1] & 0xf)==1); }$/;"	f
IN6_IS_ADDR_MC_ORGLOCAL	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_MC_ORGLOCAL(const struct in6_addr *a) { return IN6_IS_ADDR_MULTICAST(a) && ((a->s6_bytes[1] & 0xf)==8); }$/;"	f
IN6_IS_ADDR_MC_SITELOCAL	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_MC_SITELOCAL(const struct in6_addr *a) { return IN6_IS_ADDR_MULTICAST(a) && ((a->s6_bytes[1] & 0xf)==5); }$/;"	f
IN6_IS_ADDR_MULTICAST	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_MULTICAST(const struct in6_addr *a) { return (a->s6_bytes[0]==0xff); }$/;"	f
IN6_IS_ADDR_SITELOCAL	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_SITELOCAL(const struct in6_addr *a) { return ((a->s6_bytes[0]==0xfe) && ((a->s6_bytes[1] & 0xc0)==0xc0)); }$/;"	f
IN6_IS_ADDR_UNSPECIFIED	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_UNSPECIFIED(const struct in6_addr *a) { return ((a->s6_words[0]==0) && (a->s6_words[1]==0) && (a->s6_words[2]==0) && (a->s6_words[3]==0) && (a->s6_words[4]==0) && (a->s6_words[5]==0) && (a->s6_words[6]==0) && (a->s6_words[7]==0)); }$/;"	f
IN6_IS_ADDR_V4COMPAT	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_V4COMPAT(const struct in6_addr *a) { return ((a->s6_words[0]==0) && (a->s6_words[1]==0) && (a->s6_words[2]==0) && (a->s6_words[3]==0) && (a->s6_words[4]==0) && (a->s6_words[5]==0) && !((a->s6_words[6]==0) && (a->s6_addr[14]==0) && ((a->s6_addr[15]==0) || (a->s6_addr[15]==1)))); }$/;"	f
IN6_IS_ADDR_V4MAPPED	.\ws2tcpip.h	/^WS2TCPIP_INLINE int IN6_IS_ADDR_V4MAPPED(const struct in6_addr *a) { return ((a->s6_words[0]==0) && (a->s6_words[1]==0) && (a->s6_words[2]==0) && (a->s6_words[3]==0) && (a->s6_words[4]==0) && (a->s6_words[5]==0xffff)); }$/;"	f
IN6_SET_ADDR_LOOPBACK	.\ws2tcpip.h	/^WS2TCPIP_INLINE void IN6_SET_ADDR_LOOPBACK(struct in6_addr *a) {$/;"	f
IN6_SET_ADDR_UNSPECIFIED	.\ws2tcpip.h	/^WS2TCPIP_INLINE void IN6_SET_ADDR_UNSPECIFIED(struct in6_addr *a) { memset(a->s6_bytes,0,sizeof(struct in6_addr)); }$/;"	f
IP_FragOff	.\netmon.h	/^  INLINE WORD IP_FragOff(ULPIP pIP) { return (XCHG(pIP->FragOff) & IP_FRAGOFF_MASK) << IP_FRAGOFF_SHIFT; }$/;"	f
IP_HdrLen	.\netmon.h	/^  INLINE DWORD IP_HdrLen(ULPIP pIP) { return ((pIP->HdrLen & IP_HDRLEN_MASK) >> IP_HDRLEN_SHIFT) << 2; }$/;"	f
IP_MoreFragments	.\netmon.h	/^  INLINE DWORD IP_MoreFragments(ULPIP pIP) { return (pIP->Flags & IP_MF_MASK) >> IP_MF_SHIFT; }$/;"	f
IP_TotalLen	.\netmon.h	/^  INLINE DWORD IP_TotalLen(ULPIP pIP) { return XCHG(pIP->TotalLen); }$/;"	f
IP_Version	.\netmon.h	/^  INLINE BYTE IP_Version(ULPIP pIP) { return (pIP->Version & IP_VERSION_MASK) >> IP_VERSION_SHIFT; }$/;"	f
IQualProp_AddRef	.\amvideo.h	/^static FORCEINLINE ULONG IQualProp_AddRef(IQualProp* This) {$/;"	f
IQualProp_QueryInterface	.\amvideo.h	/^static FORCEINLINE HRESULT IQualProp_QueryInterface(IQualProp* This,REFIID riid,void **ppvObject) {$/;"	f
IQualProp_Release	.\amvideo.h	/^static FORCEINLINE ULONG IQualProp_Release(IQualProp* This) {$/;"	f
IQualProp_get_AvgFrameRate	.\amvideo.h	/^static FORCEINLINE HRESULT IQualProp_get_AvgFrameRate(IQualProp* This,int *piAvgFrameRate) {$/;"	f
IQualProp_get_AvgSyncOffset	.\amvideo.h	/^static FORCEINLINE HRESULT IQualProp_get_AvgSyncOffset(IQualProp* This,int *piAvg) {$/;"	f
IQualProp_get_DevSyncOffset	.\amvideo.h	/^static FORCEINLINE HRESULT IQualProp_get_DevSyncOffset(IQualProp* This,int *piDev) {$/;"	f
IQualProp_get_FramesDrawn	.\amvideo.h	/^static FORCEINLINE HRESULT IQualProp_get_FramesDrawn(IQualProp* This,int *pcFramesDrawn) {$/;"	f
IQualProp_get_FramesDroppedInRenderer	.\amvideo.h	/^static FORCEINLINE HRESULT IQualProp_get_FramesDroppedInRenderer(IQualProp* This,int *pcFrames) {$/;"	f
IQualProp_get_Jitter	.\amvideo.h	/^static FORCEINLINE HRESULT IQualProp_get_Jitter(IQualProp* This,int *iJitter) {$/;"	f
IS_RATINGS_ENABLED	.\ratings.h	/^static inline WINBOOL IS_RATINGS_ENABLED() {$/;"	f
Identity	.\d2d1helper.h	/^    static D2D1FORCEINLINE Matrix3x2F Identity() {$/;"	f	class:D2D1::Matrix3x2F
IdentityMatrix	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_MATRIX_3X2_F IdentityMatrix() {$/;"	f	namespace:D2D1
Image	.\gdiplus\gdiplusheaders.h	/^	Image(GpImage *image, Status status):$/;"	f	class:Image
Image	.\gdiplus\gdiplusimpl.h	/^__inline__ Image::Image(IStream *stream, BOOL useEmbeddedColorManagement):$/;"	f	class:Image
Image	.\gdiplus\gdiplusimpl.h	/^__inline__ Image::Image(const WCHAR *filename, BOOL useEmbeddedColorManagement):$/;"	f	class:Image
ImageAttributes	.\gdiplus\gdiplusimageattributes.h	/^	ImageAttributes(): nativeImageAttributes(NULL), lastStatus(Ok)$/;"	f	class:ImageAttributes
ImageAttributes	.\gdiplus\gdiplusimageattributes.h	/^	ImageAttributes(GpImageAttributes *imageAttributes, Status status):$/;"	f	class:ImageAttributes
ImageBrushProperties	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_IMAGE_BRUSH_PROPERTIES ImageBrushProperties(D2D1_RECT_F sourceRectangle,$/;"	f	namespace:D2D1
ImpersonateClient	.\wmiatlprov.h	/^    HRESULT ImpersonateClient() {$/;"	f	class:ATL::CImpersonateClientHelper
InfiniteRect	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_RECT_F InfiniteRect() {$/;"	f	namespace:D2D1
Inflate	.\gdiplus\gdiplustypes.h	/^	VOID Inflate(INT dx, INT dy) {$/;"	f	struct:Rect
Inflate	.\gdiplus\gdiplustypes.h	/^	VOID Inflate(REAL dx, REAL dy) {$/;"	f	struct:RectF
Inflate	.\gdiplus\gdiplustypes.h	/^	VOID Inflate(const Point& point) {$/;"	f	struct:Rect
Inflate	.\gdiplus\gdiplustypes.h	/^	VOID Inflate(const PointF& point) {$/;"	f	struct:RectF
Init	.\mspenum.h	/^  HRESULT Init(T *begin,T *end,IUnknown *pUnk,CComEnumFlags flags = AtlFlagNoCopy) {$/;"	f	class:CSafeComEnum
Init	.\wrl\wrappers\corewrappers.h	/^                void Init(const wchar_t* str, unsigned int len) {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
InitHashTable	.\dxtmpl.h	/^void CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::InitHashTable(UINT nHashSize,WINBOOL bAllocNow) {$/;"	f	class:CDXMap
InitMultipleMonitorStubs	.\multimon.h	/^  WINBOOL InitMultipleMonitorStubs(void) {$/;"	f
InitPropVariantFromBoolean	.\propvarutil.h	/^inline HRESULT InitPropVariantFromBoolean(WINBOOL fVal, PROPVARIANT *ppropvar)$/;"	f
InitPropVariantFromInt64	.\propvarutil.h	/^inline HRESULT InitPropVariantFromInt64(LONGLONG llVal, PROPVARIANT *ppropvar)$/;"	f
InitPropVariantFromString	.\propvarutil.h	/^inline HRESULT InitPropVariantFromString(PCWSTR psz, PROPVARIANT *ppropvar)$/;"	f
Initialize	.\mspcoll.h	/^  HRESULT WINAPI Initialize(DWORD dwSize,BSTR *pBegin,BSTR *pEnd) {$/;"	f	class:CTapiBstrCollection
Initialize	.\mspcoll.h	/^  HRESULT WINAPI Initialize(DWORD dwSize,T *pBegin,T *pEnd) {$/;"	f	class:CTapiIfCollection
Initialize	.\roapi.h	/^    __inline HRESULT Initialize (RO_INIT_TYPE it$/;"	f	namespace:Windows::Foundation
InitializeListHead	.\ddk\wdm.h	/^InitializeListHead($/;"	f
InitializePalette	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::InitializePalette(ColorPalette *palette,$/;"	f	class:Bitmap
InitializeSListHead	.\ddk\wdm.h	/^InitializeSListHead($/;"	f
Initialze	.\roapi.h	/^      __inline HRESULT Initialze (RO_INIT_TYPE it$/;"	f	namespace:ABI::Windows::Foundation
InlineIsEqualGUID	.\guiddef.h	/^__inline int InlineIsEqualGUID (REFGUID rguid1, REFGUID rguid2) {$/;"	f
InsertAfter	.\dxtmpl.h	/^DXLISTPOS CDXList<TYPE,ARG_TYPE>::InsertAfter(DXLISTPOS position,ARG_TYPE newElement) {$/;"	f	class:CDXList
InsertAt	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::InsertAt(int nIndex,ARG_TYPE newElement,int nCount) {$/;"	f	class:CDXArray
InsertAt	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::InsertAt(int nStartIndex,CDXArray *pNewArray) {$/;"	f	class:CDXArray
InsertBefore	.\dxtmpl.h	/^DXLISTPOS CDXList<TYPE,ARG_TYPE>::InsertBefore(DXLISTPOS position,ARG_TYPE newElement) {$/;"	f	class:CDXList
InsertHeadList	.\ddk\wdm.h	/^InsertHeadList($/;"	f
InsertTailList	.\ddk\wdm.h	/^InsertTailList($/;"	f
InstalledFontCollection	.\gdiplus\gdiplusimpl.h	/^__inline__ InstalledFontCollection::InstalledFontCollection()$/;"	f	class:InstalledFontCollection
IntToF32vec4	.\fvec.h	/^inline F32vec4 IntToF32vec4(const F32vec4 &a,int i) {$/;"	f
IntToF64vec2	.\dvec.h	/^inline F64vec2 IntToF64vec2(const F64vec2 &a,int b) { return _mm_cvtsi32_sd(a,b); }$/;"	f
IntToPtr	.\basetsd.h	/^  static __inline void *IntToPtr (const int i) { return ((void *) (INT_PTR)i); }$/;"	f
InterlockedAdd64	.\ddk\wdm.h	/^InterlockedAdd64($/;"	f
InterlockedAnd	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedAnd (unsigned __int64 volatile *Destination, unsigned __int64 Value) {$/;"	f
InterlockedAnd64	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedAnd64 (LONGLONG volatile *Destination, LONGLONG Value) {$/;"	f
InterlockedAnd64_Inline	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedAnd64_Inline(LONGLONG volatile *Destination, LONGLONG Value) {$/;"	f
InterlockedAnd_Inline	.\winbase.h	/^  FORCEINLINE LONG InterlockedAnd_Inline(LONG volatile *Target, LONG Set) {$/;"	f
InterlockedBitTestAndComplement_Inline	.\winbase.h	/^  FORCEINLINE BOOLEAN InterlockedBitTestAndComplement_Inline(LONG volatile *Base, LONG Bit) {$/;"	f
InterlockedBitTestAndReset	.\ddk\wdm.h	/^InterlockedBitTestAndReset($/;"	f
InterlockedBitTestAndReset_Inline	.\winbase.h	/^  FORCEINLINE BOOLEAN InterlockedBitTestAndReset_Inline(LONG volatile *Base, LONG Bit) {$/;"	f
InterlockedBitTestAndSet	.\ddk\wdm.h	/^InterlockedBitTestAndSet($/;"	f
InterlockedBitTestAndSet_Inline	.\winbase.h	/^  FORCEINLINE BOOLEAN InterlockedBitTestAndSet_Inline(LONG volatile *Base, LONG Bit) {$/;"	f
InterlockedCompareExchange	.\interlockedapi.h	/^  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedCompareExchange(LONG volatile *Destination, LONG Exchange, LONG Comperand) {$/;"	f
InterlockedCompareExchange	.\winbase.h	/^  FORCEINLINE unsigned InterlockedCompareExchange (unsigned volatile *Destination, unsigned Exchange, unsigned Comperand) {$/;"	f
InterlockedCompareExchange	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedCompareExchange (unsigned __int64 volatile *Destination, unsigned __int64 Exchange, unsigned __int64 Comperand) {$/;"	f
InterlockedCompareExchange	.\winbase.h	/^  FORCEINLINE unsigned long InterlockedCompareExchange (unsigned long volatile *Destination, unsigned long Exchange, unsigned long Comperand) {$/;"	f
InterlockedCompareExchange64	.\interlockedapi.h	/^  __MINGW_INTRIN_INLINE LONGLONG WINAPI InterlockedCompareExchange64(LONGLONG volatile *Destination, LONGLONG Exchange, LONGLONG Comperand) {$/;"	f
InterlockedDecrement	.\interlockedapi.h	/^  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedDecrement(LONG volatile *lpAddend) {$/;"	f
InterlockedDecrement	.\winbase.h	/^  FORCEINLINE unsigned InterlockedDecrement (unsigned volatile *Addend) {$/;"	f
InterlockedDecrement	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedDecrement (unsigned __int64 volatile *Addend) {$/;"	f
InterlockedDecrement	.\winbase.h	/^  FORCEINLINE unsigned long InterlockedDecrement (unsigned long volatile *Addend) {$/;"	f
InterlockedDecrement64	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedDecrement64 (LONGLONG volatile *Addend) {$/;"	f
InterlockedExchange	.\interlockedapi.h	/^  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedExchange(LONG volatile *Target, LONG Value) {$/;"	f
InterlockedExchange	.\winbase.h	/^  FORCEINLINE unsigned InterlockedExchange (unsigned volatile *Target, unsigned Value) {$/;"	f
InterlockedExchange	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedExchange (unsigned __int64 volatile *Target, unsigned __int64 Value) {$/;"	f
InterlockedExchange	.\winbase.h	/^  FORCEINLINE unsigned long InterlockedExchange (unsigned long volatile *Target, unsigned long Value) {$/;"	f
InterlockedExchange64	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedExchange64 (LONGLONG volatile *Target, LONGLONG Value) {$/;"	f
InterlockedExchangeAdd	.\interlockedapi.h	/^  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedExchangeAdd(LONG volatile *Addend, LONG Value) {$/;"	f
InterlockedExchangeAdd	.\winbase.h	/^  FORCEINLINE unsigned InterlockedExchangeAdd (unsigned volatile *Addend, unsigned Value) {$/;"	f
InterlockedExchangeAdd	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedExchangeAdd (unsigned __int64 volatile *Addend, unsigned __int64 Value) {$/;"	f
InterlockedExchangeAdd	.\winbase.h	/^  FORCEINLINE unsigned long InterlockedExchangeAdd (unsigned long volatile *Addend, unsigned long Value) {$/;"	f
InterlockedExchangeAdd64	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedExchangeAdd64 (LONGLONG volatile *Addend, LONGLONG Value) {$/;"	f
InterlockedExchangeSubtract	.\winbase.h	/^  FORCEINLINE unsigned InterlockedExchangeSubtract (unsigned volatile *Addend, unsigned Value) {$/;"	f
InterlockedExchangeSubtract	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedExchangeSubtract (unsigned __int64 volatile *Addend, unsigned __int64 Value) {$/;"	f
InterlockedExchangeSubtract	.\winbase.h	/^  FORCEINLINE unsigned long InterlockedExchangeSubtract (unsigned long volatile *Addend, unsigned long Value) {$/;"	f
InterlockedIncrement	.\interlockedapi.h	/^  __MINGW_INTRIN_INLINE LONG WINAPI InterlockedIncrement(LONG volatile *lpAddend) {$/;"	f
InterlockedIncrement	.\winbase.h	/^  FORCEINLINE unsigned InterlockedIncrement (unsigned volatile *Addend) {$/;"	f
InterlockedIncrement	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedIncrement (unsigned __int64 volatile *Addend) {$/;"	f
InterlockedIncrement	.\winbase.h	/^  FORCEINLINE unsigned long InterlockedIncrement (unsigned long volatile *Addend) {$/;"	f
InterlockedIncrement64	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedIncrement64 (LONGLONG volatile *Addend) {$/;"	f
InterlockedOr	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedOr (unsigned __int64 volatile *Destination, unsigned __int64 Value) {$/;"	f
InterlockedOr64	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedOr64 (LONGLONG volatile *Destination, LONGLONG Value) {$/;"	f
InterlockedOr64_Inline	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedOr64_Inline(LONGLONG volatile *Destination, LONGLONG Value) {$/;"	f
InterlockedOr_Inline	.\winbase.h	/^  FORCEINLINE LONG InterlockedOr_Inline(LONG volatile *Target, LONG Set) {$/;"	f
InterlockedXor	.\winbase.h	/^  FORCEINLINE unsigned __int64 InterlockedXor (unsigned __int64 volatile *Destination, unsigned __int64 Value) {$/;"	f
InterlockedXor64	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedXor64 (LONGLONG volatile *Destination, LONGLONG Value) {$/;"	f
InterlockedXor64_Inline	.\winbase.h	/^  FORCEINLINE LONGLONG InterlockedXor64_Inline(LONGLONG volatile *Destination, LONGLONG Value) {$/;"	f
InterlockedXor_Inline	.\winbase.h	/^  FORCEINLINE LONG InterlockedXor_Inline(LONG volatile *Target, LONG Set) {$/;"	f
InternalAddRef	.\wrl\client.h	/^            void InternalAddRef() const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
InternalRelease	.\wrl\client.h	/^            unsigned long InternalRelease() throw() {$/;"	f	class:Microsoft::WRL::ComPtr
Intersect	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const GraphicsPath *path)$/;"	f	class:Region
Intersect	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const Rect& rect)$/;"	f	class:Region
Intersect	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const RectF& rect)$/;"	f	class:Region
Intersect	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Intersect(const Region *region)$/;"	f	class:Region
Intersect	.\gdiplus\gdiplustypes.h	/^	BOOL Intersect(const Rect& rect) {$/;"	f	struct:Rect
Intersect	.\gdiplus\gdiplustypes.h	/^	BOOL Intersect(const RectF& rect) {$/;"	f	struct:RectF
Intersect	.\gdiplus\gdiplustypes.h	/^	static BOOL Intersect(Rect& c, const Rect& a, const Rect& b) {$/;"	f	struct:Rect
Intersect	.\gdiplus\gdiplustypes.h	/^	static BOOL Intersect(RectF& c, const RectF& a, const RectF& b) {$/;"	f	struct:RectF
IntersectClip	.\gdiplus\gdiplusgraphics.h	/^	Status IntersectClip(const Rect& rect)$/;"	f	class:Graphics
IntersectClip	.\gdiplus\gdiplusgraphics.h	/^	Status IntersectClip(const RectF& rect)$/;"	f	class:Graphics
IntersectClip	.\gdiplus\gdiplusgraphics.h	/^	Status IntersectClip(const Region *region)$/;"	f	class:Graphics
IntersectsWith	.\gdiplus\gdiplustypes.h	/^	BOOL IntersectsWith(const Rect& rc) const {$/;"	f	struct:Rect
IntersectsWith	.\gdiplus\gdiplustypes.h	/^	BOOL IntersectsWith(const RectF& rc) const {$/;"	f	struct:RectF
Invert	.\d2d1helper.h	/^    inline bool Invert() {$/;"	f	class:D2D1::Matrix3x2F
Invert	.\gdiplus\gdiplusmatrix.h	/^	Status Invert()$/;"	f	class:Matrix
IoAllocateAdapterChannel	.\ddk\wdm.h	/^IoAllocateAdapterChannel($/;"	f
IoCopyCurrentIrpStackLocationToNext	.\ddk\wdm.h	/^IoCopyCurrentIrpStackLocationToNext($/;"	f
IoFlushAdapterBuffers	.\ddk\wdm.h	/^IoFlushAdapterBuffers($/;"	f
IoFreeAdapterChannel	.\ddk\wdm.h	/^IoFreeAdapterChannel($/;"	f
IoFreeMapRegisters	.\ddk\wdm.h	/^IoFreeMapRegisters($/;"	f
IoGetCurrentIrpStackLocation	.\ddk\wdm.h	/^IoGetCurrentIrpStackLocation($/;"	f
IoGetNextIrpStackLocation	.\ddk\wdm.h	/^IoGetNextIrpStackLocation($/;"	f
IoGetRemainingStackSize	.\ddk\wdm.h	/^IoGetRemainingStackSize(VOID)$/;"	f
IoInitializeDpcRequest	.\ddk\wdm.h	/^IoInitializeDpcRequest($/;"	f
IoInitializeDriverCreateContext	.\ddk\ntddk.h	/^IoInitializeDriverCreateContext($/;"	f
IoInitializePriorityInfo	.\ddk\ntifs.h	/^IoInitializePriorityInfo($/;"	f
IoInitializeThreadedDpcRequest	.\ddk\wdm.h	/^IoInitializeThreadedDpcRequest($/;"	f
IoMapTransfer	.\ddk\wdm.h	/^IoMapTransfer($/;"	f
IoMarkIrpPending	.\ddk\wdm.h	/^IoMarkIrpPending($/;"	f
IoSetCompletionRoutine	.\ddk\wdm.h	/^IoSetCompletionRoutine($/;"	f
IoSetNextIrpStackLocation	.\ddk\wdm.h	/^IoSetNextIrpStackLocation($/;"	f
IoSkipCurrentIrpStackLocation	.\ddk\wdm.h	/^IoSkipCurrentIrpStackLocation($/;"	f
Is16vec8	.\dvec.h	/^  Is16vec8() { }$/;"	f	class:Is16vec8
Is16vec8	.\dvec.h	/^  Is16vec8(__m128i mm) : I16vec8(mm) { }$/;"	f	class:Is16vec8
Is16vec8	.\dvec.h	/^  Is16vec8(signed short s7,signed short s6,signed short s5,signed short s4,signed short s3,signed short s2,signed short s1,signed short s0)$/;"	f	class:Is16vec8
Is32vec4	.\dvec.h	/^  Is32vec4() { }$/;"	f	class:Is32vec4
Is32vec4	.\dvec.h	/^  Is32vec4(__m128i mm) : I32vec4(mm) { }$/;"	f	class:Is32vec4
Is32vec4	.\dvec.h	/^  Is32vec4(int i3,int i2,int i1,int i0)$/;"	f	class:Is32vec4
Is8vec16	.\dvec.h	/^  Is8vec16() { }$/;"	f	class:Is8vec16
Is8vec16	.\dvec.h	/^  Is8vec16(__m128i mm) : I8vec16(mm) { }$/;"	f	class:Is8vec16
IsAlphaPixelFormat	.\gdiplus\gdipluspixelformats.h	/^static __inline__ BOOL IsAlphaPixelFormat(PixelFormat pixfmt)$/;"	f
IsAvailable	.\gdiplus\gdiplusheaders.h	/^	BOOL IsAvailable() const$/;"	f	class:Font
IsAvailable	.\gdiplus\gdiplusheaders.h	/^	BOOL IsAvailable() const$/;"	f	class:FontFamily
IsCanonicalPixelFormat	.\gdiplus\gdipluspixelformats.h	/^static __inline__ BOOL IsCanonicalPixelFormat(PixelFormat pixfmt)$/;"	f
IsClipEmpty	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsClipEmpty() const$/;"	f	class:Graphics
IsDisplay	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsDisplay() const$/;"	f	struct:MetafileHeader
IsEmf	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsEmf() const$/;"	f	struct:MetafileHeader
IsEmfOrEmfPlus	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsEmfOrEmfPlus() const$/;"	f	struct:MetafileHeader
IsEmfPlus	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsEmfPlus() const$/;"	f	struct:MetafileHeader
IsEmfPlusDual	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsEmfPlusDual() const$/;"	f	struct:MetafileHeader
IsEmfPlusOnly	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsEmfPlusOnly() const$/;"	f	struct:MetafileHeader
IsEmpty	.\dxtmpl.h	/^inline WINBOOL CDXList<TYPE,ARG_TYPE>::IsEmpty() const { return m_nCount==0; }$/;"	f	class:CDXList
IsEmpty	.\dxtmpl.h	/^inline WINBOOL CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::IsEmpty() const { return m_nCount==0; }$/;"	f	class:CDXMap
IsEmpty	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsEmpty(const Graphics *graphics) const$/;"	f	class:Region
IsEmptyArea	.\gdiplus\gdiplustypes.h	/^	BOOL IsEmptyArea() const {$/;"	f	struct:Rect
IsEmptyArea	.\gdiplus\gdiplustypes.h	/^	BOOL IsEmptyArea() const {$/;"	f	struct:RectF
IsEqualGUID	.\guiddef.h	/^__inline int IsEqualGUID (REFGUID rguid1, REFGUID rguid2) {$/;"	f
IsEqualGUIDAligned	.\ddk\wdm.h	/^inline int IsEqualGUIDAligned(REFGUID guid1, REFGUID guid2)$/;"	f
IsEqualGUIDBase	.\oledb.h	/^  static inline WINBOOL IsEqualGUIDBase(const GUID &rguid1,const GUID &rguid2) { return !memcmp(&(rguid1.Data2),&(rguid2.Data2),sizeof(GUID) - sizeof(rguid1.Data1)); }$/;"	f
IsExtendedPixelFormat	.\gdiplus\gdipluspixelformats.h	/^static __inline__ BOOL IsExtendedPixelFormat(PixelFormat pixfmt)$/;"	f
IsFilled	.\gdiplus\gdipluslinecaps.h	/^	BOOL IsFilled() const$/;"	f	class:AdjustableArrowCap
IsIdentity	.\d2d1helper.h	/^    inline bool IsIdentity() const {$/;"	f	class:D2D1::Matrix3x2F
IsIdentity	.\gdiplus\gdiplusmatrix.h	/^	BOOL IsIdentity() const$/;"	f	class:Matrix
IsIndexedPixelFormat	.\gdiplus\gdipluspixelformats.h	/^static __inline__ BOOL IsIndexedPixelFormat(PixelFormat pixfmt)$/;"	f
IsInfinite	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsInfinite(const Graphics *graphics) const$/;"	f	class:Region
IsInvertible	.\d2d1helper.h	/^    inline bool IsInvertible() const {$/;"	f	class:D2D1::Matrix3x2F
IsInvertible	.\gdiplus\gdiplusmatrix.h	/^	BOOL IsInvertible() const$/;"	f	class:Matrix
IsListEmpty	.\ddk\wdm.h	/^IsListEmpty($/;"	f
IsOutlineVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(INT x, INT y, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(REAL x, REAL y, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(const Point& point, const Pen *pen,$/;"	f	class:GraphicsPath
IsOutlineVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsOutlineVisible(const PointF& point, const Pen *pen,$/;"	f	class:GraphicsPath
IsPlatformNT	.\multimon.h	/^  WINBOOL IsPlatformNT() {$/;"	f
IsSingleMediaType	.\msputils.h	/^extern __inline WINBOOL IsSingleMediaType(DWORD dwMediaType) { return !((dwMediaType==0) || ((dwMediaType & (dwMediaType - 1))!=0)); }$/;"	f
IsStyleAvailable	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL FontFamily::IsStyleAvailable(INT style) const$/;"	f	class:FontFamily
IsValidAggregatedMediaType	.\msputils.h	/^extern __inline WINBOOL IsValidAggregatedMediaType(DWORD dwAggregatedMediaType) {$/;"	f
IsValidSingleMediaType	.\msputils.h	/^extern __inline WINBOOL IsValidSingleMediaType(DWORD dwMediaType,DWORD dwMask) { return IsSingleMediaType(dwMediaType) && ((dwMediaType & dwMask)==dwMediaType); }$/;"	f
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(INT x, INT y) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(INT x, INT y, INT width, INT height) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(REAL x, REAL y) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(REAL x, REAL y, REAL width, REAL height) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(const Point& point) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(const PointF& point) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(const Rect& rect) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisible(const RectF& rect) const$/;"	f	class:Graphics
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(INT x, INT y, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(REAL x, REAL y, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(const Point& point, const Graphics *g) const$/;"	f	class:GraphicsPath
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL GraphicsPath::IsVisible(const PointF& point,$/;"	f	class:GraphicsPath
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(INT x, INT y, INT width, INT height,$/;"	f	class:Region
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(INT x, INT y,$/;"	f	class:Region
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(REAL x, REAL y, REAL width, REAL height,$/;"	f	class:Region
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(REAL x, REAL y,$/;"	f	class:Region
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const Point& point,$/;"	f	class:Region
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const PointF& point,$/;"	f	class:Region
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const Rect& rect,$/;"	f	class:Region
IsVisible	.\gdiplus\gdiplusimpl.h	/^__inline__ BOOL Region::IsVisible(const RectF& rect,$/;"	f	class:Region
IsVisibleClipEmpty	.\gdiplus\gdiplusgraphics.h	/^	BOOL IsVisibleClipEmpty() const$/;"	f	class:Graphics
IsVolumeSnapshotted	.\vsbackup.h	/^HRESULT WINAPI IsVolumeSnapshotted($/;"	f
IsWindows7OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindows7OrGreater(void) {$/;"	f
IsWindows7SP1OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindows7SP1OrGreater(void) {$/;"	f
IsWindows8OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindows8OrGreater(void) {$/;"	f
IsWindows8Point1OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindows8Point1OrGreater(void) {$/;"	f
IsWindowsServer	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsServer(void) {$/;"	f
IsWindowsVersionOrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsVersionOrGreater(WORD major, WORD minor, WORD servpack)$/;"	f
IsWindowsVistaOrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsVistaOrGreater(void) {$/;"	f
IsWindowsVistaSP1OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsVistaSP1OrGreater(void) {$/;"	f
IsWindowsVistaSP2OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsVistaSP2OrGreater(void) {$/;"	f
IsWindowsXPOrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsXPOrGreater(void) {$/;"	f
IsWindowsXPSP1OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsXPSP1OrGreater(void) {$/;"	f
IsWindowsXPSP2OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsXPSP2OrGreater(void) {$/;"	f
IsWindowsXPSP3OrGreater	.\versionhelpers.h	/^VERSIONHELPERAPI IsWindowsXPSP3OrGreater(void) {$/;"	f
IsWmf	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsWmf() const$/;"	f	struct:MetafileHeader
IsWmfPlaceable	.\gdiplus\gdiplusmetaheader.h	/^	BOOL IsWmfPlaceable() const$/;"	f	struct:MetafileHeader
Iu16vec8	.\dvec.h	/^  Iu16vec8() { }$/;"	f	class:Iu16vec8
Iu16vec8	.\dvec.h	/^  Iu16vec8(__m128i mm) : I16vec8(mm) { }$/;"	f	class:Iu16vec8
Iu16vec8	.\dvec.h	/^  Iu16vec8(unsigned short s7,unsigned short s6,unsigned short s5,unsigned short s4,unsigned short s3,unsigned short s2,unsigned short s1,unsigned short s0)$/;"	f	class:Iu16vec8
Iu32vec4	.\dvec.h	/^  Iu32vec4() { }$/;"	f	class:Iu32vec4
Iu32vec4	.\dvec.h	/^  Iu32vec4(__m128i mm) : I32vec4(mm) { }$/;"	f	class:Iu32vec4
Iu32vec4	.\dvec.h	/^  Iu32vec4(unsigned int ui3,unsigned int ui2,unsigned int ui1,unsigned int ui0)$/;"	f	class:Iu32vec4
Iu8vec16	.\dvec.h	/^  Iu8vec16() { }$/;"	f	class:Iu8vec16
Iu8vec16	.\dvec.h	/^  Iu8vec16(__m128i mm) : I8vec16(mm) { }$/;"	f	class:Iu8vec16
KCOM_New	.\ddk\stdunk.h	/^KCOM_New($/;"	f
KdHelp32To64	.\psdk_inc\_dbg_common.h	/^  static __inline void KdHelp32To64(PKDHELP p32,PKDHELP64 p64) {$/;"	f
KeFlushWriteBuffer	.\ddk\wdm.h	/^KeFlushWriteBuffer(VOID)$/;"	f
KeGetCurrentIrql	.\ddk\wdm.h	/^KeGetCurrentIrql(VOID)$/;"	f
KeGetCurrentProcessorNumber	.\ddk\ntddk.h	/^KeGetCurrentProcessorNumber(VOID)$/;"	f
KeGetCurrentProcessorNumber	.\ddk\wdm.h	/^KeGetCurrentProcessorNumber(VOID)$/;"	f
KeGetCurrentThread	.\ddk\wdm.h	/^KeGetCurrentThread(VOID)$/;"	f
KeGetPcr	.\ddk\ntddk.h	/^KeGetPcr(VOID)$/;"	f
KeInitializeSpinLock	.\ddk\wdm.h	/^KeInitializeSpinLock(IN PKSPIN_LOCK SpinLock)$/;"	f
KeLowerIrql	.\ddk\wdm.h	/^KeLowerIrql(IN KIRQL NewIrql)$/;"	f
KeMemoryBarrier	.\ddk\wdm.h	/^KeMemoryBarrier(VOID)$/;"	f
KeRaiseIrqlToDpcLevel	.\ddk\wdm.h	/^KeRaiseIrqlToDpcLevel(VOID)$/;"	f
KeRaiseIrqlToSynchLevel	.\ddk\wdm.h	/^KeRaiseIrqlToSynchLevel(VOID)$/;"	f
KfRaiseIrql	.\ddk\wdm.h	/^KfRaiseIrql(IN KIRQL NewIrql)$/;"	f
KsDeviceGetFirstChildFilterFactory	.\ks.h	/^__forceinline PKSFILTERFACTORY KsDeviceGetFirstChildFilterFactory (PKSDEVICE Device)$/;"	f
KsDeviceGetOuterUnknown	.\ks.h	/^__forceinline PUNKNOWN KsDeviceGetOuterUnknown (PKSDEVICE Device)$/;"	f
KsDeviceRegisterAggregatedClientUnknown	.\ks.h	/^__forceinline PUNKNOWN KsDeviceRegisterAggregatedClientUnknown$/;"	f
KsFilterAcquireControl	.\ks.h	/^__forceinline void KsFilterAcquireControl (PKSFILTER Filter)$/;"	f
KsFilterAddEvent	.\ks.h	/^__forceinline void KsFilterAddEvent (PKSFILTER Filter, PKSEVENT_ENTRY EventEntry)$/;"	f
KsFilterFactoryGetDevice	.\ks.h	/^__forceinline PKSDEVICE KsFilterFactoryGetDevice (PKSFILTERFACTORY FilterFactory)$/;"	f
KsFilterFactoryGetFirstChildFilter	.\ks.h	/^__forceinline PKSFILTER KsFilterFactoryGetFirstChildFilter (PKSFILTERFACTORY FilterFactory)$/;"	f
KsFilterFactoryGetNextSiblingFilterFactory	.\ks.h	/^__forceinline PKSFILTERFACTORY KsFilterFactoryGetNextSiblingFilterFactory$/;"	f
KsFilterFactoryGetOuterUnknown	.\ks.h	/^__forceinline PUNKNOWN KsFilterFactoryGetOuterUnknown (PKSFILTERFACTORY FilterFactory)$/;"	f
KsFilterFactoryGetParentDevice	.\ks.h	/^__forceinline PKSDEVICE KsFilterFactoryGetParentDevice (PKSFILTERFACTORY FilterFactory)$/;"	f
KsFilterFactoryRegisterAggregatedClientUnknown	.\ks.h	/^__forceinline PUNKNOWN KsFilterFactoryRegisterAggregatedClientUnknown$/;"	f
KsFilterGenerateEvents	.\ks.h	/^__forceinline void KsFilterGenerateEvents$/;"	f
KsFilterGetDevice	.\ks.h	/^__forceinline PKSDEVICE KsFilterGetDevice (PKSFILTER Filter)$/;"	f
KsFilterGetNextSiblingFilter	.\ks.h	/^__forceinline PKSFILTER KsFilterGetNextSiblingFilter (PKSFILTER Filter)$/;"	f
KsFilterGetOuterUnknown	.\ks.h	/^__forceinline PUNKNOWN KsFilterGetOuterUnknown (PKSFILTER Filter)$/;"	f
KsFilterGetParentFilterFactory	.\ks.h	/^__forceinline PKSFILTERFACTORY KsFilterGetParentFilterFactory (PKSFILTER Filter)$/;"	f
KsFilterRegisterAggregatedClientUnknown	.\ks.h	/^__forceinline PUNKNOWN KsFilterRegisterAggregatedClientUnknown$/;"	f
KsFilterReleaseControl	.\ks.h	/^__forceinline void KsFilterReleaseControl (PKSFILTER Filter)$/;"	f
KsGateAddOffInputToAnd	.\ks.h	/^__forceinline void KsGateAddOffInputToAnd (PKSGATE AndGate)$/;"	f
KsGateAddOffInputToOr	.\ks.h	/^__forceinline void KsGateAddOffInputToOr (PKSGATE OrGate)$/;"	f
KsGateAddOnInputToAnd	.\ks.h	/^__forceinline void KsGateAddOnInputToAnd (PKSGATE AndGate)$/;"	f
KsGateAddOnInputToOr	.\ks.h	/^__forceinline void KsGateAddOnInputToOr (PKSGATE OrGate)$/;"	f
KsGateCaptureThreshold	.\ks.h	/^__forceinline BOOLEAN KsGateCaptureThreshold (PKSGATE Gate)$/;"	f
KsGateGetStateUnsafe	.\ks.h	/^__forceinline BOOLEAN KsGateGetStateUnsafe (PKSGATE Gate)$/;"	f
KsGateInitialize	.\ks.h	/^__forceinline void KsGateInitialize (PKSGATE Gate, LONG InitialCount,$/;"	f
KsGateInitializeAnd	.\ks.h	/^__forceinline void KsGateInitializeAnd (PKSGATE AndGate, PKSGATE NextOrGate)$/;"	f
KsGateInitializeOr	.\ks.h	/^__forceinline void KsGateInitializeOr (PKSGATE OrGate, PKSGATE NextAndGate)$/;"	f
KsGateRemoveOffInputFromAnd	.\ks.h	/^__forceinline void KsGateRemoveOffInputFromAnd (PKSGATE AndGate)$/;"	f
KsGateRemoveOffInputFromOr	.\ks.h	/^__forceinline void KsGateRemoveOffInputFromOr (PKSGATE OrGate)$/;"	f
KsGateRemoveOnInputFromAnd	.\ks.h	/^__forceinline void KsGateRemoveOnInputFromAnd (PKSGATE AndGate)$/;"	f
KsGateRemoveOnInputFromOr	.\ks.h	/^__forceinline void KsGateRemoveOnInputFromOr (PKSGATE OrGate)$/;"	f
KsGateTerminateAnd	.\ks.h	/^__forceinline void KsGateTerminateAnd (PKSGATE AndGate)$/;"	f
KsGateTerminateOr	.\ks.h	/^__forceinline void KsGateTerminateOr (PKSGATE OrGate)$/;"	f
KsGateTurnInputOff	.\ks.h	/^__forceinline void KsGateTurnInputOff (PKSGATE Gate)$/;"	f
KsGateTurnInputOn	.\ks.h	/^__forceinline void KsGateTurnInputOn (PKSGATE Gate)$/;"	f
KsGetFilterFromFileObject	.\ks.h	/^__forceinline PKSFILTER KsGetFilterFromFileObject (PFILE_OBJECT FileObject)$/;"	f
KsGetPinFromFileObject	.\ks.h	/^__forceinline PKSPIN KsGetPinFromFileObject (PFILE_OBJECT FileObject)$/;"	f
KsPinAcquireControl	.\ks.h	/^__forceinline void KsPinAcquireControl (PKSPIN Pin)$/;"	f
KsPinAddEvent	.\ks.h	/^__forceinline void KsPinAddEvent (PKSPIN Pin, PKSEVENT_ENTRY EventEntry)$/;"	f
KsPinGenerateEvents	.\ks.h	/^__forceinline void KsPinGenerateEvents$/;"	f
KsPinGetDevice	.\ks.h	/^__forceinline PKSDEVICE KsPinGetDevice (PKSPIN Pin)$/;"	f
KsPinGetOuterUnknown	.\ks.h	/^__forceinline PUNKNOWN KsPinGetOuterUnknown (PKSPIN Pin)$/;"	f
KsPinRegisterAggregatedClientUnknown	.\ks.h	/^__forceinline PUNKNOWN KsPinRegisterAggregatedClientUnknown$/;"	f
KsPinReleaseControl	.\ks.h	/^__forceinline void KsPinReleaseControl (PKSPIN Pin)$/;"	f
LayerParameters	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_LAYER_PARAMETERS LayerParameters($/;"	f	namespace:D2D1
LayerParameters1	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_LAYER_PARAMETERS1 LayerParameters1(CONST D2D1_RECT_F &contentBounds = D2D1::InfiniteRect(),$/;"	f	namespace:D2D1
Leave	.\stllock.h	/^  void Leave() { LeaveCriticalSection(this); }$/;"	f	class:CCritSec
Length	.\comutil.h	/^inline unsigned int _bstr_t::Data_t::Length() const throw() { return m_wstr ? ::SysStringLen(m_wstr) : 0; }$/;"	f	class:_bstr_t::Data_t
LinearGradientBrush	.\gdiplus\gdiplusbrush.h	/^	LinearGradientBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:LinearGradientBrush
LinearGradientBrush	.\gdiplus\gdiplusbrush.h	/^	LinearGradientBrush(const Point& point1, const Point& point2,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	.\gdiplus\gdiplusbrush.h	/^	LinearGradientBrush(const PointF& point1, const PointF& point2,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	.\gdiplus\gdiplusbrush.h	/^	LinearGradientBrush(const Rect& rect, const Color& color1,$/;"	f	class:LinearGradientBrush
LinearGradientBrush	.\gdiplus\gdiplusbrush.h	/^	LinearGradientBrush(const RectF& rect, const Color& color1,$/;"	f	class:LinearGradientBrush
LinearGradientBrushProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES LinearGradientBrushProperties(const D2D1_POINT_2F &startPoint, const D2D1_POINT_2F &endPoint) {$/;"	f	namespace:D2D1
LoadModule	.\dbgeng.h	/^  STDMETHOD(LoadModule)(THIS_ ULONG64 ImageFileHandle,ULONG64 BaseOffset,ULONG ModuleSize,PCSTR ModuleName,PCSTR ImageName,ULONG CheckSum,ULONG TimeDateStamp) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
Lock	.\msputils.h	/^  void Lock() { EnterCriticalSection(&m_CritSec); }$/;"	f	class:CMSPCritSection
LockBits	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::LockBits(const Rect *rect, UINT flags,$/;"	f	class:Bitmap
LongToHandle	.\basetsd.h	/^  static __inline void *LongToHandle (const __LONG32 h) { return ((void *) (INT_PTR) h); }$/;"	f
LongToPtr	.\basetsd.h	/^  static __inline void *LongToPtr (const __LONG32 l) { return ((void *) (LONG_PTR)l); }$/;"	f
Lookup	.\dxtmpl.h	/^WINBOOL CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::Lookup(ARG_KEY key,VALUE& rValue) const {$/;"	f	class:CDXMap
M128	.\dvec.h	/^  M128() { }$/;"	f	class:M128
M128	.\dvec.h	/^  M128(__m128i mm) { vec = mm; }$/;"	f	class:M128
M64	.\ivec.h	/^    M64() {}$/;"	f	class:M64
M64	.\ivec.h	/^    M64(__int64 mm) { _MM_QW = mm; }$/;"	f	class:M64
M64	.\ivec.h	/^    M64(__m64 mm) { vec = mm; }$/;"	f	class:M64
M64	.\ivec.h	/^    M64(int i) { vec = _m_from_int(i); }$/;"	f	class:M64
MBLOB_TABLE_SIZE	.\netmon.h	/^  static __inline DWORD MBLOB_TABLE_SIZE(DWORD dwNumBlobs) { return (DWORD) (sizeof(MBLOB_TABLE)+dwNumBlobs*sizeof(MBLOB)); }$/;"	f
MSPAddRefHelper	.\msputils.h	/^template <class T> ULONG MSPAddRefHelper (T *pMyThis) {$/;"	f
MSPReleaseHelper	.\msputils.h	/^template <class T> ULONG MSPReleaseHelper (T *pMyThis) {$/;"	f
MULTI_GRAPH_EVENT_DATA	.\mspcall.h	/^  MULTI_GRAPH_EVENT_DATA() : pIMediaEvent(NULL),pITStream(NULL),lEventCode(0),lParam1(0),lParam2(0) { }$/;"	f	struct:MULTI_GRAPH_EVENT_DATA
MakeARGB	.\gdiplus\gdipluscolor.h	/^	static ARGB MakeARGB(BYTE a, BYTE r, BYTE g, BYTE b)$/;"	f	struct:Color
MakeEmpty	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::MakeEmpty()$/;"	f	class:Region
MakeInfinite	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::MakeInfinite()$/;"	f	class:Region
Matrix	.\gdiplus\gdiplusmatrix.h	/^	Matrix(): nativeMatrix(NULL), lastStatus(Ok)$/;"	f	class:Matrix
Matrix	.\gdiplus\gdiplusmatrix.h	/^	Matrix(GpMatrix *matrix, Status status):$/;"	f	class:Matrix
Matrix	.\gdiplus\gdiplusmatrix.h	/^	Matrix(REAL m11, REAL m12, REAL m21, REAL m22, REAL dx, REAL dy):$/;"	f	class:Matrix
Matrix	.\gdiplus\gdiplusmatrix.h	/^	Matrix(const Rect& rect, const Point *dstplg):$/;"	f	class:Matrix
Matrix	.\gdiplus\gdiplusmatrix.h	/^	Matrix(const RectF& rect, const PointF *dstplg):$/;"	f	class:Matrix
Matrix3x2F	.\d2d1helper.h	/^    D2D1FORCEINLINE Matrix3x2F() {}$/;"	f	class:D2D1::Matrix3x2F
Matrix3x2F	.\d2d1helper.h	/^    D2D1FORCEINLINE Matrix3x2F(FLOAT __11, FLOAT __12, FLOAT __21, FLOAT __22, FLOAT __31, FLOAT __32) {$/;"	f	class:D2D1::Matrix3x2F
Matrix5x4F	.\d2d1_1helper.h	/^        inline Matrix5x4F($/;"	f	class:D2D1::Matrix5x4F
Matrix5x4F	.\d2d1_1helper.h	/^        inline Matrix5x4F() {$/;"	f	class:D2D1::Matrix5x4F
MeasureCharacterRanges	.\gdiplus\gdiplusgraphics.h	/^	Status MeasureCharacterRanges(const WCHAR *string, INT length,$/;"	f	class:Graphics
MeasureDriverString	.\gdiplus\gdiplusgraphics.h	/^	Status MeasureDriverString(const UINT16 *text, INT length,$/;"	f	class:Graphics
MeasureString	.\gdiplus\gdiplusgraphics.h	/^	Status MeasureString(const WCHAR *string, INT length,$/;"	f	class:Graphics
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(GpImage *image, Status status): Image(image, status) {}$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, EmfType type = EmfTypeEmfPlusDual,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, const Rect& frameRect,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(HDC referenceHdc, const RectF& frameRect,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(HENHMETAFILE hEmf, BOOL deleteEmf = FALSE): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(HMETAFILE hWmf,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(IStream *stream): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc, const Rect& frameRect,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc, const RectF& frameRect,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(IStream *stream, HDC referenceHdc,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename): Image(NULL, Ok)$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename, HDC referenceHdc,$/;"	f	class:Metafile
Metafile	.\gdiplus\gdiplusmetafile.h	/^	Metafile(const WCHAR *filename,$/;"	f	class:Metafile
Multiply	.\gdiplus\gdiplusmatrix.h	/^	Status Multiply(const Matrix *matrix,$/;"	f	class:Matrix
MultiplyExtract128	.\winnt.h	/^    __CRT_INLINE LONG64 MultiplyExtract128(LONG64 Multiplier,LONG64 Multiplicand,BYTE Shift) {$/;"	f
MultiplyTransform	.\gdiplus\gdiplusbrush.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:LinearGradientBrush
MultiplyTransform	.\gdiplus\gdiplusbrush.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:TextureBrush
MultiplyTransform	.\gdiplus\gdiplusgraphics.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:Graphics
MultiplyTransform	.\gdiplus\gdipluspath.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:PathGradientBrush
MultiplyTransform	.\gdiplus\gdipluspen.h	/^	Status MultiplyTransform(const Matrix *matrix,$/;"	f	class:Pen
NMERR_TO_HRESULT	.\netmon.h	/^  INLINE HRESULT NMERR_TO_HRESULT(DWORD nmerror) {$/;"	f
NdisQueryPacket	.\ddk\ndis.h	/^NdisQueryPacket($/;"	f
NewAssoc	.\dxtmpl.h	/^CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::NewAssoc() {$/;"	f	class:CDXMap
NewNode	.\dxtmpl.h	/^CDXList<TYPE,ARG_TYPE>::NewNode(CNode *pPrev,CNode *pNext) {$/;"	f	class:CDXList
Next	.\mspenum.h	/^  STDMETHOD(Next)(ULONG celt,T *rgelt,ULONG *pceltFetched) {$/;"	f	class:CSafeComEnum
NextMarker	.\gdiplus\gdipluspath.h	/^	INT NextMarker(GraphicsPath *path)$/;"	f	class:GraphicsPathIterator
NextMarker	.\gdiplus\gdipluspath.h	/^	INT NextMarker(INT *startIndex, INT *endIndex)$/;"	f	class:GraphicsPathIterator
NextPathType	.\gdiplus\gdipluspath.h	/^	INT NextPathType(BYTE *pathType, INT *startIndex, INT *endIndex)$/;"	f	class:GraphicsPathIterator
NextSubpath	.\gdiplus\gdipluspath.h	/^	INT NextSubpath(GraphicsPath *path, BOOL *isClosed)$/;"	f	class:GraphicsPathIterator
NextSubpath	.\gdiplus\gdipluspath.h	/^	INT NextSubpath(INT *startIndex, INT *endIndex, BOOL *isClosed)$/;"	f	class:GraphicsPathIterator
NtCurrentTeb	.\winnt.h	/^    FORCEINLINE struct _TEB *NtCurrentTeb(VOID) { return (struct _TEB *)__readgsqword(FIELD_OFFSET(NT_TIB,Self)); }$/;"	f
NtCurrentTeb	.\winnt.h	/^    FORCEINLINE struct _TEB *NtCurrentTeb(VOID) { struct _TEB *teb;$/;"	f
NtCurrentTeb	.\winnt.h	/^  FORCEINLINE struct _TEB *NtCurrentTeb(void)$/;"	f
ObjectTypeIsValid	.\gdiplus\gdiplusenums.h	/^static __inline__ BOOL ObjectTypeIsValid(ObjectType type)$/;"	f
Offset	.\gdiplus\gdiplustypes.h	/^	VOID Offset(INT dx, INT dy) {$/;"	f	struct:Rect
Offset	.\gdiplus\gdiplustypes.h	/^	VOID Offset(REAL dx, REAL dy) {$/;"	f	struct:RectF
Offset	.\gdiplus\gdiplustypes.h	/^	VOID Offset(const Point& point) {$/;"	f	struct:Rect
Offset	.\gdiplus\gdiplustypes.h	/^	VOID Offset(const PointF& point) {$/;"	f	struct:RectF
OffsetX	.\gdiplus\gdiplusmatrix.h	/^	REAL OffsetX() const$/;"	f	class:Matrix
OffsetY	.\gdiplus\gdiplusmatrix.h	/^	REAL OffsetY() const$/;"	f	class:Matrix
OpenNamespace	.\wmiatlprov.h	/^    HRESULT WINAPI OpenNamespace(const BSTR Namespace,__LONG32 lFlags,IWbemContext *pCtx,IWbemServices **ppWorkingNamespace,IWbemCallResult **ppResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
OpenNamespace	.\wmiatlprov.h	/^    virtual HRESULT WINAPI OpenNamespace(const BSTR strNamespace,__LONG32 lFlags,IWbemContext *pCtx,IWbemServices **ppWorkingNamespace,IWbemCallResult **ppResult){return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
Outline	.\gdiplus\gdipluspath.h	/^	Status Outline(const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
PMSIHANDLE	.\msi.h	/^  PMSIHANDLE():m_h(0){}$/;"	f	class:PMSIHANDLE
PMSIHANDLE	.\msi.h	/^  PMSIHANDLE(MSIHANDLE h):m_h(h) { }$/;"	f	class:PMSIHANDLE
PORT_ALLOCATED_SENSE	.\ddk\classpnp.h	/^PORT_ALLOCATED_SENSE($/;"	f
PathCchFindExtension	.\pathcch.h	/^  __CRT_INLINE HRESULT PathCchFindExtension (PWSTR path, size_t n, PWSTR *pext) {$/;"	f
PathCchSkipRoot	.\pathcch.h	/^  __CRT_INLINE HRESULT PathCchSkipRoot (PWSTR path, PWSTR *prootend) {$/;"	f
PathData	.\gdiplus\gdiplustypes.h	/^	PathData(): Count(0), Points(NULL), Types(NULL) {}$/;"	f	struct:PathData
PathGradientBrush	.\gdiplus\gdipluspath.h	/^	PathGradientBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:PathGradientBrush
PathGradientBrush	.\gdiplus\gdipluspath.h	/^	PathGradientBrush(const GraphicsPath *path)$/;"	f	class:PathGradientBrush
PathGradientBrush	.\gdiplus\gdipluspath.h	/^	PathGradientBrush(const Point *points, INT count,$/;"	f	class:PathGradientBrush
PathGradientBrush	.\gdiplus\gdipluspath.h	/^	PathGradientBrush(const PointF *points, INT count,$/;"	f	class:PathGradientBrush
PathIsUNCEx	.\pathcch.h	/^  __CRT_INLINE WINBOOL PathIsUNCEx (PWSTR path, PWSTR *pserver) {$/;"	f
Pen	.\gdiplus\gdipluspen.h	/^	Pen(GpPen *pen, Status status): nativePen(pen), lastStatus(status) {}$/;"	f	class:Pen
Pen	.\gdiplus\gdipluspen.h	/^	Pen(const Brush *brush, REAL width = 1.0f):$/;"	f	class:Pen
Pen	.\gdiplus\gdipluspen.h	/^	Pen(const Color& color, REAL width = 1.0f):$/;"	f	class:Pen
PixelFormat	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_PIXEL_FORMAT PixelFormat($/;"	f	namespace:D2D1
PlayRecord	.\gdiplus\gdiplusmetafile.h	/^	Status PlayRecord(EmfPlusRecordType recordType, UINT flags,$/;"	f	class:Metafile
Point	.\gdiplus\gdiplustypes.h	/^	Point(): X(0), Y(0) {}$/;"	f	struct:Point
Point	.\gdiplus\gdiplustypes.h	/^	Point(INT x, INT y): X(x), Y(y) {}$/;"	f	struct:Point
Point	.\gdiplus\gdiplustypes.h	/^	Point(const Point& point): X(point.X), Y(point.Y) {}$/;"	f	struct:Point
Point	.\gdiplus\gdiplustypes.h	/^	Point(const Size& size): X(size.Width), Y(size.Height) {}$/;"	f	struct:Point
Point2	.\d2d1helper.h	/^template<typename T> D2D1FORCEINLINE typename TypeTraits<T>::Point Point2(T x, T y) {$/;"	f	namespace:D2D1
Point2F	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_POINT_2F Point2F(FLOAT x = 0.f, FLOAT y = 0.f) {$/;"	f	namespace:D2D1
Point2L	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_POINT_2L Point2L(INT32 x = 0, INT32 y = 0) {$/;"	f	namespace:D2D1
Point2U	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_POINT_2U Point2U(UINT32 x = 0, UINT32 y = 0) {$/;"	f	namespace:D2D1
PointF	.\gdiplus\gdiplustypes.h	/^	PointF(): X(0.0f), Y(0.0f) {}$/;"	f	struct:PointF
PointF	.\gdiplus\gdiplustypes.h	/^	PointF(REAL x, REAL y): X(x), Y(y) {}$/;"	f	struct:PointF
PointF	.\gdiplus\gdiplustypes.h	/^	PointF(const PointF& point): X(point.X), Y(point.Y) {}$/;"	f	struct:PointF
PointF	.\gdiplus\gdiplustypes.h	/^	PointF(const SizeF& size): X(size.Width), Y(size.Height) {}$/;"	f	struct:PointF
PopEntryList	.\ddk\wdm.h	/^PopEntryList($/;"	f
PrivateFontCollection	.\gdiplus\gdiplusimpl.h	/^__inline__ PrivateFontCollection::PrivateFontCollection()$/;"	f	class:PrivateFontCollection
Probe_GetDiskFreeSpaceEx	.\newapis.h	/^  static WINBOOL WINAPI Probe_GetDiskFreeSpaceEx(LPCTSTR ptszRoot,PULARGE_INTEGER pliQuota,PULARGE_INTEGER pliTotal,PULARGE_INTEGER pliFree) {$/;"	f
PropVariantInit	.\propidl.h	/^inline void PropVariantInit (PROPVARIANT *pvar) { memset (pvar, 0, sizeof (PROPVARIANT)); }$/;"	f
PsGetCurrentThread	.\ddk\wdm.h	/^PsGetCurrentThread(VOID)$/;"	f
Ptr32ToPtr	.\basetsd.h	/^  static __inline void *Ptr32ToPtr (const void *POINTER_32 p) { return ((void *) (ULONG_PTR) (unsigned __LONG32) (ULONG_PTR) p); }$/;"	f
Ptr64ToPtr	.\basetsd.h	/^  static __inline void *Ptr64ToPtr (const void *POINTER_64 p) { return ((void *) (ULONG_PTR) p); }$/;"	f
PtrToInt	.\basetsd.h	/^  static __inline int PtrToInt (const void *p) { return ((int) (INT_PTR) p); }$/;"	f
PtrToLong	.\basetsd.h	/^  static __inline __LONG32 PtrToLong (const void *p) { return ((__LONG32) (LONG_PTR) p); }$/;"	f
PtrToPtr32	.\basetsd.h	/^  static __inline void *POINTER_32 PtrToPtr32 (const void *p) { return ((void *POINTER_32) (ULONG_PTR) (unsigned __LONG32) (ULONG_PTR) p); }$/;"	f
PtrToPtr64	.\basetsd.h	/^  static __inline void *POINTER_64 PtrToPtr64 (const void *p) { return ((void *POINTER_64) (ULONG_PTR) p); }$/;"	f
PtrToShort	.\basetsd.h	/^  static __inline short PtrToShort (const void *p) { return ((short) (__LONG32) (LONG_PTR) p); }$/;"	f
PtrToUint	.\basetsd.h	/^  static __inline unsigned int PtrToUint (const void *p) { return ((unsigned int) (UINT_PTR) p); }$/;"	f
PtrToUlong	.\basetsd.h	/^  static __inline unsigned __LONG32 PtrToUlong (const void *p) { return ((unsigned __LONG32) (ULONG_PTR) p); }$/;"	f
PtrToUshort	.\basetsd.h	/^  static __inline unsigned short PtrToUshort (const void *p) { return ((unsigned short) (unsigned __LONG32) (ULONG_PTR) p); }$/;"	f
PushEntryList	.\ddk\wdm.h	/^PushEntryList($/;"	f
PutClass	.\wmiatlprov.h	/^    HRESULT WINAPI PutClass(IWbemClassObject *pObject,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
PutClass	.\wmiatlprov.h	/^    virtual HRESULT WINAPI PutClass(IWbemClassObject *pObject,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult){return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
PutClassAsync	.\wmiatlprov.h	/^    HRESULT WINAPI PutClassAsync(IWbemClassObject *pObject,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
PutInstance	.\wmiatlprov.h	/^    HRESULT WINAPI PutInstance(IWbemClassObject *pInst,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
PutInstance	.\wmiatlprov.h	/^    virtual HRESULT WINAPI PutInstance(IWbemClassObject *pInst,__LONG32 lFlags,IWbemContext *pCtx,IWbemCallResult **ppCallResult){return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
PutInstanceAsync	.\wmiatlprov.h	/^    virtual HRESULT WINAPI PutInstanceAsync(IWbemClassObject *pInst,__LONG32 lFlags,IWbemContext *pCtx,IWbemObjectSink *pResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
QuadraticBezierSegment	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_QUADRATIC_BEZIER_SEGMENT QuadraticBezierSegment(const D2D1_POINT_2F &point1, const D2D1_POINT_2F &point2) {$/;"	f	namespace:D2D1
QueryInterface	.\comip.h	/^  template<typename _InterfaceType> HRESULT QueryInterface(const IID& iid,_InterfaceType **p) throw() { return QueryInterface(iid,*p); }$/;"	f	class:_com_ptr_t
QueryInterface	.\comip.h	/^  template<typename _InterfaceType> HRESULT QueryInterface(const IID& iid,_InterfaceType*& p) throw () {$/;"	f	class:_com_ptr_t
QueryInterface	.\dbgeng.h	/^  STDMETHOD(QueryInterface)(THIS_ REFIID InterfaceId,PVOID *Interface) {$/;"	f	class:DebugBaseEventCallbacks
QueryObjectSink	.\wmiatlprov.h	/^    HRESULT WINAPI QueryObjectSink(__LONG32 lFlags,IWbemObjectSink **ppResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemInstProviderImpl
QueryObjectSink	.\wmiatlprov.h	/^    virtual HRESULT WINAPI QueryObjectSink(__LONG32 lFlags,IWbemObjectSink **ppResponseHandler) {return WBEM_E_NOT_SUPPORTED;};$/;"	f	class:ATL::IWbemPullClassProviderImpl
QueryStdInterfaces	.\comip.h	/^  HRESULT QueryStdInterfaces(const _variant_t& varSrc) throw() {$/;"	f	class:_com_ptr_t
READ_PORT_BUFFER_UCHAR	.\ddk\wdm.h	/^READ_PORT_BUFFER_UCHAR($/;"	f
READ_PORT_BUFFER_ULONG	.\ddk\wdm.h	/^READ_PORT_BUFFER_ULONG($/;"	f
READ_PORT_BUFFER_USHORT	.\ddk\wdm.h	/^READ_PORT_BUFFER_USHORT($/;"	f
READ_PORT_UCHAR	.\ddk\wdm.h	/^READ_PORT_UCHAR($/;"	f
READ_PORT_ULONG	.\ddk\wdm.h	/^READ_PORT_ULONG($/;"	f
READ_PORT_USHORT	.\ddk\wdm.h	/^READ_PORT_USHORT($/;"	f
READ_REGISTER_BUFFER_UCHAR	.\ddk\wdm.h	/^READ_REGISTER_BUFFER_UCHAR($/;"	f
READ_REGISTER_BUFFER_ULONG	.\ddk\wdm.h	/^READ_REGISTER_BUFFER_ULONG($/;"	f
READ_REGISTER_BUFFER_USHORT	.\ddk\wdm.h	/^READ_REGISTER_BUFFER_USHORT($/;"	f
READ_REGISTER_UCHAR	.\ddk\wdm.h	/^READ_REGISTER_UCHAR($/;"	f
READ_REGISTER_ULONG	.\ddk\wdm.h	/^READ_REGISTER_ULONG($/;"	f
READ_REGISTER_USHORT	.\ddk\wdm.h	/^READ_REGISTER_USHORT($/;"	f
RadialGradientBrushProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES RadialGradientBrushProperties(const D2D1_POINT_2F &center, const D2D1_POINT_2F &gradientOriginOffset, FLOAT radiusX, FLOAT radiusY) {$/;"	f	namespace:D2D1
RaiseException	.\wrl\internal.h	/^            inline void DECLSPEC_NORETURN RaiseException(HRESULT hr, DWORD flags = EXCEPTION_NONCONTINUABLE) throw() {$/;"	f	namespace:Microsoft::WRL::Details
Rect	.\d2d1helper.h	/^template<typename T> D2D1FORCEINLINE typename TypeTraits<T>::Rect Rect(T left, T top, T right, T bottom) {$/;"	f	namespace:D2D1
Rect	.\gdiplus\gdiplustypes.h	/^	Rect(): X(0), Y(0), Width(0), Height(0) {}$/;"	f	struct:Rect
Rect	.\gdiplus\gdiplustypes.h	/^	Rect(INT x, INT y, INT width, INT height):$/;"	f	struct:Rect
Rect	.\gdiplus\gdiplustypes.h	/^	Rect(const Point& location, const Size& size):$/;"	f	struct:Rect
RectF	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_RECT_F RectF(FLOAT left = 0.0f, FLOAT top = 0.0f, FLOAT right = 0.0f, FLOAT bottom = 0.0f) {$/;"	f	namespace:D2D1
RectF	.\gdiplus\gdiplustypes.h	/^	RectF(): X(0.0f), Y(0.0f), Width(0.0f), Height(0.0f) {}$/;"	f	struct:RectF
RectF	.\gdiplus\gdiplustypes.h	/^	RectF(REAL x, REAL y, REAL width, REAL height):$/;"	f	struct:RectF
RectF	.\gdiplus\gdiplustypes.h	/^	RectF(const PointF& location, const SizeF& size):$/;"	f	struct:RectF
RectL	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_RECT_L RectL(INT32 left = 0.0f, INT32 top = 0.0f, INT32 right = 0.0f, INT32 bottom = 0.0f) {$/;"	f	namespace:D2D1
RectU	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_RECT_U RectU(UINT32 left = 0, UINT32 top = 0, UINT32 right = 0, UINT32 bottom = 0) {$/;"	f	namespace:D2D1
RefCount	.\comutil.h	/^inline unsigned __LONG32 _bstr_t::Data_t::RefCount() const throw() { return m_RefCount; }$/;"	f	class:_bstr_t::Data_t
Region	.\gdiplus\gdiplusheaders.h	/^	Region(GpRegion *region, Status status):$/;"	f	class:Region
Region	.\gdiplus\gdiplusimpl.h	/^__inline__ Region::Region(): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	.\gdiplus\gdiplusimpl.h	/^__inline__ Region::Region(HRGN hrgn): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	.\gdiplus\gdiplusimpl.h	/^__inline__ Region::Region(const BYTE *regionData, INT size):$/;"	f	class:Region
Region	.\gdiplus\gdiplusimpl.h	/^__inline__ Region::Region(const GraphicsPath *path):$/;"	f	class:Region
Region	.\gdiplus\gdiplusimpl.h	/^__inline__ Region::Region(const Rect& rect): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
Region	.\gdiplus\gdiplusimpl.h	/^__inline__ Region::Region(const RectF& rect): nativeRegion(NULL), lastStatus(Ok)$/;"	f	class:Region
ReinterpretBaseType	.\d2d1helper.h	/^    static inline Matrix3x2F *ReinterpretBaseType(D2D1_MATRIX_3X2_F *pMatrix) {$/;"	f	class:D2D1::Matrix3x2F
ReinterpretBaseType	.\d2d1helper.h	/^    static inline const Matrix3x2F *ReinterpretBaseType(const D2D1_MATRIX_3X2_F *pMatrix) {$/;"	f	class:D2D1::Matrix3x2F
Release	.\comip.h	/^  void Release() {$/;"	f	class:_com_ptr_t
Release	.\comutil.h	/^inline unsigned __LONG32 _bstr_t::Data_t::Release() throw() {$/;"	f	class:_bstr_t::Data_t
ReleaseAndGetAddressOf	.\wrl\client.h	/^                typename ComPtrRefBase<T>::InterfaceType **ReleaseAndGetAddressOf() throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRef
ReleaseAndGetAddressOf	.\wrl\client.h	/^            InterfaceType **ReleaseAndGetAddressOf() throw() {$/;"	f	class:Microsoft::WRL::ComPtr
ReleaseHDC	.\gdiplus\gdiplusgraphics.h	/^	VOID ReleaseHDC(HDC hdc)$/;"	f	class:Graphics
Remove	.\msputils.h	/^  WINBOOL Remove(T &t) {$/;"	f	class:CMSPArray
RemoveAll	.\dxtmpl.h	/^inline void CDXArray<TYPE,ARG_TYPE>::RemoveAll() { SetSize(0,-1); }$/;"	f	class:CDXArray
RemoveAll	.\dxtmpl.h	/^void CDXList<TYPE,ARG_TYPE>::RemoveAll() {$/;"	f	class:CDXList
RemoveAll	.\dxtmpl.h	/^void CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::RemoveAll() {$/;"	f	class:CDXMap
RemoveAll	.\msputils.h	/^  void RemoveAll() {$/;"	f	class:CMSPArray
RemoveAt	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::RemoveAt(int nIndex,int nCount) {$/;"	f	class:CDXArray
RemoveAt	.\dxtmpl.h	/^void CDXList<TYPE,ARG_TYPE>::RemoveAt(DXLISTPOS position) {$/;"	f	class:CDXList
RemoveAt	.\msputils.h	/^  WINBOOL RemoveAt(int nIndex) {$/;"	f	class:CMSPArray
RemoveEntryList	.\ddk\wdm.h	/^RemoveEntryList($/;"	f
RemoveHead	.\dxtmpl.h	/^TYPE CDXList<TYPE,ARG_TYPE>::RemoveHead() {$/;"	f	class:CDXList
RemoveHeadList	.\ddk\wdm.h	/^RemoveHeadList($/;"	f
RemoveKey	.\dxtmpl.h	/^WINBOOL CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::RemoveKey(ARG_KEY key) {$/;"	f	class:CDXMap
RemovePropertyItem	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::RemovePropertyItem(PROPID propId)$/;"	f	class:Image
RemoveTail	.\dxtmpl.h	/^TYPE CDXList<TYPE,ARG_TYPE>::RemoveTail() {$/;"	f	class:CDXList
RemoveTailList	.\ddk\wdm.h	/^RemoveTailList($/;"	f
RenderTargetProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_RENDER_TARGET_PROPERTIES RenderTargetProperties($/;"	f	namespace:D2D1
ResUtilGetMultiSzValue	.\resapi.h	/^  FORCEINLINE DWORD WINAPI_INLINE ResUtilGetMultiSzValue (HKEY hkeyClusterKey, LPCWSTR pszValueName, LPWSTR *ppszOutValue, LPDWORD pcbOutValueSize) {$/;"	f
Reset	.\gdiplus\gdiplusimageattributes.h	/^	Status Reset(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
Reset	.\gdiplus\gdiplusmatrix.h	/^	Status Reset()$/;"	f	class:Matrix
Reset	.\gdiplus\gdipluspath.h	/^	Status Reset()$/;"	f	class:GraphicsPath
Reset	.\wrl\client.h	/^            unsigned long Reset() {$/;"	f	class:Microsoft::WRL::ComPtr
ResetClip	.\gdiplus\gdiplusgraphics.h	/^	Status ResetClip()$/;"	f	class:Graphics
ResetTransform	.\gdiplus\gdiplusbrush.h	/^	Status ResetTransform()$/;"	f	class:LinearGradientBrush
ResetTransform	.\gdiplus\gdiplusbrush.h	/^	Status ResetTransform()$/;"	f	class:TextureBrush
ResetTransform	.\gdiplus\gdiplusgraphics.h	/^	Status ResetTransform()$/;"	f	class:Graphics
ResetTransform	.\gdiplus\gdipluspath.h	/^	Status ResetTransform()$/;"	f	class:PathGradientBrush
ResetTransform	.\gdiplus\gdipluspen.h	/^	Status ResetTransform()$/;"	f	class:Pen
Restore	.\gdiplus\gdiplusgraphics.h	/^	Status Restore(GraphicsState state)$/;"	f	class:Graphics
Reverse	.\gdiplus\gdipluspath.h	/^	Status Reverse()$/;"	f	class:GraphicsPath
Rewind	.\gdiplus\gdipluspath.h	/^	VOID Rewind()$/;"	f	class:GraphicsPathIterator
RoInitializeWrapper	.\wrl\wrappers\corewrappers.h	/^                RoInitializeWrapper(RO_INIT_TYPE flags) {$/;"	f	class:Microsoft::WRL::Wrappers::RoInitializeWrapper
Rotate	.\gdiplus\gdiplusmatrix.h	/^	Status Rotate(REAL angle, MatrixOrder order = MatrixOrderPrepend)$/;"	f	class:Matrix
RotateAt	.\gdiplus\gdiplusmatrix.h	/^	Status RotateAt(REAL angle, const PointF& center,$/;"	f	class:Matrix
RotateFlip	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::RotateFlip(RotateFlipType rotateFlipType)$/;"	f	class:Image
RotateTranform	.\gdiplus\gdiplusbrush.h	/^	Status RotateTranform(REAL angle, MatrixOrder order = MatrixOrderPrepend)$/;"	f	class:LinearGradientBrush
RotateTransform	.\gdiplus\gdiplusbrush.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:TextureBrush
RotateTransform	.\gdiplus\gdiplusgraphics.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:Graphics
RotateTransform	.\gdiplus\gdipluspath.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:PathGradientBrush
RotateTransform	.\gdiplus\gdipluspen.h	/^	Status RotateTransform(REAL angle,$/;"	f	class:Pen
Rotation	.\d2d1helper.h	/^    static D2D1FORCEINLINE Matrix3x2F Rotation(FLOAT angle, D2D1_POINT_2F center = D2D1::Point2F()) {$/;"	f	class:D2D1::Matrix3x2F
RoundedRect	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_ROUNDED_RECT RoundedRect(const D2D1_RECT_F &rect, FLOAT radiusX, FLOAT radiusY) {$/;"	f	namespace:D2D1
RtlActiveEnumeratorsHashTable	.\ddk\ntddk.h	/^RtlActiveEnumeratorsHashTable($/;"	f
RtlCheckBit	.\ddk\wdm.h	/^RtlCheckBit($/;"	f
RtlConvertLongToLargeInteger	.\ddk\wdm.h	/^RtlConvertLongToLargeInteger($/;"	f
RtlConvertLongToLuid	.\ddk\ntddk.h	/^RtlConvertLongToLuid($/;"	f
RtlConvertUlongToLargeInteger	.\ddk\wdm.h	/^RtlConvertUlongToLargeInteger($/;"	f
RtlConvertUlongToLuid	.\ddk\ntddk.h	/^RtlConvertUlongToLuid($/;"	f
RtlEmptyBucketsHashTable	.\ddk\ntddk.h	/^RtlEmptyBucketsHashTable($/;"	f
RtlEnlargedIntegerMultiply	.\ddk\wdm.h	/^RtlEnlargedIntegerMultiply($/;"	f
RtlEnlargedUnsignedDivide	.\ddk\wdm.h	/^RtlEnlargedUnsignedDivide($/;"	f
RtlEnlargedUnsignedMultiply	.\ddk\wdm.h	/^RtlEnlargedUnsignedMultiply($/;"	f
RtlExtendedIntegerMultiply	.\ddk\wdm.h	/^RtlExtendedIntegerMultiply($/;"	f
RtlExtendedLargeIntegerDivide	.\ddk\wdm.h	/^RtlExtendedLargeIntegerDivide($/;"	f
RtlExtendedMagicDivide	.\ddk\wdm.h	/^RtlExtendedMagicDivide($/;"	f
RtlFillMemoryUlong	.\ddk\ntifs.h	/^RtlFillMemoryUlong ($/;"	f
RtlInitEmptyAnsiString	.\ddk\wdm.h	/^RtlInitEmptyAnsiString($/;"	f
RtlInitEmptyUnicodeString	.\ddk\wdm.h	/^RtlInitEmptyUnicodeString($/;"	f
RtlInitHashTableContext	.\ddk\ntddk.h	/^RtlInitHashTableContext($/;"	f
RtlInitHashTableContextFromEnumerator	.\ddk\ntddk.h	/^RtlInitHashTableContextFromEnumerator($/;"	f
RtlLargeIntegerAdd	.\ddk\wdm.h	/^RtlLargeIntegerAdd($/;"	f
RtlLargeIntegerArithmeticShift	.\ddk\wdm.h	/^RtlLargeIntegerArithmeticShift($/;"	f
RtlLargeIntegerDivide	.\ddk\ntddk.h	/^RtlLargeIntegerDivide($/;"	f
RtlLargeIntegerNegate	.\ddk\wdm.h	/^RtlLargeIntegerNegate($/;"	f
RtlLargeIntegerShiftLeft	.\ddk\wdm.h	/^RtlLargeIntegerShiftLeft($/;"	f
RtlLargeIntegerShiftRight	.\ddk\wdm.h	/^RtlLargeIntegerShiftRight($/;"	f
RtlLargeIntegerSubtract	.\ddk\wdm.h	/^RtlLargeIntegerSubtract($/;"	f
RtlNonEmptyBucketsHashTable	.\ddk\ntddk.h	/^RtlNonEmptyBucketsHashTable($/;"	f
RtlReleaseHashTableContext	.\ddk\ntddk.h	/^RtlReleaseHashTableContext($/;"	f
RtlSecureZeroMemory	.\ddk\wdm.h	/^RtlSecureZeroMemory($/;"	f
RtlSecureZeroMemory	.\winnt.h	/^    __CRT_INLINE PVOID WINAPI RtlSecureZeroMemory(PVOID ptr,SIZE_T cnt) {$/;"	f
RtlStringCbCatExA	.\ddk\ntstrsafe.h	/^RtlStringCbCatExA(IN OUT LPSTR Destination,$/;"	f
RtlStringCbCopyA	.\ddk\ntstrsafe.h	/^RtlStringCbCopyA(OUT LPSTR Destination,$/;"	f
RtlStringCbCopyExA	.\ddk\ntstrsafe.h	/^RtlStringCbCopyExA(OUT LPSTR Destination,$/;"	f
RtlStringCbPrintfA	.\ddk\ntstrsafe.h	/^RtlStringCbPrintfA(OUT LPSTR Destination,$/;"	f
RtlStringCbPrintfExA	.\ddk\ntstrsafe.h	/^RtlStringCbPrintfExA(OUT LPSTR Destination,$/;"	f
RtlStringCbPrintfW	.\ddk\ntstrsafe.h	/^RtlStringCbPrintfW($/;"	f
RtlStringCchCopyA	.\ddk\ntstrsafe.h	/^RtlStringCchCopyA(IN LPSTR Destination,$/;"	f
RtlStringCopyWorkerA	.\ddk\ntstrsafe.h	/^RtlStringCopyWorkerA(OUT LPSTR Destination,$/;"	f
RtlStringExValidateDestA	.\ddk\ntstrsafe.h	/^RtlStringExValidateDestA(IN OUT LPSTR *Destination,$/;"	f
RtlStringExValidateSrcA	.\ddk\ntstrsafe.h	/^RtlStringExValidateSrcA(IN OUT LPCSTR *Source OPTIONAL,$/;"	f
RtlStringLengthWorkerA	.\ddk\ntstrsafe.h	/^RtlStringLengthWorkerA(IN LPCSTR String,$/;"	f
RtlStringVPrintfWorkerA	.\ddk\ntstrsafe.h	/^RtlStringVPrintfWorkerA(OUT LPSTR Destination,$/;"	f
RtlStringValidateDestA	.\ddk\ntstrsafe.h	/^RtlStringValidateDestA(IN LPSTR Destination,$/;"	f
RtlTotalBucketsHashTable	.\ddk\ntddk.h	/^RtlTotalBucketsHashTable($/;"	f
RtlTotalEntriesHashTable	.\ddk\ntddk.h	/^RtlTotalEntriesHashTable($/;"	f
SHAddFolderPathToLibrary	.\shobjidl.h	/^   __forceinline HRESULT SHAddFolderPathToLibrary(IShellLibrary *plib, PCWSTR pszFolderPath) {$/;"	f
SHCreateLibrary	.\shobjidl.h	/^  __forceinline HRESULT SHCreateLibrary(REFIID riid, void **ppv) {$/;"	f
SHLoadLibraryFromItem	.\shobjidl.h	/^  __forceinline HRESULT SHLoadLibraryFromItem(IShellItem *psiLibrary, DWORD grfMode, REFIID riid, void **ppv) {$/;"	f
SHLoadLibraryFromKnownFolder	.\shobjidl.h	/^  __forceinline HRESULT SHLoadLibraryFromKnownFolder(REFKNOWNFOLDERID kfidLibrary, DWORD grfMode, REFIID riid, void **ppv) {$/;"	f
SHLoadLibraryFromParsingName	.\shobjidl.h	/^  __forceinline HRESULT SHLoadLibraryFromParsingName(PCWSTR pszParsingName, DWORD grfMode, REFIID riid, void **ppv) {$/;"	f
SHRemoveFolderPathFromLibrary	.\shobjidl.h	/^  __forceinline HRESULT SHRemoveFolderPathFromLibrary(IShellLibrary *plib, PCWSTR pszFolderPath) {$/;"	f
SHResolveFolderPathInLibrary	.\shobjidl.h	/^  __forceinline HRESULT SHResolveFolderPathInLibrary(IShellLibrary *plib, PCWSTR pszFolderPath, DWORD dwTimeout, PWSTR *ppszResolvedPath) {$/;"	f
SHSaveLibraryInFolderPath	.\shobjidl.h	/^  __forceinline HRESULT SHSaveLibraryInFolderPath(IShellLibrary *plib, PCWSTR pszFolderPath, PCWSTR pszLibraryName, LIBRARYSAVEFLAGS lsf, PWSTR *ppszSavedToPath) {$/;"	f
Save	.\gdiplus\gdiplusgraphics.h	/^	GraphicsState Save() const$/;"	f	class:Graphics
Save	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::Save(IStream *stream, const CLSID *clsidEncoder,$/;"	f	class:Image
Save	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::Save(const WCHAR *filename, const CLSID *clsidEncoder,$/;"	f	class:Image
SaveAdd	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::SaveAdd(Image *newImage,$/;"	f	class:Image
SaveAdd	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::SaveAdd(const EncoderParameters *encoderParams)$/;"	f	class:Image
Scale	.\d2d1helper.h	/^    static D2D1FORCEINLINE Matrix3x2F Scale(D2D1_SIZE_F size, D2D1_POINT_2F center = D2D1::Point2F()) {$/;"	f	class:D2D1::Matrix3x2F
Scale	.\d2d1helper.h	/^    static D2D1FORCEINLINE Matrix3x2F Scale(FLOAT x, FLOAT y, D2D1_POINT_2F center = D2D1::Point2F()) {$/;"	f	class:D2D1::Matrix3x2F
Scale	.\gdiplus\gdiplusmatrix.h	/^	Status Scale(REAL scaleX, REAL scaleY,$/;"	f	class:Matrix
ScaleTransform	.\gdiplus\gdiplusbrush.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:LinearGradientBrush
ScaleTransform	.\gdiplus\gdiplusbrush.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:TextureBrush
ScaleTransform	.\gdiplus\gdiplusgraphics.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:Graphics
ScaleTransform	.\gdiplus\gdipluspath.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:PathGradientBrush
ScaleTransform	.\gdiplus\gdipluspen.h	/^	Status ScaleTransform(REAL sx, REAL sy,$/;"	f	class:Pen
SelectActiveFrame	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::SelectActiveFrame($/;"	f	class:Image
SessionStatus	.\dbgeng.h	/^  STDMETHOD(SessionStatus)(THIS_ ULONG Status) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
SetAbort	.\gdiplus\gdiplusgraphics.h	/^	VOID SetAbort()$/;"	f	class:Graphics
SetAbort	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::SetAbort(GdiplusAbort *pIAbort)$/;"	f	class:Image
SetAlignment	.\gdiplus\gdipluspen.h	/^	Status SetAlignment(PenAlignment penAlignment)$/;"	f	class:Pen
SetAlignment	.\gdiplus\gdiplusstringformat.h	/^	Status SetAlignment(StringAlignment align)$/;"	f	class:StringFormat
SetAt	.\dxtmpl.h	/^inline void CDXArray<TYPE,ARG_TYPE>::SetAt(int nIndex,ARG_TYPE newElement) { _ASSERT((nIndex >= 0 && nIndex < m_nSize)); m_pData[nIndex] = newElement; }$/;"	f	class:CDXArray
SetAt	.\dxtmpl.h	/^inline void CDXList<TYPE,ARG_TYPE>::SetAt(DXLISTPOS pos,ARG_TYPE newElement) {$/;"	f	class:CDXList
SetAt	.\dxtmpl.h	/^inline void CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::SetAt(ARG_KEY key,ARG_VALUE newValue) { (*this)[key] = newValue; }$/;"	f	class:CDXMap
SetAtGrow	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::SetAtGrow(int nIndex,ARG_TYPE newElement) {$/;"	f	class:CDXArray
SetAtIndex	.\msputils.h	/^  void SetAtIndex(int nIndex,T &t) {$/;"	f	class:CMSPArray
SetBaseCap	.\gdiplus\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetBaseCap(LineCap baseCap)$/;"	f	class:CustomLineCap
SetBaseInset	.\gdiplus\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetBaseInset(REAL inset)$/;"	f	class:CustomLineCap
SetBlend	.\gdiplus\gdiplusbrush.h	/^	Status SetBlend(const REAL *blendFactors,$/;"	f	class:LinearGradientBrush
SetBlend	.\gdiplus\gdipluspath.h	/^	Status SetBlend(REAL *blendFactors, REAL *blendPositions, INT count)$/;"	f	class:PathGradientBrush
SetBlendBellShape	.\gdiplus\gdiplusbrush.h	/^	Status SetBlendBellShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:LinearGradientBrush
SetBlendBellShape	.\gdiplus\gdipluspath.h	/^	Status SetBlendBellShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:PathGradientBrush
SetBlendTriangularShape	.\gdiplus\gdiplusbrush.h	/^	Status SetBlendTriangularShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:LinearGradientBrush
SetBlendTriangularShape	.\gdiplus\gdipluspath.h	/^	Status SetBlendTriangularShape(REAL focus, REAL scale = 1.0f)$/;"	f	class:PathGradientBrush
SetBrush	.\gdiplus\gdipluspen.h	/^	Status SetBrush(const Brush *brush)$/;"	f	class:Pen
SetBrushRemapTable	.\gdiplus\gdiplusimageattributes.h	/^	Status SetBrushRemapTable(UINT mapSize, ColorMap *map)$/;"	f	class:ImageAttributes
SetCenterColor	.\gdiplus\gdipluspath.h	/^	Status SetCenterColor(const Color& color)$/;"	f	class:PathGradientBrush
SetCenterPoint	.\gdiplus\gdipluspath.h	/^	Status SetCenterPoint(const Point& point)$/;"	f	class:PathGradientBrush
SetCenterPoint	.\gdiplus\gdipluspath.h	/^	Status SetCenterPoint(const PointF& point)$/;"	f	class:PathGradientBrush
SetClip	.\gdiplus\gdiplusgraphics.h	/^	Status SetClip(HRGN hRgn, CombineMode combineMode = CombineModeReplace)$/;"	f	class:Graphics
SetClip	.\gdiplus\gdiplusgraphics.h	/^	Status SetClip(const Graphics *g,$/;"	f	class:Graphics
SetClip	.\gdiplus\gdiplusgraphics.h	/^	Status SetClip(const GraphicsPath *path,$/;"	f	class:Graphics
SetClip	.\gdiplus\gdiplusgraphics.h	/^	Status SetClip(const Rect& rect,$/;"	f	class:Graphics
SetClip	.\gdiplus\gdiplusgraphics.h	/^	Status SetClip(const RectF& rect,$/;"	f	class:Graphics
SetClip	.\gdiplus\gdiplusgraphics.h	/^	Status SetClip(const Region *region,$/;"	f	class:Graphics
SetColor	.\gdiplus\gdiplusbrush.h	/^	Status SetColor(const Color& color)$/;"	f	class:SolidBrush
SetColor	.\gdiplus\gdipluspen.h	/^	Status SetColor(const Color& color)$/;"	f	class:Pen
SetColorKey	.\gdiplus\gdiplusimageattributes.h	/^	Status SetColorKey(const Color& colorLow, const Color& colorHigh,$/;"	f	class:ImageAttributes
SetColorMatrices	.\gdiplus\gdiplusimageattributes.h	/^	Status SetColorMatrices(const ColorMatrix *colorMatrix,$/;"	f	class:ImageAttributes
SetColorMatrix	.\gdiplus\gdiplusimageattributes.h	/^	Status SetColorMatrix(const ColorMatrix *colorMatrix,$/;"	f	class:ImageAttributes
SetCompositingMode	.\gdiplus\gdiplusgraphics.h	/^	Status SetCompositingMode(CompositingMode compositingMode)$/;"	f	class:Graphics
SetCompositingQuality	.\gdiplus\gdiplusgraphics.h	/^	Status SetCompositingQuality(CompositingQuality compositingQuality)$/;"	f	class:Graphics
SetCompoundArray	.\gdiplus\gdipluspen.h	/^	Status SetCompoundArray(const REAL *compoundArray, INT count)$/;"	f	class:Pen
SetContractDelegateWindow	.\shobjidl.h	/^  __forceinline void SetContractDelegateWindow(HWND hwndSource, HWND hwndDelegate) {$/;"	f
SetCustomEndCap	.\gdiplus\gdipluspen.h	/^	Status SetCustomEndCap(const CustomLineCap *customCap)$/;"	f	class:Pen
SetCustomStartCap	.\gdiplus\gdipluspen.h	/^	Status SetCustomStartCap(const CustomLineCap *customCap)$/;"	f	class:Pen
SetDBEngine	.\_dbdao.h	/^  VOID SetDBEngine(DAODBEngine *peng){pDBEng = peng;}$/;"	f	class:CdbWorkspaces
SetDashCap	.\gdiplus\gdipluspen.h	/^	Status SetDashCap(DashCap dashCap)$/;"	f	class:Pen
SetDashOffset	.\gdiplus\gdipluspen.h	/^	Status SetDashOffset(REAL dashOffset)$/;"	f	class:Pen
SetDashPattern	.\gdiplus\gdipluspen.h	/^	Status SetDashPattern(const REAL *dashArray, INT count)$/;"	f	class:Pen
SetDashStyle	.\gdiplus\gdipluspen.h	/^	Status SetDashStyle(DashStyle dashStyle)$/;"	f	class:Pen
SetDigitSubstitution	.\gdiplus\gdiplusstringformat.h	/^	Status SetDigitSubstitution(LANGID language,$/;"	f	class:StringFormat
SetDownLevelRasterizationLimit	.\gdiplus\gdiplusmetafile.h	/^	Status SetDownLevelRasterizationLimit(UINT limitDpi)$/;"	f	class:Metafile
SetElements	.\gdiplus\gdiplusmatrix.h	/^	Status SetElements(REAL m11, REAL m12, REAL m21, REAL m22,$/;"	f	class:Matrix
SetEndCap	.\gdiplus\gdipluspen.h	/^	Status SetEndCap(LineCap endCap)$/;"	f	class:Pen
SetError	.\parser.h	/^  DWORD SetError (DWORD dw) { m_dwError = dw; return m_dwError; }$/;"	f	class:CParseXML
SetFillMode	.\gdiplus\gdipluspath.h	/^	Status SetFillMode(FillMode fillMode)$/;"	f	class:GraphicsPath
SetFillState	.\gdiplus\gdipluslinecaps.h	/^	Status SetFillState(BOOL isFilled)$/;"	f	class:AdjustableArrowCap
SetFocusScales	.\gdiplus\gdipluspath.h	/^	Status SetFocusScales(REAL xScale, REAL yScale)$/;"	f	class:PathGradientBrush
SetFormatFlags	.\gdiplus\gdiplusstringformat.h	/^	Status SetFormatFlags(INT flags)$/;"	f	class:StringFormat
SetFromCOLORREF	.\gdiplus\gdipluscolor.h	/^	VOID SetFromCOLORREF(COLORREF rgb)$/;"	f	struct:Color
SetGamma	.\gdiplus\gdiplusimageattributes.h	/^	Status SetGamma(REAL gamma,$/;"	f	class:ImageAttributes
SetGammaCorrection	.\gdiplus\gdiplusbrush.h	/^	Status SetGammaCorrection(BOOL useGammaCorrection)$/;"	f	class:LinearGradientBrush
SetGammaCorrection	.\gdiplus\gdipluspath.h	/^	Status SetGammaCorrection(BOOL useGammaCorrection)$/;"	f	class:PathGradientBrush
SetHeight	.\gdiplus\gdipluslinecaps.h	/^	Status SetHeight(REAL height)$/;"	f	class:AdjustableArrowCap
SetHotkeyPrefix	.\gdiplus\gdiplusstringformat.h	/^	Status SetHotkeyPrefix(HotkeyPrefix hotkeyPrefix)$/;"	f	class:StringFormat
SetInterfaceSafetyOptions	.\msputils.h	/^  STDMETHOD(SetInterfaceSafetyOptions)(REFIID riid,DWORD dwOptionSetMask,DWORD dwEnabledOptions) {$/;"	f	class:CMSPObjectSafetyImpl
SetInterpolationColors	.\gdiplus\gdiplusbrush.h	/^	Status SetInterpolationColors(const Color *presetColors,$/;"	f	class:LinearGradientBrush
SetInterpolationColors	.\gdiplus\gdipluspath.h	/^	Status SetInterpolationColors(const Color *presetColors,$/;"	f	class:PathGradientBrush
SetInterpolationMode	.\gdiplus\gdiplusgraphics.h	/^	Status SetInterpolationMode(InterpolationMode interpolationMode)$/;"	f	class:Graphics
SetLineAlignment	.\gdiplus\gdiplusstringformat.h	/^	Status SetLineAlignment(StringAlignment align)$/;"	f	class:StringFormat
SetLineCap	.\gdiplus\gdipluspen.h	/^	Status SetLineCap(LineCap startCap, LineCap endCap, DashCap dashCap)$/;"	f	class:Pen
SetLineJoin	.\gdiplus\gdipluspen.h	/^	Status SetLineJoin(LineJoin lineJoin)$/;"	f	class:Pen
SetLinearColors	.\gdiplus\gdiplusbrush.h	/^	Status SetLinearColors(const Color& color1, const Color& color2)$/;"	f	class:LinearGradientBrush
SetMarker	.\gdiplus\gdipluspath.h	/^	Status SetMarker()$/;"	f	class:GraphicsPath
SetMeasurableCharacterRanges	.\gdiplus\gdiplusstringformat.h	/^	Status SetMeasurableCharacterRanges(INT rangeCount,$/;"	f	class:StringFormat
SetMiddleInset	.\gdiplus\gdipluslinecaps.h	/^	Status SetMiddleInset(REAL middleInset)$/;"	f	class:AdjustableArrowCap
SetMiterLimit	.\gdiplus\gdipluspen.h	/^	Status SetMiterLimit(REAL miterLimit)$/;"	f	class:Pen
SetNoOp	.\gdiplus\gdiplusimageattributes.h	/^	Status SetNoOp(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetOutputChannel	.\gdiplus\gdiplusimageattributes.h	/^	Status SetOutputChannel(ColorChannelFlags channelFlags,$/;"	f	class:ImageAttributes
SetOutputChannelColorProfile	.\gdiplus\gdiplusimageattributes.h	/^	Status SetOutputChannelColorProfile(const WCHAR *colorProfileFilename,$/;"	f	class:ImageAttributes
SetPageScale	.\gdiplus\gdiplusgraphics.h	/^	Status SetPageScale(REAL scale)$/;"	f	class:Graphics
SetPageUnit	.\gdiplus\gdiplusgraphics.h	/^	Status SetPageUnit(Unit unit)$/;"	f	class:Graphics
SetPalette	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::SetPalette(const ColorPalette *palette)$/;"	f	class:Image
SetPixel	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::SetPixel(INT x, INT y, const Color& color)$/;"	f	class:Bitmap
SetPixelOffsetMode	.\gdiplus\gdiplusgraphics.h	/^	Status SetPixelOffsetMode(PixelOffsetMode pixelOffsetMode)$/;"	f	class:Graphics
SetProduct	.\d2d1helper.h	/^    inline void SetProduct(const Matrix3x2F &a, const Matrix3x2F &b) {$/;"	f	class:D2D1::Matrix3x2F
SetPropertyItem	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Image::SetPropertyItem(const PropertyItem *item)$/;"	f	class:Image
SetRemapTable	.\gdiplus\gdiplusimageattributes.h	/^	Status SetRemapTable(UINT mapSize, const ColorMap *map,$/;"	f	class:ImageAttributes
SetRenderingOrigin	.\gdiplus\gdiplusgraphics.h	/^	Status SetRenderingOrigin(INT x, INT y)$/;"	f	class:Graphics
SetResolution	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::SetResolution(REAL xdpi, REAL ydpi)$/;"	f	class:Bitmap
SetSize	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::SetSize(int nNewSize,int nGrowBy) {$/;"	f	class:CDXArray
SetSmoothingMode	.\gdiplus\gdiplusgraphics.h	/^	Status SetSmoothingMode(SmoothingMode smoothingMode)$/;"	f	class:Graphics
SetStartCap	.\gdiplus\gdipluspen.h	/^	Status SetStartCap(LineCap startCap)$/;"	f	class:Pen
SetString	.\comutil.h	/^inline void _variant_t::SetString(const char *pSrc) { operator=(pSrc); }$/;"	f	class:_variant_t
SetStrokeCap	.\gdiplus\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeCap(LineCap strokeCap)$/;"	f	class:CustomLineCap
SetStrokeCaps	.\gdiplus\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeCaps(LineCap startCap, LineCap endCap)$/;"	f	class:CustomLineCap
SetStrokeJoin	.\gdiplus\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetStrokeJoin(LineJoin lineJoin)$/;"	f	class:CustomLineCap
SetSurroundColors	.\gdiplus\gdipluspath.h	/^	Status SetSurroundColors(const Color *colors, INT *count)$/;"	f	class:PathGradientBrush
SetTabStops	.\gdiplus\gdiplusstringformat.h	/^	Status SetTabStops(REAL firstTabOffset, INT count, const REAL *tabStops)$/;"	f	class:StringFormat
SetTextContrast	.\gdiplus\gdiplusgraphics.h	/^	Status SetTextContrast(UINT contrast)$/;"	f	class:Graphics
SetTextRenderingHint	.\gdiplus\gdiplusgraphics.h	/^	Status SetTextRenderingHint(TextRenderingHint textRenderingHint)$/;"	f	class:Graphics
SetThreshold	.\gdiplus\gdiplusimageattributes.h	/^	Status SetThreshold(REAL threshold,$/;"	f	class:ImageAttributes
SetToIdentity	.\gdiplus\gdiplusimageattributes.h	/^	Status SetToIdentity(ColorAdjustType type = ColorAdjustTypeDefault)$/;"	f	class:ImageAttributes
SetTransform	.\gdiplus\gdiplusbrush.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:LinearGradientBrush
SetTransform	.\gdiplus\gdiplusbrush.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:TextureBrush
SetTransform	.\gdiplus\gdiplusgraphics.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:Graphics
SetTransform	.\gdiplus\gdipluspath.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:PathGradientBrush
SetTransform	.\gdiplus\gdipluspen.h	/^	Status SetTransform(const Matrix *matrix)$/;"	f	class:Pen
SetTrimming	.\gdiplus\gdiplusstringformat.h	/^	Status SetTrimming(StringTrimming trimming)$/;"	f	class:StringFormat
SetValue	.\gdiplus\gdipluscolor.h	/^	VOID SetValue(ARGB argb)$/;"	f	struct:Color
SetWidth	.\gdiplus\gdipluslinecaps.h	/^	Status SetWidth(REAL width)$/;"	f	class:AdjustableArrowCap
SetWidth	.\gdiplus\gdipluspen.h	/^	Status SetWidth(REAL width)$/;"	f	class:Pen
SetWidthScale	.\gdiplus\gdiplusimpl.h	/^__inline__ Status CustomLineCap::SetWidthScale(REAL widthScale)$/;"	f	class:CustomLineCap
SetWindowThemeNonClientAttributes	.\uxtheme.h	/^static __inline HRESULT SetWindowThemeNonClientAttributes(HWND hwnd,DWORD dwMask,DWORD dwAttributes)$/;"	f
SetWorkspace	.\_dbdao.h	/^  VOID SetWorkspace(DAOWorkspace *pParent) { pwrk = pParent; }$/;"	f	class:CdbConnections
SetWrapMode	.\gdiplus\gdiplusbrush.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:LinearGradientBrush
SetWrapMode	.\gdiplus\gdiplusbrush.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:TextureBrush
SetWrapMode	.\gdiplus\gdiplusimageattributes.h	/^	Status SetWrapMode(WrapMode wrap, const Color& color = Color(),$/;"	f	class:ImageAttributes
SetWrapMode	.\gdiplus\gdipluspath.h	/^	Status SetWrapMode(WrapMode wrapMode)$/;"	f	class:PathGradientBrush
Shear	.\gdiplus\gdiplusmatrix.h	/^	Status Shear(REAL shearX, REAL shearY,$/;"	f	class:Matrix
ShouldBlockRevert	.\vsbackup.h	/^HRESULT WINAPI ShouldBlockRevert($/;"	f
ShutdownMSPCallHelper	.\mspaddr.h	/^template <class T> HRESULT ShutdownMSPCallHelper(IUnknown *pUnknown,T **ppCMSPCall)$/;"	f
SignalThreadProc	.\mspthrd.h	/^  WINBOOL SignalThreadProc() { return SetEvent(m_hCommandEvent); }$/;"	f	class:CMSPThread
Size	.\d2d1helper.h	/^template<typename T> D2D1FORCEINLINE typename TypeTraits<T>::Size Size(T width, T height) {$/;"	f	namespace:D2D1
Size	.\gdiplus\gdiplustypes.h	/^	Size(): Width(0), Height(0) {}$/;"	f	struct:Size
Size	.\gdiplus\gdiplustypes.h	/^	Size(INT width, INT height): Width(width), Height(height) {}$/;"	f	struct:Size
Size	.\gdiplus\gdiplustypes.h	/^	Size(const Size& size): Width(size.Width), Height(size.Height) {}$/;"	f	struct:Size
SizeF	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_SIZE_F SizeF(FLOAT width = 0.0f, FLOAT height = 0.0f) {$/;"	f	namespace:D2D1
SizeF	.\gdiplus\gdiplustypes.h	/^	SizeF(): Width(0.0f), Height(0.0f) {}$/;"	f	struct:SizeF
SizeF	.\gdiplus\gdiplustypes.h	/^	SizeF(REAL width, REAL height): Width(width), Height(height) {}$/;"	f	struct:SizeF
SizeF	.\gdiplus\gdiplustypes.h	/^	SizeF(const SizeF& size): Width(size.Width), Height(size.Height) {}$/;"	f	struct:SizeF
SizeU	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_SIZE_U SizeU(UINT32 width = 0, UINT32 height = 0) {$/;"	f	namespace:D2D1
Skew	.\d2d1helper.h	/^    static D2D1FORCEINLINE Matrix3x2F Skew(FLOAT angleX, FLOAT angleY, D2D1_POINT_2F center = D2D1::Point2F()) {$/;"	f	class:D2D1::Matrix3x2F
SolidBrush	.\gdiplus\gdiplusbrush.h	/^	SolidBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:SolidBrush
SolidBrush	.\gdiplus\gdiplusbrush.h	/^	SolidBrush(const Color& color)$/;"	f	class:SolidBrush
Sort	.\dxtmpl.h	/^void CDXArray<TYPE,ARG_TYPE>::Sort(int (__cdecl *compare)(const void *elem1,const void *elem2)) {$/;"	f	class:CDXArray
Source	.\comdef.h	/^inline _bstr_t _com_error::Source() const {$/;"	f	class:_com_error
SpEnumTokens	.\sphelper.h	/^inline HRESULT SpEnumTokens(const WCHAR *category_id, const WCHAR *req_attrs, const WCHAR *opt_attrs, IEnumSpObjectTokens **ret) {$/;"	f
SpGetCategoryFromId	.\sphelper.h	/^inline HRESULT SpGetCategoryFromId(const WCHAR *category_id, ISpObjectTokenCategory **ret, BOOL fCreateIfNotExist = FALSE) {$/;"	f
SpGetDescription	.\sphelper.h	/^inline HRESULT SpGetDescription(ISpObjectToken *obj_token, WCHAR **description, LANGID language = GetUserDefaultUILanguage()) {$/;"	f
SpHexFromUlong	.\sphelper.h	/^inline void SpHexFromUlong(WCHAR *str, ULONG ul) {$/;"	f
StartFigure	.\gdiplus\gdipluspath.h	/^	Status StartFigure()$/;"	f	class:GraphicsPath
StringCatExWorkerA	.\strsafe.h	/^STRSAFEAPI StringCatExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCatExWorkerW	.\strsafe.h	/^STRSAFEAPI StringCatExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCatNExWorkerA	.\strsafe.h	/^STRSAFEAPI StringCatNExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCatNExWorkerW	.\strsafe.h	/^STRSAFEAPI StringCatNExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCatNWorkerA	.\strsafe.h	/^STRSAFEAPI StringCatNWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend) {$/;"	f
StringCatNWorkerW	.\strsafe.h	/^STRSAFEAPI StringCatNWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend) {$/;"	f
StringCatWorkerA	.\strsafe.h	/^STRSAFEAPI StringCatWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc) {$/;"	f
StringCatWorkerW	.\strsafe.h	/^STRSAFEAPI StringCatWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc) {$/;"	f
StringCbCatA	.\strsafe.h	/^STRSAFEAPI StringCbCatA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc) {$/;"	f
StringCbCatExA	.\strsafe.h	/^STRSAFEAPI StringCbCatExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCatExW	.\strsafe.h	/^STRSAFEAPI StringCbCatExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCatNA	.\strsafe.h	/^STRSAFEAPI StringCbCatNA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToAppend) {$/;"	f
StringCbCatNExA	.\strsafe.h	/^STRSAFEAPI StringCbCatNExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToAppend,STRSAFE_LPSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCatNExW	.\strsafe.h	/^STRSAFEAPI StringCbCatNExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToAppend,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCatNW	.\strsafe.h	/^STRSAFEAPI StringCbCatNW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToAppend) {$/;"	f
StringCbCatW	.\strsafe.h	/^STRSAFEAPI StringCbCatW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc) {$/;"	f
StringCbCopyA	.\strsafe.h	/^STRSAFEAPI StringCbCopyA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc) {$/;"	f
StringCbCopyExA	.\strsafe.h	/^STRSAFEAPI StringCbCopyExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCopyExW	.\strsafe.h	/^STRSAFEAPI StringCbCopyExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCopyNA	.\strsafe.h	/^STRSAFEAPI StringCbCopyNA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToCopy) {$/;"	f
StringCbCopyNExA	.\strsafe.h	/^STRSAFEAPI StringCbCopyNExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cbToCopy,STRSAFE_LPSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCopyNExW	.\strsafe.h	/^STRSAFEAPI StringCbCopyNExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToCopy,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbCopyNW	.\strsafe.h	/^STRSAFEAPI StringCbCopyNW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cbToCopy) {$/;"	f
StringCbCopyW	.\strsafe.h	/^STRSAFEAPI StringCbCopyW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc) {$/;"	f
StringCbGetsA	.\strsafe.h	/^STRSAFE_INLINE_API StringCbGetsA(STRSAFE_LPSTR pszDest,size_t cbDest) {$/;"	f
StringCbGetsExA	.\strsafe.h	/^STRSAFE_INLINE_API StringCbGetsExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbGetsExW	.\strsafe.h	/^STRSAFE_INLINE_API StringCbGetsExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCbGetsW	.\strsafe.h	/^STRSAFE_INLINE_API StringCbGetsW(STRSAFE_LPWSTR pszDest,size_t cbDest) {$/;"	f
StringCbLengthA	.\strsafe.h	/^STRSAFEAPI StringCbLengthA(STRSAFE_LPCSTR psz,size_t cbMax,size_t *pcbLength) {$/;"	f
StringCbLengthW	.\strsafe.h	/^STRSAFEAPI StringCbLengthW(STRSAFE_LPCWSTR psz,size_t cbMax,size_t *pcbLength) {$/;"	f
StringCbPrintfA	.\strsafe.h	/^STRSAFEAPIV StringCbPrintfA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszFormat,...) {$/;"	f
StringCbPrintfExA	.\strsafe.h	/^STRSAFEAPIV StringCbPrintfExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,...) {$/;"	f
StringCbPrintfExW	.\strsafe.h	/^STRSAFEAPIV StringCbPrintfExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,...) {$/;"	f
StringCbPrintfW	.\strsafe.h	/^STRSAFEAPIV StringCbPrintfW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszFormat,...) {$/;"	f
StringCbVPrintfA	.\strsafe.h	/^STRSAFEAPI StringCbVPrintfA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPCSTR pszFormat,va_list argList) {$/;"	f
StringCbVPrintfExA	.\strsafe.h	/^STRSAFEAPI StringCbVPrintfExA(STRSAFE_LPSTR pszDest,size_t cbDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList) {$/;"	f
StringCbVPrintfExW	.\strsafe.h	/^STRSAFEAPI StringCbVPrintfExW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcbRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,va_list argList) {$/;"	f
StringCbVPrintfW	.\strsafe.h	/^STRSAFEAPI StringCbVPrintfW(STRSAFE_LPWSTR pszDest,size_t cbDest,STRSAFE_LPCWSTR pszFormat,va_list argList) {$/;"	f
StringCchCatA	.\strsafe.h	/^STRSAFEAPI StringCchCatA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc) {$/;"	f
StringCchCatExA	.\strsafe.h	/^STRSAFEAPI StringCchCatExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCatExW	.\strsafe.h	/^STRSAFEAPI StringCchCatExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCatNA	.\strsafe.h	/^STRSAFEAPI StringCchCatNA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend) {$/;"	f
StringCchCatNExA	.\strsafe.h	/^STRSAFEAPI StringCchCatNExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToAppend,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCatNExW	.\strsafe.h	/^STRSAFEAPI StringCchCatNExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCatNW	.\strsafe.h	/^STRSAFEAPI StringCchCatNW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToAppend) {$/;"	f
StringCchCatW	.\strsafe.h	/^STRSAFEAPI StringCchCatW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc) {$/;"	f
StringCchCopyA	.\strsafe.h	/^STRSAFEAPI StringCchCopyA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc) {$/;"	f
StringCchCopyExA	.\strsafe.h	/^STRSAFEAPI StringCchCopyExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCopyExW	.\strsafe.h	/^STRSAFEAPI StringCchCopyExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCopyNA	.\strsafe.h	/^STRSAFEAPI StringCchCopyNA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy) {$/;"	f
StringCchCopyNExA	.\strsafe.h	/^STRSAFEAPI StringCchCopyNExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCopyNExW	.\strsafe.h	/^STRSAFEAPI StringCchCopyNExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchCopyNW	.\strsafe.h	/^STRSAFEAPI StringCchCopyNW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy) {$/;"	f
StringCchCopyW	.\strsafe.h	/^STRSAFEAPI StringCchCopyW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc) {$/;"	f
StringCchGetsA	.\strsafe.h	/^STRSAFE_INLINE_API StringCchGetsA(STRSAFE_LPSTR pszDest,size_t cchDest) {$/;"	f
StringCchGetsExA	.\strsafe.h	/^STRSAFE_INLINE_API StringCchGetsExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchGetsExW	.\strsafe.h	/^STRSAFE_INLINE_API StringCchGetsExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCchGetsW	.\strsafe.h	/^STRSAFE_INLINE_API StringCchGetsW(STRSAFE_LPWSTR pszDest,size_t cchDest) {$/;"	f
StringCchLengthA	.\strsafe.h	/^STRSAFEAPI StringCchLengthA(STRSAFE_LPCSTR psz,size_t cchMax,size_t *pcchLength) {$/;"	f
StringCchLengthW	.\strsafe.h	/^STRSAFEAPI StringCchLengthW(STRSAFE_LPCWSTR psz,size_t cchMax,size_t *pcchLength) {$/;"	f
StringCchPrintfA	.\strsafe.h	/^STRSAFEAPIV StringCchPrintfA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,...) {$/;"	f
StringCchPrintfExA	.\strsafe.h	/^STRSAFEAPIV StringCchPrintfExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,...) {$/;"	f
StringCchPrintfExW	.\strsafe.h	/^STRSAFEAPIV StringCchPrintfExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,...) {$/;"	f
StringCchPrintfW	.\strsafe.h	/^STRSAFEAPIV StringCchPrintfW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszFormat,...) {$/;"	f
StringCchVPrintfA	.\strsafe.h	/^STRSAFEAPI StringCchVPrintfA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,va_list argList) {$/;"	f
StringCchVPrintfExA	.\strsafe.h	/^STRSAFEAPI StringCchVPrintfExA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList) {$/;"	f
StringCchVPrintfExW	.\strsafe.h	/^STRSAFEAPI StringCchVPrintfExW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,va_list argList) {$/;"	f
StringCchVPrintfW	.\strsafe.h	/^STRSAFEAPI StringCchVPrintfW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszFormat,va_list argList) {$/;"	f
StringCopyExWorkerA	.\strsafe.h	/^STRSAFEAPI StringCopyExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCopyExWorkerW	.\strsafe.h	/^STRSAFEAPI StringCopyExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCopyNExWorkerA	.\strsafe.h	/^STRSAFEAPI StringCopyNExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCSTR pszSrc,size_t cchToCopy,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCopyNExWorkerW	.\strsafe.h	/^STRSAFEAPI StringCopyNExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringCopyNWorkerA	.\strsafe.h	/^STRSAFEAPI StringCopyNWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc,size_t cchSrc) {$/;"	f
StringCopyNWorkerW	.\strsafe.h	/^STRSAFEAPI StringCopyNWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc,size_t cchToCopy) {$/;"	f
StringCopyWorkerA	.\strsafe.h	/^STRSAFEAPI StringCopyWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszSrc) {$/;"	f
StringCopyWorkerW	.\strsafe.h	/^STRSAFEAPI StringCopyWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszSrc) {$/;"	f
StringFormat	.\gdiplus\gdiplusstringformat.h	/^	StringFormat(GpStringFormat *stringFormat, Status status):$/;"	f	class:StringFormat
StringFormat	.\gdiplus\gdiplusstringformat.h	/^	StringFormat(INT formatFlags = 0, LANGID language = LANG_NEUTRAL):$/;"	f	class:StringFormat
StringFormat	.\gdiplus\gdiplusstringformat.h	/^	StringFormat(const StringFormat *format):$/;"	f	class:StringFormat
StringGetsExWorkerA	.\strsafe.h	/^STRSAFE_INLINE_API StringGetsExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringGetsExWorkerW	.\strsafe.h	/^STRSAFE_INLINE_API StringGetsExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags) {$/;"	f
StringLengthWorkerA	.\strsafe.h	/^STRSAFEAPI StringLengthWorkerA(STRSAFE_LPCSTR psz,size_t cchMax,size_t *pcchLength) {$/;"	f
StringLengthWorkerW	.\strsafe.h	/^STRSAFEAPI StringLengthWorkerW(STRSAFE_LPCWSTR psz,size_t cchMax,size_t *pcchLength) {$/;"	f
StringVPrintfExWorkerA	.\strsafe.h	/^STRSAFEAPI StringVPrintfExWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCSTR pszFormat,va_list argList) {$/;"	f
StringVPrintfExWorkerW	.\strsafe.h	/^STRSAFEAPI StringVPrintfExWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,size_t cbDest,STRSAFE_LPWSTR *ppszDestEnd,size_t *pcchRemaining,unsigned __LONG32 dwFlags,STRSAFE_LPCWSTR pszFormat,va_list argList) {$/;"	f
StringVPrintfWorkerA	.\strsafe.h	/^STRSAFEAPI StringVPrintfWorkerA(STRSAFE_LPSTR pszDest,size_t cchDest,STRSAFE_LPCSTR pszFormat,va_list argList) {$/;"	f
StringVPrintfWorkerW	.\strsafe.h	/^STRSAFEAPI StringVPrintfWorkerW(STRSAFE_LPWSTR pszDest,size_t cchDest,STRSAFE_LPCWSTR pszFormat,va_list argList) {$/;"	f
StrokeStyleProperties	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_STROKE_STYLE_PROPERTIES StrokeStyleProperties($/;"	f	namespace:D2D1
Swap	.\wrl\client.h	/^            void Swap(ComPtr &&r) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
Swap	.\wrl\client.h	/^            void Swap(ComPtr &r) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
SystemError	.\dbgeng.h	/^  STDMETHOD(SystemError)(THIS_ ULONG Error,ULONG Level) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
TCP_DstPort	.\netmon.h	/^  INLINE DWORD TCP_DstPort(ULPTCP pTCP) { return XCHG(pTCP->DstPort); }$/;"	f
TCP_HdrLen	.\netmon.h	/^  INLINE DWORD TCP_HdrLen(ULPTCP pTCP) { return (pTCP->DataOff & 0xf0) >> 2; }$/;"	f
TCP_SrcPort	.\netmon.h	/^  INLINE DWORD TCP_SrcPort(ULPTCP pTCP) { return XCHG(pTCP->SrcPort); }$/;"	f
TextureBrush	.\gdiplus\gdiplusbrush.h	/^	TextureBrush(GpBrush *brush, Status status): Brush(brush, status) {}$/;"	f	class:TextureBrush
TextureBrush	.\gdiplus\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode = WrapModeTile)$/;"	f	class:TextureBrush
TextureBrush	.\gdiplus\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode, const Rect& dstRect)$/;"	f	class:TextureBrush
TextureBrush	.\gdiplus\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode, const RectF& dstRect)$/;"	f	class:TextureBrush
TextureBrush	.\gdiplus\gdiplusbrush.h	/^	TextureBrush(Image *image, WrapMode wrapMode,$/;"	f	class:TextureBrush
TextureBrush	.\gdiplus\gdiplusbrush.h	/^	TextureBrush(Image *image, const Rect& dstRect,$/;"	f	class:TextureBrush
TextureBrush	.\gdiplus\gdiplusbrush.h	/^	TextureBrush(Image *image, const RectF& dstRect,$/;"	f	class:TextureBrush
ToCOLORREF	.\gdiplus\gdipluscolor.h	/^	COLORREF ToCOLORREF() const$/;"	f	struct:Color
TpDestroyCallbackEnviron	.\winnt.h	/^    FORCEINLINE VOID TpDestroyCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) { UNREFERENCED_PARAMETER (cbe); }$/;"	f
TpInitializeCallbackEnviron	.\winnt.h	/^    FORCEINLINE VOID TpInitializeCallbackEnviron (PTP_CALLBACK_ENVIRON cbe) {$/;"	f
TpSetCallbackActivationContext	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackActivationContext (PTP_CALLBACK_ENVIRON cbe, struct _ACTIVATION_CONTEXT *actx) { cbe->ActivationContext = actx; }$/;"	f
TpSetCallbackCleanupGroup	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackCleanupGroup (PTP_CALLBACK_ENVIRON cbe, PTP_CLEANUP_GROUP cleanup_group, PTP_CLEANUP_GROUP_CANCEL_CALLBACK cleanup_group_cb) {$/;"	f
TpSetCallbackFinalizationCallback	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackFinalizationCallback (PTP_CALLBACK_ENVIRON cbe, PTP_SIMPLE_CALLBACK fini_cb) { cbe->FinalizationCallback = fini_cb; }$/;"	f
TpSetCallbackLongFunction	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackLongFunction (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.LongFunction = 1; }$/;"	f
TpSetCallbackNoActivationContext	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackNoActivationContext (PTP_CALLBACK_ENVIRON cbe) { cbe->ActivationContext = (struct _ACTIVATION_CONTEXT *) (LONG_PTR) -1; }$/;"	f
TpSetCallbackPersistent	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackPersistent (PTP_CALLBACK_ENVIRON cbe) { cbe->u.s.Persistent = 1; }$/;"	f
TpSetCallbackPriority	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackPriority (PTP_CALLBACK_ENVIRON cbe, TP_CALLBACK_PRIORITY prio) { cbe->CallbackPriority = prio; }$/;"	f
TpSetCallbackRaceWithDll	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackRaceWithDll (PTP_CALLBACK_ENVIRON cbe, PVOID h) { cbe->RaceDll = h; }$/;"	f
TpSetCallbackThreadpool	.\winnt.h	/^    FORCEINLINE VOID TpSetCallbackThreadpool (PTP_CALLBACK_ENVIRON cbe, PTP_POOL pool) { cbe->Pool = pool; }$/;"	f
Transform	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Transform(const Matrix *matrix)$/;"	f	class:Region
Transform	.\gdiplus\gdipluspath.h	/^	Status Transform(const Matrix *matrix)$/;"	f	class:GraphicsPath
TransformPoint	.\d2d1helper.h	/^    D2D1FORCEINLINE D2D1_POINT_2F TransformPoint(D2D1_POINT_2F point) const {$/;"	f	class:D2D1::Matrix3x2F
TransformPoints	.\gdiplus\gdiplusgraphics.h	/^	Status TransformPoints(CoordinateSpace destSpace,$/;"	f	class:Graphics
TransformPoints	.\gdiplus\gdiplusmatrix.h	/^	Status TransformPoints(Point *pts, INT count = 1) const$/;"	f	class:Matrix
TransformPoints	.\gdiplus\gdiplusmatrix.h	/^	Status TransformPoints(PointF *pts, INT count = 1) const$/;"	f	class:Matrix
TransformVectors	.\gdiplus\gdiplusmatrix.h	/^	Status TransformVectors(Point *pts, INT count = 1) const$/;"	f	class:Matrix
TransformVectors	.\gdiplus\gdiplusmatrix.h	/^	Status TransformVectors(PointF *pts, INT count = 1) const$/;"	f	class:Matrix
Translate	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Translate(INT dx, INT dy)$/;"	f	class:Region
Translate	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Translate(REAL dx, REAL dy)$/;"	f	class:Region
Translate	.\gdiplus\gdiplusmatrix.h	/^	Status Translate(REAL offsetX, REAL offsetY,$/;"	f	class:Matrix
TranslateClip	.\gdiplus\gdiplusgraphics.h	/^	Status TranslateClip(INT dx, INT dy)$/;"	f	class:Graphics
TranslateClip	.\gdiplus\gdiplusgraphics.h	/^	Status TranslateClip(REAL dx, REAL dy)$/;"	f	class:Graphics
TranslateTransform	.\gdiplus\gdiplusbrush.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:LinearGradientBrush
TranslateTransform	.\gdiplus\gdiplusbrush.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:TextureBrush
TranslateTransform	.\gdiplus\gdiplusgraphics.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:Graphics
TranslateTransform	.\gdiplus\gdipluspath.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:PathGradientBrush
TranslateTransform	.\gdiplus\gdipluspen.h	/^	Status TranslateTransform(REAL dx, REAL dy,$/;"	f	class:Pen
Translation	.\d2d1helper.h	/^    static D2D1FORCEINLINE Matrix3x2F Translation(D2D1_SIZE_F size) {$/;"	f	class:D2D1::Matrix3x2F
Translation	.\d2d1helper.h	/^    static D2D1FORCEINLINE Matrix3x2F Translation(FLOAT x, FLOAT y) {$/;"	f	class:D2D1::Matrix3x2F
TryLock	.\msputils.h	/^  WINBOOL TryLock() { return TryEnterCriticalSection(&m_CritSec); }$/;"	f	class:CMSPCritSection
UIntToPtr	.\basetsd.h	/^  static __inline void *UIntToPtr (const unsigned int ui) { return ((void *) (UINT_PTR)ui); }$/;"	f
ULongToHandle	.\basetsd.h	/^  static __inline void *ULongToHandle (const unsigned __LONG32 h) { return ((void *) (UINT_PTR) h); }$/;"	f
ULongToPtr	.\basetsd.h	/^  static __inline void *ULongToPtr (const unsigned __LONG32 ul) { return ((void *) (ULONG_PTR)ul); }$/;"	f
Uninitialize	.\roapi.h	/^      __inline void Uninitialize ()$/;"	f	namespace:ABI::Windows::Foundation
Uninitialize	.\roapi.h	/^    __inline void Uninitialize ()$/;"	f	namespace:Windows::Foundation
Union	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Union(const GraphicsPath *path)$/;"	f	class:Region
Union	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Union(const Rect& rect)$/;"	f	class:Region
Union	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Union(const RectF& rect)$/;"	f	class:Region
Union	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Union(const Region *region)$/;"	f	class:Region
Union	.\gdiplus\gdiplustypes.h	/^	static BOOL Union(Rect& c, const Rect& a, const Rect& b) {$/;"	f	struct:Rect
Union	.\gdiplus\gdiplustypes.h	/^	static BOOL Union(RectF& c, const RectF& a, const RectF& b) {$/;"	f	struct:RectF
UnloadModule	.\dbgeng.h	/^  STDMETHOD(UnloadModule)(THIS_ PCSTR ImageBaseName,ULONG64 BaseOffset) { return DEBUG_STATUS_NO_CHANGE; }$/;"	f	class:DebugBaseEventCallbacks
Unlock	.\msputils.h	/^  void Unlock() { LeaveCriticalSection(&m_CritSec); }$/;"	f	class:CMSPCritSection
UnlockBits	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Bitmap::UnlockBits(BitmapData *lockedBitmapData)$/;"	f	class:Bitmap
UnsignedMultiplyExtract128	.\winnt.h	/^    __CRT_INLINE DWORD64 UnsignedMultiplyExtract128(DWORD64 Multiplier,DWORD64 Multiplicand,BYTE Shift) {$/;"	f
ValueGetter	.\d2d1effecthelpers.h	/^HRESULT CALLBACK ValueGetter(const IUnknown *effect, BYTE *data, UINT32 dataSize, UINT32 *actualSize) {$/;"	f
ValueSetter	.\d2d1effecthelpers.h	/^HRESULT CALLBACK ValueSetter(IUnknown *effect, const BYTE *data, UINT32 dataSize) {$/;"	f
VarCmp	.\oleauto.h	/^  static __inline HRESULT WINAPI VarCmp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LCID lcid) { return VarCmp(pvarLeft,pvarRight,lcid,0); }$/;"	f
Vector2F	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_VECTOR_2F Vector2F(FLOAT x = 0.0f, FLOAT y = 0.0f) {$/;"	f	namespace:D2D1
Vector3F	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_VECTOR_3F Vector3F(FLOAT x = 0.0f, FLOAT y = 0.0f, FLOAT z = 0.0f) {$/;"	f	namespace:D2D1
Vector4F	.\d2d1_1helper.h	/^    D2D1FORCEINLINE D2D1_VECTOR_4F Vector4F(FLOAT x = 0.0f, FLOAT y = 0.0f, FLOAT z = 0.0f, FLOAT w = 0.0f) {$/;"	f	namespace:D2D1
VssFreeSnapshotProperties	.\vsbackup.h	/^void WINAPI VssFreeSnapshotProperties($/;"	f
WCode	.\comdef.h	/^inline WORD _com_error::WCode() const throw() { return HRESULTToWCode(m_hresult); }$/;"	f	class:_com_error
WCodeToHRESULT	.\comdef.h	/^inline HRESULT _com_error::WCodeToHRESULT(WORD wCode) throw() { return wCode >= 0xFE00 ? WCODE_HRESULT_LAST : WCODE_HRESULT_FIRST + wCode; }$/;"	f	class:_com_error
WRITE_PORT_BUFFER_UCHAR	.\ddk\wdm.h	/^WRITE_PORT_BUFFER_UCHAR($/;"	f
WRITE_PORT_BUFFER_ULONG	.\ddk\wdm.h	/^WRITE_PORT_BUFFER_ULONG($/;"	f
WRITE_PORT_BUFFER_USHORT	.\ddk\wdm.h	/^WRITE_PORT_BUFFER_USHORT($/;"	f
WRITE_PORT_UCHAR	.\ddk\wdm.h	/^WRITE_PORT_UCHAR($/;"	f
WRITE_PORT_ULONG	.\ddk\wdm.h	/^WRITE_PORT_ULONG($/;"	f
WRITE_PORT_USHORT	.\ddk\wdm.h	/^WRITE_PORT_USHORT($/;"	f
WRITE_REGISTER_BUFFER_UCHAR	.\ddk\wdm.h	/^WRITE_REGISTER_BUFFER_UCHAR($/;"	f
WRITE_REGISTER_BUFFER_ULONG	.\ddk\wdm.h	/^WRITE_REGISTER_BUFFER_ULONG($/;"	f
WRITE_REGISTER_BUFFER_USHORT	.\ddk\wdm.h	/^WRITE_REGISTER_BUFFER_USHORT($/;"	f
WRITE_REGISTER_UCHAR	.\ddk\wdm.h	/^WRITE_REGISTER_UCHAR($/;"	f
WRITE_REGISTER_ULONG	.\ddk\wdm.h	/^WRITE_REGISTER_ULONG($/;"	f
WRITE_REGISTER_USHORT	.\ddk\wdm.h	/^WRITE_REGISTER_USHORT($/;"	f
Warp	.\gdiplus\gdipluspath.h	/^	Status Warp(const PointF *destPoints, INT count, const RectF& srcRect,$/;"	f	class:GraphicsPath
Widen	.\gdiplus\gdipluspath.h	/^	Status Widen(const Pen *pen, const Matrix *matrix = NULL,$/;"	f	class:GraphicsPath
WspiapiClone	.\wspiapi.h	/^  WspiapiClone (WORD wPort,struct addrinfo *ptResult)$/;"	f
WspiapiLegacyFreeAddrInfo	.\wspiapi.h	/^  WspiapiLegacyFreeAddrInfo (struct addrinfo *ptHead)$/;"	f
WspiapiLookupNode	.\wspiapi.h	/^  WspiapiLookupNode (const char *pszNodeName, int iSocketType, int iProtocol, WORD wPort,$/;"	f
WspiapiNewAddrInfo	.\wspiapi.h	/^  WspiapiNewAddrInfo (int iSocketType,int iProtocol, WORD wPort,DWORD dwAddress)$/;"	f
WspiapiParseV4Address	.\wspiapi.h	/^  WspiapiParseV4Address (const char *pszAddress, PDWORD pdwAddress)$/;"	f
WspiapiStrdup	.\wspiapi.h	/^  WspiapiStrdup (const char *pszString)$/;"	f
Xor	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Xor(const GraphicsPath *path)$/;"	f	class:Region
Xor	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Xor(const Rect& rect)$/;"	f	class:Region
Xor	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Xor(const RectF& rect)$/;"	f	class:Region
Xor	.\gdiplus\gdiplusimpl.h	/^__inline__ Status Region::Xor(const Region *region)$/;"	f	class:Region
_AddRef	.\comip.h	/^  void _AddRef() throw() {$/;"	f	class:_com_ptr_t
_AddRef	.\comutil.h	/^inline void _bstr_t::_AddRef() throw() {$/;"	f	class:_bstr_t
_Compare	.\comutil.h	/^inline int _bstr_t::_Compare(const _bstr_t &str) const throw() {$/;"	f	class:_bstr_t
_CompareUnknown	.\comip.h	/^  template<typename _InterfacePtr> int _CompareUnknown(_InterfacePtr p) {$/;"	f	class:_com_ptr_t
_D3DMATRIX	.\d3dtypes.h	/^  _D3DMATRIX() { }$/;"	f	struct:_D3DMATRIX
_D3DTLVERTEX	.\d3dtypes.h	/^  _D3DTLVERTEX() {}$/;"	f	struct:_D3DTLVERTEX
_D3DTLVERTEX	.\d3dtypes.h	/^  _D3DTLVERTEX(const D3DVECTOR& v, float _rhw, D3DCOLOR _color, D3DCOLOR _specular, float _tu, float _tv) {$/;"	f	struct:_D3DTLVERTEX
_D3DVECTOR	.\d3dtypes.h	/^  _D3DVECTOR() {}$/;"	f	struct:_D3DVECTOR
_D3DVERTEX	.\d3dtypes.h	/^  _D3DVERTEX() {}$/;"	f	struct:_D3DVERTEX
_D3DVERTEX	.\d3dtypes.h	/^  _D3DVERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _tu, float _tv) {$/;"	f	struct:_D3DVERTEX
_Exit	.\assert.h	/^  __CRT_INLINE __MINGW_ATTRIB_NORETURN void  __cdecl _Exit(int status)$/;"	f
_Exit	.\process.h	/^  __CRT_INLINE __MINGW_ATTRIB_NORETURN void  __cdecl _Exit(int status)$/;"	f
_Exit	.\stdlib.h	/^  __CRT_INLINE __MINGW_ATTRIB_NORETURN void  __cdecl _Exit(int status)$/;"	f
_Free	.\comutil.h	/^inline void _bstr_t::Data_t::_Free() throw() {$/;"	f	class:_bstr_t::Data_t
_Free	.\comutil.h	/^inline void _bstr_t::_Free() throw() {$/;"	f	class:_bstr_t
_InterlockedAdd	.\psdk_inc\intrin-impl.h	/^__LONG32 _InterlockedAdd(__LONG32 volatile *Addend, __LONG32 Value) {$/;"	f
_InterlockedAdd64	.\psdk_inc\intrin-impl.h	/^__int64 _InterlockedAdd64(__int64 volatile *Addend, __int64 Value) {$/;"	f
_InterlockedCompareExchange	.\psdk_inc\intrin-impl.h	/^__LONG32 _InterlockedCompareExchange(__LONG32 volatile *Destination, __LONG32 ExChange, __LONG32 Comperand) {$/;"	f
_InterlockedCompareExchange16	.\psdk_inc\intrin-impl.h	/^short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand) {$/;"	f
_InterlockedCompareExchange64	.\psdk_inc\intrin-impl.h	/^__int64 _InterlockedCompareExchange64(__int64 volatile *Destination, __int64 ExChange, __int64 Comperand) {$/;"	f
_InterlockedCompareExchangePointer	.\psdk_inc\intrin-impl.h	/^void *_InterlockedCompareExchangePointer(void *volatile *Destination, void *ExChange, void *Comperand) {$/;"	f
_InterlockedDecrement	.\psdk_inc\intrin-impl.h	/^__LONG32 _InterlockedDecrement(__LONG32 volatile *Addend) {$/;"	f
_InterlockedDecrement16	.\psdk_inc\intrin-impl.h	/^short _InterlockedDecrement16(short volatile *Addend) {$/;"	f
_InterlockedDecrement64	.\psdk_inc\intrin-impl.h	/^__int64 _InterlockedDecrement64(__int64 volatile *Addend) {$/;"	f
_InterlockedExchange	.\psdk_inc\intrin-impl.h	/^__LONG32 _InterlockedExchange(__LONG32 volatile *Target, __LONG32 Value) {$/;"	f
_InterlockedExchange64	.\psdk_inc\intrin-impl.h	/^__int64 _InterlockedExchange64(__int64 volatile *Target, __int64 Value) {$/;"	f
_InterlockedExchangeAdd	.\psdk_inc\intrin-impl.h	/^__LONG32 _InterlockedExchangeAdd(__LONG32 volatile *Addend, __LONG32 Value) {$/;"	f
_InterlockedExchangeAdd64	.\psdk_inc\intrin-impl.h	/^__int64 _InterlockedExchangeAdd64(__int64 volatile *Addend, __int64 Value) {$/;"	f
_InterlockedExchangePointer	.\psdk_inc\intrin-impl.h	/^void *_InterlockedExchangePointer(void *volatile *Target,void *Value) {$/;"	f
_InterlockedIncrement	.\psdk_inc\intrin-impl.h	/^__LONG32 _InterlockedIncrement(__LONG32 volatile *Addend) {$/;"	f
_InterlockedIncrement16	.\psdk_inc\intrin-impl.h	/^short _InterlockedIncrement16(short volatile *Addend) {$/;"	f
_InterlockedIncrement64	.\psdk_inc\intrin-impl.h	/^__int64 _InterlockedIncrement64(__int64 volatile *Addend) {$/;"	f
_KS_ANON_STRUCT	.\ks.h	/^    _KS_ANON_STRUCT(_IDENTIFIER)$/;"	f	union:__anon1213::__anon1214
_KS_ANON_STRUCT	.\ks.h	/^  _KS_ANON_STRUCT(_SIGNED)$/;"	f	union:__anon1221
_KS_ANON_STRUCT	.\ks.h	/^  _KS_ANON_STRUCT(_SIGNED64)$/;"	f	union:__anon1222
_KS_ANON_STRUCT	.\ks.h	/^  _KS_ANON_STRUCT(_UNSIGNED)$/;"	f	union:__anon1221
_KS_ANON_STRUCT	.\ks.h	/^  _KS_ANON_STRUCT(_UNSIGNED64)$/;"	f	union:__anon1222
_KeQueryTickCount	.\ddk\wdm.h	/^_KeQueryTickCount($/;"	f
_MarkAllocaS	.\malloc.h	/^  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {$/;"	f
_QueryInterface	.\comip.h	/^  template<typename _InterfacePtr> HRESULT _QueryInterface(_InterfacePtr p) throw() {$/;"	f	class:_com_ptr_t
_Release	.\comip.h	/^  void _Release() throw() {$/;"	f	class:_com_ptr_t
__InlineInterlockedCompareExchangePointer	.\winbase.h	/^  FORCEINLINE PVOID __cdecl __InlineInterlockedCompareExchangePointer (PVOID volatile *Destination, PVOID ExChange, PVOID Comperand) {$/;"	f
__cpuid	.\psdk_inc\intrin-impl.h	/^void __cpuid(int CPUInfo[4], int InfoType) {$/;"	f
__cpuidex	.\psdk_inc\intrin-impl.h	/^void __cpuidex(int CPUInfo[4], int function_id, int subfunction_id) {$/;"	f
__debugbreak	.\_mingw.h	/^__MINGW_INTRIN_INLINE void __cdecl __debugbreak(void)$/;"	f
__faststorefence	.\psdk_inc\intrin-impl.h	/^void __faststorefence(void) {$/;"	f
__fp_unordered_compare	.\math.h	/^    __fp_unordered_compare (long double x, long double y){$/;"	f
__fpclassify	.\math.h	/^  __CRT_INLINE int __cdecl __fpclassify (double x) {$/;"	f
__fpclassifyf	.\math.h	/^  __CRT_INLINE int __cdecl __fpclassifyf (float x) {$/;"	f
__fpclassifyl	.\math.h	/^  __CRT_INLINE int __cdecl __fpclassifyl (long double x) {$/;"	f
__int2c	.\psdk_inc\intrin-impl.h	/^void __int2c(void) {$/;"	f
__isnan	.\math.h	/^  __CRT_INLINE int __cdecl __isnan (double _x)$/;"	f
__isnand128	.\math.h	/^  __CRT_INLINE __cdecl __isnand128(_Decimal128 x){$/;"	f
__isnand32	.\math.h	/^  __CRT_INLINE __cdecl __isnand32(_Decimal32 x){$/;"	f
__isnand64	.\math.h	/^  __CRT_INLINE __cdecl __isnand64(_Decimal64 x){$/;"	f
__isnanf	.\math.h	/^  __CRT_INLINE int __cdecl __isnanf (float _x)$/;"	f
__isnanl	.\math.h	/^  __CRT_INLINE int __cdecl __isnanl (long double _x)$/;"	f
__mingw_access	.\io.h	/^static inline int __mingw_access (const char *__fname, int __mode) {$/;"	f
__readmsr	.\psdk_inc\intrin-impl.h	/^unsigned __int64 __readmsr(unsigned __LONG32 msr)$/;"	f
__shiftleft128	.\psdk_inc\intrin-impl.h	/^unsigned __int64 __shiftleft128 (unsigned __int64  LowPart, unsigned __int64 HighPart, unsigned char Shift)$/;"	f
__shiftright128	.\psdk_inc\intrin-impl.h	/^unsigned __int64 __shiftright128 (unsigned __int64  LowPart, unsigned __int64 HighPart, unsigned char Shift)$/;"	f
__signbit	.\math.h	/^  __CRT_INLINE int __cdecl __signbit (double x) {$/;"	f
__signbitd128	.\math.h	/^  __CRT_INLINE int __cdecl __signbitd128 (_Decimal128 x){$/;"	f
__signbitd32	.\math.h	/^  __CRT_INLINE int __cdecl __signbitd32 (_Decimal32 x){$/;"	f
__signbitd64	.\math.h	/^  __CRT_INLINE int __cdecl __signbitd64 (_Decimal64 x){$/;"	f
__signbitf	.\math.h	/^  __CRT_INLINE int __cdecl __signbitf (float x) {$/;"	f
__signbitl	.\math.h	/^  __CRT_INLINE int __cdecl __signbitl (long double x) {$/;"	f
__writemsr	.\psdk_inc\intrin-impl.h	/^void __writemsr(unsigned __LONG32 msr, unsigned __int64 Value)$/;"	f
_abs64	.\stdlib.h	/^  __MINGW_INTRIN_INLINE __int64 __cdecl _abs64(__int64 x) {$/;"	f
_bstr_t	.\comutil.h	/^inline _bstr_t::_bstr_t() throw() : m_Data(NULL) { }$/;"	f	class:_bstr_t
_bstr_t	.\comutil.h	/^inline _bstr_t::_bstr_t(BSTR bstr,bool fCopy) : m_Data(new Data_t(bstr,fCopy)) {$/;"	f	class:_bstr_t
_bstr_t	.\comutil.h	/^inline _bstr_t::_bstr_t(const _bstr_t &s) throw() : m_Data(s.m_Data) { _AddRef(); }$/;"	f	class:_bstr_t
_bstr_t	.\comutil.h	/^inline _bstr_t::_bstr_t(const _variant_t &var) : m_Data(NULL) {$/;"	f	class:_bstr_t
_bstr_t	.\comutil.h	/^inline _bstr_t::_bstr_t(const char *s) : m_Data(new Data_t(s)) {$/;"	f	class:_bstr_t
_bstr_t	.\comutil.h	/^inline _bstr_t::_bstr_t(const wchar_t *s) : m_Data(new Data_t(s)) {$/;"	f	class:_bstr_t
_com_error	.\comdef.h	/^inline _com_error::_com_error(HRESULT hr,IErrorInfo *perrinfo,bool fAddRef) throw() : m_hresult(hr),m_perrinfo(perrinfo),m_pszMsg(NULL) {$/;"	f	class:_com_error
_com_error	.\comdef.h	/^inline _com_error::_com_error(const _com_error &that) throw() {$/;"	f	class:_com_error
_com_issue_error	.\comdef.h	/^inline void _com_issue_error(HRESULT hr) {$/;"	f
_com_ptr_t	.\comip.h	/^  _com_ptr_t() throw() : m_pInterface(NULL) { }$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  _com_ptr_t(Interface *pInterface) throw() : m_pInterface(pInterface) { _AddRef(); }$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  _com_ptr_t(Interface *pInterface,bool fAddRef) throw() : m_pInterface(pInterface) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  _com_ptr_t(LPSTR str) { new(this) _com_ptr_t(static_cast<LPCSTR> (str),NULL); }$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  _com_ptr_t(LPWSTR str) { new(this) _com_ptr_t(static_cast<LPCWSTR> (str),NULL); }$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  _com_ptr_t(const _com_ptr_t &cp) throw() : m_pInterface(cp.m_pInterface) { _AddRef(); }$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  _com_ptr_t(const _variant_t& varSrc) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  _com_ptr_t(int null) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  explicit _com_ptr_t(LPCSTR str,IUnknown *pOuter = NULL,DWORD dwClsContext = CLSCTX_ALL) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  explicit _com_ptr_t(LPCWSTR str,IUnknown *pOuter = NULL,DWORD dwClsContext = CLSCTX_ALL) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  explicit _com_ptr_t(_com_ptr_t *p) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  explicit _com_ptr_t(const CLSID &clsid,IUnknown *pOuter = NULL,DWORD dwClsContext = CLSCTX_ALL) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  template<typename _InterfaceType> _com_ptr_t(_InterfaceType *p) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_com_ptr_t	.\comip.h	/^  template<typename _OtherIID> _com_ptr_t(const _com_ptr_t<_OtherIID> &p) : m_pInterface(NULL) {$/;"	f	class:_com_ptr_t
_findfirst64i32	.\io.h	/^  __CRT_INLINE intptr_t __cdecl _findfirst64i32(const char *_Filename,struct _finddata64i32_t *_FindData)$/;"	f
_findnext64i32	.\io.h	/^  __CRT_INLINE int __cdecl _findnext64i32(intptr_t _FindHandle,struct _finddata64i32_t *_FindData)$/;"	f
_freea	.\malloc.h	/^  static __inline void __cdecl _freea(void *_Memory) {$/;"	f
_fstat64i32	.\sys\stat.h	/^  __CRT_INLINE int __cdecl _fstat64i32(int _FileDes,struct _stat64i32 *_Stat)$/;"	f
_futime	.\sys\utime.h	/^__CRT_INLINE int __cdecl _futime(int _Desc,struct _utimbuf *_Utimbuf) {$/;"	f
_lrotl	.\psdk_inc\intrin-impl.h	/^unsigned long _lrotl(unsigned long __X, int __C)$/;"	f
_lrotr	.\psdk_inc\intrin-impl.h	/^unsigned long _lrotr(unsigned long __X, int __C)$/;"	f
_mbschr	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbschr(unsigned char *_String,unsigned int _Char) { return ((unsigned char *)_mbschr((const unsigned char *)_String,_Char)); }$/;"	f
_mbschr_l	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbschr_l(unsigned char *_String,unsigned int _Char,_locale_t _Locale) { return ((unsigned char *)_mbschr_l((const unsigned char *)_String,_Char,_Locale)); }$/;"	f
_mbspbrk	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbspbrk(unsigned char *_String,const unsigned char *_CharSet) { return ((unsigned char *)_mbspbrk((const unsigned char *)_String,_CharSet)); }$/;"	f
_mbspbrk_l	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbspbrk_l(unsigned char *_String,const unsigned char *_CharSet,_locale_t _Locale) { return ((unsigned char *)_mbspbrk_l((const unsigned char *)_String,_CharSet,_Locale)); }$/;"	f
_mbsrchr	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbsrchr(unsigned char *_String,unsigned int _Char) { return ((unsigned char *)_mbsrchr((const unsigned char *)_String,_Char)); }$/;"	f
_mbsrchr_l	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbsrchr_l(unsigned char *_String,unsigned int _Char,_locale_t _Locale) { return ((unsigned char *)_mbsrchr_l((const unsigned char *)_String,_Char,_Locale)); }$/;"	f
_mbsstr	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbsstr(unsigned char *_String,const unsigned char *_Match) { return ((unsigned char *)_mbsstr((const unsigned char *)_String,_Match)); }$/;"	f
_mbsstr_l	.\mbstring.h	/^    static inline unsigned char *__cdecl _mbsstr_l(unsigned char *_String,const unsigned char *_Match,_locale_t _Locale) { return ((unsigned char *)_mbsstr_l((const unsigned char *)_String,_Match,_Locale)); }$/;"	f
_mkgmtime	.\time.h	/^__CRT_INLINE time_t __cdecl _mkgmtime(struct tm *_Tm) { return _mkgmtime32(_Tm); }$/;"	f
_mkgmtime	.\time.h	/^__CRT_INLINE time_t __cdecl _mkgmtime(struct tm *_Tm) { return _mkgmtime64(_Tm); }$/;"	f
_mul128	.\psdk_inc\intrin-impl.h	/^__int64 _mul128(__int64 a, __int64 b, __int64 *hi)$/;"	f
_scardssp_IID_Lookup	.\scardssp_p.c	/^int __stdcall _scardssp_IID_Lookup(const IID *pIID,int *pIndex) {$/;"	f
_stat64i32	.\sys\stat.h	/^  __CRT_INLINE int __cdecl _stat64i32(const char *_Name,struct _stat64i32 *_Stat)$/;"	f
_tcschr	.\tchar.h	/^    extern inline char *__cdecl _tcschr(char *_S,unsigned int _C) { return ((char *)_tcschr((const char *)_S,_C)); }$/;"	f
_tcspbrk	.\tchar.h	/^    extern inline char *__cdecl _tcspbrk(char *_S,const char *_P) { return ((char *)_tcspbrk((const char *)_S,_P)); }$/;"	f
_tcsrchr	.\tchar.h	/^    extern inline char *__cdecl _tcsrchr(char *_S,unsigned int _C) { return ((char *)_tcsrchr((const char *)_S,_C)); }$/;"	f
_tcsstr	.\tchar.h	/^    extern inline char *__cdecl _tcsstr(char *_S,const char *_P) { return ((char *)_tcsstr((const char *)_S,_P)); }$/;"	f
_umul128	.\psdk_inc\intrin-impl.h	/^unsigned __int64 _umul128(unsigned __int64 a, unsigned __int64 b, unsigned __int64 *hi)$/;"	f
_utime	.\sys\utime.h	/^__CRT_INLINE int __cdecl _utime(const char *_Filename,struct _utimbuf *_Utimbuf) {$/;"	f
_variant_t	.\comutil.h	/^__MINGW_EXTENSION inline _variant_t::_variant_t(__int64 i8Src) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^__MINGW_EXTENSION inline _variant_t::_variant_t(unsigned __int64 ui8Src) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t() throw() { ::VariantInit(this); }$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(BYTE bSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(IDispatch *pSrc,bool fAddRef) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(IUnknown *pSrc,bool fAddRef) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(VARIANT &varSrc,bool fCopy) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(__LONG32 lSrc,VARTYPE vtSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(bool boolSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(char cSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const CY &cySrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const DECIMAL &decSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const VARIANT &varSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const VARIANT *pSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const _bstr_t &bstrSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const _variant_t &varSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const char *pSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(const wchar_t *pSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(double dblSrc,VARTYPE vtSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(float fltSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(int iSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(short sSrc,VARTYPE vtSrc) {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(unsigned __LONG32 ulSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(unsigned int uiSrc) throw() {$/;"	f	class:_variant_t
_variant_t	.\comutil.h	/^inline _variant_t::_variant_t(unsigned short usSrc) throw() {$/;"	f	class:_variant_t
_wctime	.\time.h	/^  __CRT_INLINE wchar_t *__cdecl _wctime(const time_t *_Time) { return _wctime32(_Time); }$/;"	f
_wctime	.\time.h	/^  __CRT_INLINE wchar_t *__cdecl _wctime(const time_t *_Time) { return _wctime64(_Time); }$/;"	f
_wctime	.\wchar.h	/^  __CRT_INLINE wchar_t *__cdecl _wctime(const time_t *_Time) { return _wctime32(_Time); }$/;"	f
_wctime	.\wchar.h	/^  __CRT_INLINE wchar_t *__cdecl _wctime(const time_t *_Time) { return _wctime64(_Time); }$/;"	f
_wctime_s	.\sec_api\wchar_s.h	/^__CRT_INLINE errno_t __cdecl _wctime_s(wchar_t *_Buffer,size_t _SizeInWords,const time_t *_Time) { return _wctime64_s(_Buffer,_SizeInWords,_Time); }$/;"	f
_wctime_s	.\time.h	/^  __CRT_INLINE errno_t __cdecl _wctime_s (wchar_t *_Buffer,size_t _SizeInWords,const time_t *_Time) { return _wctime32_s (_Buffer,_SizeInWords,_Time); }$/;"	f
_wctime_s	.\time.h	/^  __CRT_INLINE errno_t __cdecl _wctime_s (wchar_t *_Buffer,size_t _SizeInWords,const time_t *_Time) { return _wctime64_s (_Buffer,_SizeInWords,_Time); }$/;"	f
_wctime_s	.\wchar.h	/^  __CRT_INLINE errno_t __cdecl _wctime_s (wchar_t *_Buffer,size_t _SizeInWords,const time_t *_Time) { return _wctime32_s (_Buffer,_SizeInWords,_Time); }$/;"	f
_wctime_s	.\wchar.h	/^  __CRT_INLINE errno_t __cdecl _wctime_s (wchar_t *_Buffer,size_t _SizeInWords,const time_t *_Time) { return _wctime64_s (_Buffer,_SizeInWords,_Time); }$/;"	f
_wutime	.\sys\utime.h	/^__CRT_INLINE int __cdecl _wutime(const wchar_t *_Filename,struct _utimbuf *_Utimbuf) {$/;"	f
_xgetbv	.\psdk_inc\intrin-impl.h	/^unsigned __int64 _xgetbv(unsigned int index)$/;"	f
add_horizontal	.\dvec.h	/^  friend double add_horizontal(F64vec2 &a)$/;"	f	class:F64vec2
add_horizontal	.\fvec.h	/^  friend float add_horizontal(F32vec4 &a) {$/;"	f	class:F32vec4
andnot	.\dvec.h	/^  friend F64vec2 andnot(const F64vec2 &a,const F64vec2 &b) { return _mm_andnot_pd(a,b); }$/;"	f	class:F64vec2
andnot	.\dvec.h	/^inline M128 andnot(const M128 &a,const M128 &b) { return _mm_andnot_si128(a,b); }$/;"	f
asctime_r	.\time.h	/^__forceinline char *__cdecl asctime_r(const struct tm *_Tm, char * _Str) {$/;"	f
asprintf	.\stdio.h	/^int asprintf(char **__ret, const char *__format, ...)$/;"	f
atoll	.\stdlib.h	/^  __MINGW_EXTENSION __CRT_INLINE long long  __cdecl atoll (const char * _c) { return _atoi64 (_c); }$/;"	f
cBytes	.\_dbdao.h	/^  ULONG cBytes() { return SysStringByteLen(m_bstr); }$/;"	f	class:CdbWide
cabs	.\complex.h	/^__CRT_INLINE double __MINGW_ATTRIB_CONST cabs (double _Complex _Z)$/;"	f
cabsf	.\complex.h	/^__CRT_INLINE float __MINGW_ATTRIB_CONST cabsf (float _Complex _Z)$/;"	f
cabsl	.\complex.h	/^__CRT_INLINE long double __MINGW_ATTRIB_CONST cabsl (long double _Complex _Z)$/;"	f
carg	.\complex.h	/^__CRT_INLINE  double __MINGW_ATTRIB_CONST carg (double _Complex _Z)$/;"	f
cargf	.\complex.h	/^__CRT_INLINE  float __MINGW_ATTRIB_CONST cargf (float _Complex _Z)$/;"	f
cargl	.\complex.h	/^__CRT_INLINE  long double __MINGW_ATTRIB_CONST cargl (long double _Complex _Z)$/;"	f
ceAddToFileTime	.\celib.h	/^static __inline VOID ceAddToFileTime(FILETIME *pft,LONGLONG ll) {$/;"	f
ceSubtractFileTimes	.\celib.h	/^static __inline LONGLONG ceSubtractFileTimes(FILETIME const *pft1,FILETIME const *pft2) {$/;"	f
cimag	.\complex.h	/^__CRT_INLINE double __MINGW_ATTRIB_CONST cimag (double _Complex _Z)$/;"	f
cimagf	.\complex.h	/^__CRT_INLINE float __MINGW_ATTRIB_CONST cimagf (float _Complex _Z)$/;"	f
cimagl	.\complex.h	/^__CRT_INLINE long double __MINGW_ATTRIB_CONST cimagl (long double _Complex _Z)$/;"	f
cmpeq	.\dvec.h	/^inline I16vec8 cmpeq(const I16vec8 &a,const I16vec8 &b) { return _mm_cmpeq_epi16(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline I32vec4 cmpeq(const I32vec4 &a,const I32vec4 &b) { return _mm_cmpeq_epi32(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline I8vec16 cmpeq(const I8vec16 &a,const I8vec16 &b) { return _mm_cmpeq_epi8(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline Is16vec8 cmpeq(const Is16vec8 &a,const Is16vec8 &b) { return _mm_cmpeq_epi16(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline Is32vec4 cmpeq(const Is32vec4 &a,const Is32vec4 &b) { return _mm_cmpeq_epi32(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline Is8vec16 cmpeq(const Is8vec16 &a,const Is8vec16 &b) { return _mm_cmpeq_epi8(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline Iu16vec8 cmpeq(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_cmpeq_epi16(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline Iu32vec4 cmpeq(const Iu32vec4 &a,const Iu32vec4 &b) { return _mm_cmpeq_epi32(a,b); }$/;"	f
cmpeq	.\dvec.h	/^inline Iu8vec16 cmpeq(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_cmpeq_epi8(a,b); }$/;"	f
cmpgt	.\dvec.h	/^inline Is16vec8 cmpgt(const Is16vec8 &a,const Is16vec8 &b) { return _mm_cmpgt_epi16(a,b); }$/;"	f
cmpgt	.\dvec.h	/^inline Is32vec4 cmpgt(const Is32vec4 &a,const Is32vec4 &b) { return _mm_cmpgt_epi32(a,b); }$/;"	f
cmpgt	.\dvec.h	/^inline Is8vec16 cmpgt(const Is8vec16 &a,const Is8vec16 &b) { return _mm_cmpgt_epi8(a,b); }$/;"	f
cmplt	.\dvec.h	/^inline Is16vec8 cmplt(const Is16vec8 &a,const Is16vec8 &b) { return _mm_cmpgt_epi16(b,a); }$/;"	f
cmplt	.\dvec.h	/^inline Is32vec4 cmplt(const Is32vec4 &a,const Is32vec4 &b) { return _mm_cmpgt_epi32(b,a); }$/;"	f
cmplt	.\dvec.h	/^inline Is8vec16 cmplt(const Is8vec16 &a,const Is8vec16 &b) { return _mm_cmplt_epi8(a,b); }$/;"	f
cmpneq	.\dvec.h	/^inline I16vec8 cmpneq(const I16vec8 &a,const I16vec8 &b) { return _mm_andnot_si128(_mm_cmpeq_epi16(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline I32vec4 cmpneq(const I32vec4 &a,const I32vec4 &b) { return _mm_andnot_si128(_mm_cmpeq_epi32(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline I8vec16 cmpneq(const I8vec16 &a,const I8vec16 &b) { return _mm_andnot_si128(_mm_cmpeq_epi8(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline Is16vec8 cmpneq(const Is16vec8 &a,const Is16vec8 &b) { return _mm_andnot_si128(_mm_cmpeq_epi16(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline Is32vec4 cmpneq(const Is32vec4 &a,const Is32vec4 &b) { return _mm_andnot_si128(_mm_cmpeq_epi32(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline Is8vec16 cmpneq(const Is8vec16 &a,const Is8vec16 &b) { return _mm_andnot_si128(_mm_cmpeq_epi8(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline Iu16vec8 cmpneq(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_andnot_si128(_mm_cmpeq_epi16(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline Iu32vec4 cmpneq(const Iu32vec4 &a,const Iu32vec4 &b) { return _mm_andnot_si128(_mm_cmpeq_epi32(a,b),get_mask128()); }$/;"	f
cmpneq	.\dvec.h	/^inline Iu8vec16 cmpneq(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_andnot_si128(_mm_cmpeq_epi8(a,b),get_mask128()); }$/;"	f
conj	.\complex.h	/^__CRT_INLINE double _Complex __MINGW_ATTRIB_CONST conj (double _Complex _Z)$/;"	f
conjf	.\complex.h	/^__CRT_INLINE float _Complex __MINGW_ATTRIB_CONST conjf (float _Complex _Z)$/;"	f
conjl	.\complex.h	/^__CRT_INLINE long double _Complex __MINGW_ATTRIB_CONST conjl (long double _Complex _Z)$/;"	f
copy	.\comutil.h	/^inline BSTR _bstr_t::copy(bool fCopy) const { return (m_Data!=NULL) ? (fCopy ? m_Data->Copy() : m_Data->GetWString()) : NULL; }$/;"	f	class:_bstr_t
copysign	.\math.h	/^  __CRT_INLINE double __cdecl copysign (double x, double y)$/;"	f
copysignf	.\math.h	/^  __CRT_INLINE float __cdecl copysignf (float x, float y)$/;"	f
coshf	.\math.h	/^  __CRT_INLINE float coshf(float _X) { return ((float)cosh((double)_X)); }$/;"	f
creal	.\complex.h	/^__CRT_INLINE double __MINGW_ATTRIB_CONST creal (double _Complex _Z)$/;"	f
crealf	.\complex.h	/^__CRT_INLINE float __MINGW_ATTRIB_CONST crealf (float _Complex _Z)$/;"	f
creall	.\complex.h	/^__CRT_INLINE long double __MINGW_ATTRIB_CONST creall (long double _Complex _Z)$/;"	f
ctime	.\time.h	/^__CRT_INLINE char *__cdecl ctime(const time_t *_Time) { return _ctime32(_Time); }$/;"	f
ctime	.\time.h	/^__CRT_INLINE char *__cdecl ctime(const time_t *_Time) { return _ctime64(_Time); }$/;"	f
ctime_r	.\time.h	/^__forceinline char *__cdecl ctime_r(const time_t *_Time, char *_Str) {$/;"	f
ctime_s	.\time.h	/^__forceinline errno_t __cdecl ctime_s(char *_Buf,size_t _SizeInBytes,const time_t *_Time) { return _ctime32_s(_Buf,_SizeInBytes,_Time); }$/;"	f
ctime_s	.\time.h	/^__forceinline errno_t __cdecl ctime_s(char *_Buf,size_t _SizeInBytes,const time_t *_Time) { return _ctime64_s(_Buf,_SizeInBytes,_Time); }$/;"	f
data	.\dxtmpl.h	/^  void *data() { return this+1; }$/;"	f	struct:CDXPlex
decltype	.\comip.h	/^  _com_ptr_t(decltype(nullptr)) : m_pInterface(NULL) {}$/;"	f	class:_com_ptr_t
decltype	.\wrl\client.h	/^            ComPtr &operator=(decltype(nullptr)) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
decltype	.\wrl\client.h	/^            ComPtr(decltype(nullptr)) throw() : ptr_(nullptr) {}$/;"	f	class:Microsoft::WRL::ComPtr
difftime	.\time.h	/^__CRT_INLINE double __cdecl difftime(time_t _Time1,time_t _Time2)$/;"	f
expf	.\math.h	/^  __CRT_INLINE float expf(float _X) { return ((float)exp((double)_X)); }$/;"	f
fabs	.\math.h	/^  __CRT_INLINE double __cdecl fabs (double x)$/;"	f
fabsf	.\math.h	/^  __CRT_INLINE float __cdecl fabsf (float x)$/;"	f
fabsl	.\math.h	/^  __CRT_INLINE long double __cdecl fabsl (long double x)$/;"	f
fprintf	.\stdio.h	/^int fprintf (FILE *__stream, const char *__format, ...)$/;"	f
frexpf	.\math.h	/^  __CRT_INLINE float frexpf(float _X,int *_Y) { return ((float)frexp((double)_X,_Y)); }$/;"	f
fscanf	.\stdio.h	/^int fscanf(FILE *__stream, const char *__format, ...)$/;"	f
fstat	.\sys\stat.h	/^ fstat(int _Desc,struct stat *_Stat) {$/;"	f
ftime	.\sys\timeb.h	/^  __CRT_INLINE void __cdecl ftime(struct timeb *_Tmb) {$/;"	f
ftruncate	.\unistd.h	/^__CRT_INLINE int ftruncate(int __fd, _off_t __length)$/;"	f
ftruncate	.\unistd.h	/^__CRT_INLINE int ftruncate(int __fd, off32_t __length)$/;"	f
fwide	.\wchar.h	/^  __CRT_INLINE int __cdecl fwide(FILE *_F,int _M) { (void)_F; return (_M); }$/;"	f
fwprintf	.\stdio.h	/^int fwprintf (FILE *__stream, const wchar_t *__format, ...)$/;"	f
fwprintf	.\wchar.h	/^int fwprintf (FILE *__stream, const wchar_t *__format, ...)$/;"	f
fwscanf	.\stdio.h	/^int fwscanf(FILE *__stream, const wchar_t *__format, ...)$/;"	f
fwscanf	.\wchar.h	/^int fwscanf(FILE *__stream, const wchar_t *__format, ...)$/;"	f
get_Count	.\mspcoll.h	/^  STDMETHOD(get_Count)(__LONG32 *retval) {$/;"	f	class:CTapiBstrCollection
get_Count	.\mspcoll.h	/^  STDMETHOD(get_Count)(__LONG32 *retval) {$/;"	f	class:CTapiIfCollection
get_Item	.\mspcoll.h	/^  STDMETHOD(get_Item)(__LONG32 Index,VARIANT *retval) {$/;"	f	class:CTapiBstrCollection
get_Item	.\mspcoll.h	/^  STDMETHOD(get_Item)(__LONG32 Index,VARIANT *retval) {$/;"	f	class:CTapiIfCollection
get__NewEnum	.\mspcoll.h	/^  HRESULT WINAPI get__NewEnum(IUnknown **retval) {$/;"	f	class:CTapiBstrCollection
get__NewEnum	.\mspcoll.h	/^  HRESULT WINAPI get__NewEnum(IUnknown **retval) {$/;"	f	class:CTapiIfCollection
get_mask128	.\dvec.h	/^__MINGW_EXTENSION inline const __m128i get_mask128()$/;"	f
getwchar	.\stdio.h	/^  __CRT_INLINE wint_t __cdecl getwchar() {return (fgetwc(stdin)); }$/;"	f
getwchar	.\wchar.h	/^  __CRT_INLINE wint_t __cdecl getwchar() {return (fgetwc(stdin)); }$/;"	f
gmtime	.\time.h	/^__CRT_INLINE struct tm *__cdecl gmtime(const time_t *_Time) { return _gmtime32(_Time); }$/;"	f
gmtime	.\time.h	/^__CRT_INLINE struct tm *__cdecl gmtime(const time_t *_Time) { return _gmtime64(_Time); }$/;"	f
gmtime_r	.\time.h	/^__forceinline struct tm *__cdecl gmtime_r(const time_t *_Time, struct tm *_Tm) {$/;"	f
gmtime_s	.\time.h	/^__forceinline errno_t __cdecl gmtime_s(struct tm *_Tm, const time_t *_Time)   { return _gmtime32_s(_Tm, _Time); }$/;"	f
gmtime_s	.\time.h	/^__forceinline errno_t __cdecl gmtime_s(struct tm *_Tm, const time_t *_Time) { return _gmtime64_s(_Tm, _Time); }$/;"	f
hypotf	.\math.h	/^  __CRT_INLINE float __cdecl hypotf (float x, float y) { return (float) hypot ((double)x, (double)y);}$/;"	f
imaxabs	.\inttypes.h	/^__CRT_INLINE intmax_t __cdecl imaxabs (intmax_t j)$/;"	f
init	.\d2d1helper.h	/^    D2D1FORCEINLINE void init(UINT32 rgb, FLOAT _a) {$/;"	f	class:D2D1::ColorF
isleadbyte	.\wctype.h	/^  __CRT_INLINE int __cdecl isleadbyte(int _C) {return (__pctype_func()[(unsigned char)(_C)] & _LEADBYTE); }$/;"	f
iswalnum	.\wctype.h	/^  __CRT_INLINE int __cdecl iswalnum(wint_t _C) {return (iswctype(_C,_ALPHA|_DIGIT)); }$/;"	f
iswalpha	.\wctype.h	/^  __CRT_INLINE int __cdecl iswalpha(wint_t _C) {return (iswctype(_C,_ALPHA)); }$/;"	f
iswascii	.\wctype.h	/^  __CRT_INLINE int __cdecl iswascii(wint_t _C) {return ((unsigned)(_C) < 0x80); }$/;"	f
iswcntrl	.\wctype.h	/^  __CRT_INLINE int __cdecl iswcntrl(wint_t _C) {return (iswctype(_C,_CONTROL)); }$/;"	f
iswdigit	.\wctype.h	/^  __CRT_INLINE int __cdecl iswdigit(wint_t _C) {return (iswctype(_C,_DIGIT)); }$/;"	f
iswgraph	.\wctype.h	/^  __CRT_INLINE int __cdecl iswgraph(wint_t _C) {return (iswctype(_C,_PUNCT|_ALPHA|_DIGIT)); }$/;"	f
iswlower	.\wctype.h	/^  __CRT_INLINE int __cdecl iswlower(wint_t _C) {return (iswctype(_C,_LOWER)); }$/;"	f
iswprint	.\wctype.h	/^  __CRT_INLINE int __cdecl iswprint(wint_t _C) {return (iswctype(_C,_BLANK|_PUNCT|_ALPHA|_DIGIT)); }$/;"	f
iswpunct	.\wctype.h	/^  __CRT_INLINE int __cdecl iswpunct(wint_t _C) {return (iswctype(_C,_PUNCT)); }$/;"	f
iswspace	.\wctype.h	/^  __CRT_INLINE int __cdecl iswspace(wint_t _C) {return (iswctype(_C,_SPACE)); }$/;"	f
iswupper	.\wctype.h	/^  __CRT_INLINE int __cdecl iswupper(wint_t _C) {return (iswctype(_C,_UPPER)); }$/;"	f
iswxdigit	.\wctype.h	/^  __CRT_INLINE int __cdecl iswxdigit(wint_t _C) {return (iswctype(_C,_HEX)); }$/;"	f
ldexpf	.\math.h	/^  __CRT_INLINE float __cdecl ldexpf (float x, int expn) { return (float) ldexp ((double)x, expn); }$/;"	f
length	.\comutil.h	/^inline unsigned int _bstr_t::length() const throw() { return (m_Data!=NULL) ? m_Data->Length() : 0; }$/;"	f	class:_bstr_t
llabs	.\stdlib.h	/^  __MINGW_EXTENSION __CRT_INLINE long long __cdecl llabs(long long _j) { return (_j >= 0 ? _j : -_j); }$/;"	f
lltoa	.\stdlib.h	/^  __MINGW_EXTENSION __CRT_INLINE char *__cdecl lltoa (long long _n, char * _c, int _i) { return _i64toa (_n, _c, _i); }$/;"	f
lltow	.\stdlib.h	/^  __MINGW_EXTENSION __CRT_INLINE wchar_t *__cdecl lltow (long long _n, wchar_t * _w, int _i) { return _i64tow (_n, _w, _i); }$/;"	f
loadu	.\dvec.h	/^inline void loadu(F64vec2 &a,double *p) { a = _mm_loadu_pd(p); }$/;"	f
loadu	.\fvec.h	/^inline void loadu(F32vec4 &a,float *p) { a = _mm_loadu_ps(p); }$/;"	f
localtime	.\time.h	/^__CRT_INLINE struct tm *__cdecl localtime(const time_t *_Time) { return _localtime32(_Time); }$/;"	f
localtime	.\time.h	/^__CRT_INLINE struct tm *__cdecl localtime(const time_t *_Time) { return _localtime64(_Time); }$/;"	f
localtime_r	.\time.h	/^__forceinline struct tm *__cdecl localtime_r(const time_t *_Time, struct tm *_Tm) {$/;"	f
localtime_s	.\time.h	/^__forceinline errno_t __cdecl localtime_s(struct tm *_Tm,const time_t *_Time) { return _localtime32_s(_Tm,_Time); }$/;"	f
localtime_s	.\time.h	/^__forceinline errno_t __cdecl localtime_s(struct tm *_Tm,const time_t *_Time) { return _localtime64_s(_Tm,_Time); }$/;"	f
mbsinit	.\wchar.h	/^  __CRT_INLINE int __cdecl mbsinit(const mbstate_t *_P) { return (!_P || *_P==0); }$/;"	f
memcpy_inline	.\winnt.h	/^    __CRT_INLINE PVOID __cdecl memcpy_inline(void *dst,const void *src,size_t size) {$/;"	f
mktime	.\time.h	/^__CRT_INLINE time_t __cdecl mktime(struct tm *_Tm) { return _mktime32(_Tm); }$/;"	f
mktime	.\time.h	/^__CRT_INLINE time_t __cdecl mktime(struct tm *_Tm) { return _mktime64(_Tm); }$/;"	f
move_mask	.\dvec.h	/^inline int move_mask(const F64vec2 &a) { return _mm_movemask_pd(a); }$/;"	f
move_mask	.\fvec.h	/^inline int move_mask(const F32vec4 &a) { return _mm_movemask_ps(a); }$/;"	f
mul_add	.\dvec.h	/^inline Is32vec4 mul_add(const Is16vec8 &a,const Is16vec8 &b) { return _mm_madd_epi16(a,b);}$/;"	f
mul_high	.\dvec.h	/^inline I16vec8 mul_high(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_mulhi_epu16(a,b); }$/;"	f
mul_high	.\dvec.h	/^inline Is16vec8 mul_high(const Is16vec8 &a,const Is16vec8 &b) { return _mm_mulhi_epi16(a,b); }$/;"	f
operator !	.\comutil.h	/^inline bool _bstr_t::operator!() const throw() { return (m_Data!=NULL) ? !m_Data->GetWString() : true; }$/;"	f	class:_bstr_t
operator !=	.\comip.h	/^  bool operator!=(int null) { return !(operator==(null)); }$/;"	f	class:_com_ptr_t
operator !=	.\comip.h	/^  bool operator!=(long long null) { return !(operator==(null)); }$/;"	f	class:_com_ptr_t
operator !=	.\comip.h	/^  template<typename _InterfaceType> bool operator!=(_InterfaceType *p) { return !(operator==(p)); }$/;"	f	class:_com_ptr_t
operator !=	.\comip.h	/^  template<typename _OtherIID> bool operator!=(_com_ptr_t<_OtherIID> &p) { return !(operator==(p)); }$/;"	f	class:_com_ptr_t
operator !=	.\comip.h	/^  template<typename _OtherIID> bool operator!=(const _com_ptr_t<_OtherIID> &p) { return !(operator==(p)); }$/;"	f	class:_com_ptr_t
operator !=	.\comip.h	/^template<typename _Interface,typename _InterfacePtr> bool operator!=(_Interface *i,_com_ptr_t<_InterfacePtr> &p) { return p!=i; }$/;"	f
operator !=	.\comip.h	/^template<typename _Interface> bool operator!=(int null,_com_ptr_t<_Interface> &p) {$/;"	f
operator !=	.\comutil.h	/^inline bool _bstr_t::operator!=(const _bstr_t &str) const throw() { return _Compare(str)!=0; }$/;"	f	class:_bstr_t
operator !=	.\comutil.h	/^inline bool _variant_t::operator!=(const VARIANT &varSrc) const throw()$/;"	f	class:_variant_t
operator !=	.\comutil.h	/^inline bool _variant_t::operator!=(const VARIANT *pSrc) const throw()$/;"	f	class:_variant_t
operator !=	.\guiddef.h	/^__inline bool operator!= (REFGUID guidOne, REFGUID guidOther) { return ! (guidOne == guidOther); }$/;"	f
operator !=	.\kcom.h	/^__inline WINBOOL operator!=(const GUID& guidOne, const GUID& guidOther) {$/;"	f
operator !=	.\propkeydef.h	/^inline bool operator!=(REFPROPERTYKEY guidOne, REFPROPERTYKEY guidOther)$/;"	f
operator &	.\comip.h	/^  Interface **operator&() throw() {$/;"	f	class:_com_ptr_t
operator &	.\dvec.h	/^  friend F64vec2 operator &(const F64vec2 &a,const F64vec2 &b) { return _mm_and_pd(a,b); }$/;"	f	class:F64vec2
operator &	.\dvec.h	/^inline M128 operator&(const M128 &a,const M128 &b) { return _mm_and_si128(a,b); }$/;"	f
operator &	.\fvec.h	/^  friend F32vec1 operator &(const F32vec1 &a,const F32vec1 &b) { return _mm_and_ps(a,b); }$/;"	f	class:F32vec1
operator &	.\fvec.h	/^  friend F32vec4 operator &(const F32vec4 &a,const F32vec4 &b) { return _mm_and_ps(a,b); }$/;"	f	class:F32vec4
operator &	.\msi.h	/^  MSIHANDLE *operator &() { if (m_h) MsiCloseHandle (m_h); m_h = 0; return &m_h; }$/;"	f	class:PMSIHANDLE
operator &	.\wrl\client.h	/^            Details::ComPtrRef<ComPtr<T>> operator&() throw()  {$/;"	f	class:Microsoft::WRL::ComPtr
operator &	.\wrl\client.h	/^            const Details::ComPtrRef<const ComPtr<T>> operator&() const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator &=	.\dvec.h	/^  F64vec2& operator &=(F64vec2 &a) { return *this = _mm_and_pd(vec,a); }$/;"	f	class:F64vec2
operator &=	.\dvec.h	/^  I128vec1& operator&=(const M128 &a) { return *this = (I128vec1) _mm_and_si128(vec,a); }$/;"	f	class:I128vec1
operator &=	.\dvec.h	/^  I16vec8& operator&=(const M128 &a) { return *this = (I16vec8) _mm_and_si128(vec,a); }$/;"	f	class:I16vec8
operator &=	.\dvec.h	/^  I32vec4& operator&=(const M128 &a) { return *this = (I32vec4) _mm_and_si128(vec,a); }$/;"	f	class:I32vec4
operator &=	.\dvec.h	/^  I64vec2& operator&=(const M128 &a) { return *this = (I64vec2) _mm_and_si128(vec,a); }$/;"	f	class:I64vec2
operator &=	.\dvec.h	/^  I8vec16& operator&=(const M128 &a) { return *this = (I8vec16) _mm_and_si128(vec,a); }$/;"	f	class:I8vec16
operator &=	.\dvec.h	/^  Is16vec8& operator&=(const M128 &a) { return *this = (Is16vec8) _mm_and_si128(vec,a); }$/;"	f	class:Is16vec8
operator &=	.\dvec.h	/^  Is32vec4& operator&=(const M128 &a) { return *this = (Is32vec4) _mm_and_si128(vec,a); }$/;"	f	class:Is32vec4
operator &=	.\dvec.h	/^  Is8vec16& operator&=(const M128 &a) { return *this = (Is8vec16) _mm_and_si128(vec,a); }$/;"	f	class:Is8vec16
operator &=	.\dvec.h	/^  Iu16vec8& operator&=(const M128 &a) { return *this = (Iu16vec8) _mm_and_si128(vec,a); }$/;"	f	class:Iu16vec8
operator &=	.\dvec.h	/^  Iu32vec4& operator&=(const M128 &a) { return *this = (Iu32vec4) _mm_and_si128(vec,a); }$/;"	f	class:Iu32vec4
operator &=	.\dvec.h	/^  Iu8vec16& operator&=(const M128 &a) { return *this = (Iu8vec16) _mm_and_si128(vec,a); }$/;"	f	class:Iu8vec16
operator &=	.\dvec.h	/^  M128& operator&=(const M128 &a) { return *this = (M128) _mm_and_si128(vec,a); }$/;"	f	class:M128
operator &=	.\fvec.h	/^  F32vec1& operator &=(F32vec1 &a) { return *this = _mm_and_ps(vec,a); }$/;"	f	class:F32vec1
operator &=	.\fvec.h	/^  F32vec4& operator &=(F32vec4 &a) { return *this = _mm_and_ps(vec,a); }$/;"	f	class:F32vec4
operator &=	.\ivec.h	/^    M64& operator&=(const M64 &a) { return *this = (M64) _m_pand(vec,a); }$/;"	f	class:M64
operator ()	.\d3dtypes.h	/^    D3DVALUE &operator () (int r, int c)$/;"	f	struct:_D3DMATRIX
operator ()	.\d3dtypes.h	/^    const D3DVALUE &operator() (int r, int c) const$/;"	f	struct:_D3DMATRIX
operator *	.\comip.h	/^  Interface& operator*() const {$/;"	f	class:_com_ptr_t
operator *	.\d2d1helper.h	/^    D2D1FORCEINLINE Matrix3x2F operator*(const Matrix3x2F &matrix) const {$/;"	f	class:D2D1::Matrix3x2F
operator *	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_MATRIX_3X2_F operator*(const D2D1_MATRIX_3X2_F &matrix1, const D2D1_MATRIX_3X2_F &matrix2) {$/;"	f
operator *	.\d2d1helper.h	/^D2D1FORCEINLINE D2D1_POINT_2F operator*(const D2D1_POINT_2F &point, const D2D1_MATRIX_3X2_F &matrix) {$/;"	f	namespace:D2D1
operator *	.\dvec.h	/^  friend F64vec2 operator *(const F64vec2 &a,const F64vec2 &b) { return _mm_mul_pd(a,b); }$/;"	f	class:F64vec2
operator *	.\dvec.h	/^inline I16vec8 operator*(const I16vec8 &a,const I16vec8 &b) { return _mm_mullo_epi16(a,b); }$/;"	f
operator *	.\dvec.h	/^inline I64vec2 operator*(const Iu32vec4 &a,const Iu32vec4 &b) { return _mm_mul_epu32(a,b); }$/;"	f
operator *	.\dvec.h	/^inline Is16vec8 operator*(const Is16vec8 &a,const Is16vec8 &b) { return _mm_mullo_epi16(a,b); }$/;"	f
operator *	.\dvec.h	/^inline Iu16vec8 operator*(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_mullo_epi16(a,b); }$/;"	f
operator *	.\fvec.h	/^  friend F32vec1 operator *(const F32vec1 &a,const F32vec1 &b) { return _mm_mul_ss(a,b); }$/;"	f	class:F32vec1
operator *	.\fvec.h	/^  friend F32vec4 operator *(const F32vec4 &a,const F32vec4 &b) { return _mm_mul_ps(a,b); }$/;"	f	class:F32vec4
operator *	.\wrl\client.h	/^                typename ComPtrRefBase<T>::InterfaceType *operator*() throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRef
operator *=	.\dvec.h	/^  F64vec2& operator *=(F64vec2 &a) { return *this = _mm_mul_pd(vec,a); }$/;"	f	class:F64vec2
operator *=	.\dvec.h	/^  I16vec8& operator *=(const I16vec8 &a) { return *this = (I16vec8) _mm_mullo_epi16(vec,a); }$/;"	f	class:I16vec8
operator *=	.\dvec.h	/^  Is16vec8& operator *=(const I16vec8 &a) { return *this = (Is16vec8) _mm_mullo_epi16(vec,a); }$/;"	f	class:Is16vec8
operator *=	.\dvec.h	/^  Iu16vec8& operator *=(const I16vec8 &a) { return *this = (Iu16vec8) _mm_mullo_epi16(vec,a); }$/;"	f	class:Iu16vec8
operator *=	.\fvec.h	/^  F32vec1& operator *=(F32vec1 &a) { return *this = _mm_mul_ss(vec,a); }$/;"	f	class:F32vec1
operator *=	.\fvec.h	/^  F32vec4& operator *=(F32vec4 &a) { return *this = _mm_mul_ps(vec,a); }$/;"	f	class:F32vec4
operator +	.\comutil.h	/^inline _bstr_t _bstr_t::operator+(const _bstr_t &s) const {$/;"	f	class:_bstr_t
operator +	.\comutil.h	/^inline _bstr_t operator+(const char *s1,const _bstr_t &s2) {$/;"	f
operator +	.\comutil.h	/^inline _bstr_t operator+(const wchar_t *s1,const _bstr_t &s2) {$/;"	f
operator +	.\dvec.h	/^  friend F64vec2 operator +(const F64vec2 &a,const F64vec2 &b) { return _mm_add_pd(a,b); }$/;"	f	class:F64vec2
operator +	.\fvec.h	/^  friend F32vec1 operator +(const F32vec1 &a,const F32vec1 &b) { return _mm_add_ss(a,b); }$/;"	f	class:F32vec1
operator +	.\fvec.h	/^  friend F32vec4 operator +(const F32vec4 &a,const F32vec4 &b) { return _mm_add_ps(a,b); }$/;"	f	class:F32vec4
operator +	.\gdiplus\gdiplustypes.h	/^	Point operator+(const Point& point) const {$/;"	f	struct:Point
operator +	.\gdiplus\gdiplustypes.h	/^	PointF operator+(const PointF& point) const {$/;"	f	struct:PointF
operator +	.\gdiplus\gdiplustypes.h	/^	Size operator+(const Size& size) const {$/;"	f	struct:Size
operator +	.\gdiplus\gdiplustypes.h	/^	SizeF operator+(const SizeF& size) const {$/;"	f	struct:SizeF
operator +=	.\comutil.h	/^inline _bstr_t &_bstr_t::operator+=(const _bstr_t &s) {$/;"	f	class:_bstr_t
operator +=	.\dvec.h	/^  F64vec2& operator +=(F64vec2 &a) { return *this = _mm_add_pd(vec,a); }$/;"	f	class:F64vec2
operator +=	.\dvec.h	/^  I16vec8& operator +=(const I16vec8 &a) { return *this = (I16vec8) _mm_add_epi16(vec,a); }$/;"	f	class:I16vec8
operator +=	.\dvec.h	/^  I32vec4& operator +=(const I32vec4 &a) { return *this = (I32vec4)_mm_add_epi32(vec,a); }$/;"	f	class:I32vec4
operator +=	.\dvec.h	/^  I64vec2& operator +=(const I64vec2 &a) { return *this = (I64vec2) _mm_add_epi64(vec,a); }$/;"	f	class:I64vec2
operator +=	.\dvec.h	/^  I8vec16& operator +=(const I8vec16 &a) { return *this = (I8vec16) _mm_add_epi8(vec,a); }$/;"	f	class:I8vec16
operator +=	.\dvec.h	/^  Is16vec8& operator +=(const I16vec8 &a) { return *this = (Is16vec8) _mm_add_epi16(vec,a); }$/;"	f	class:Is16vec8
operator +=	.\dvec.h	/^  Is32vec4& operator +=(const I32vec4 &a) { return *this = (Is32vec4)_mm_add_epi32(vec,a); }$/;"	f	class:Is32vec4
operator +=	.\dvec.h	/^  Is8vec16& operator +=(const I8vec16 &a) { return *this = (Is8vec16) _mm_add_epi8(vec,a); }$/;"	f	class:Is8vec16
operator +=	.\dvec.h	/^  Iu16vec8& operator +=(const I16vec8 &a) { return *this = (Iu16vec8) _mm_add_epi16(vec,a); }$/;"	f	class:Iu16vec8
operator +=	.\dvec.h	/^  Iu32vec4& operator +=(const I32vec4 &a) { return *this = (Iu32vec4)_mm_add_epi32(vec,a); }$/;"	f	class:Iu32vec4
operator +=	.\dvec.h	/^  Iu8vec16& operator +=(const I8vec16 &a) { return *this = (Iu8vec16) _mm_add_epi8(vec,a); }$/;"	f	class:Iu8vec16
operator +=	.\fvec.h	/^  F32vec1& operator +=(F32vec1 &a) { return *this = _mm_add_ss(vec,a); }$/;"	f	class:F32vec1
operator +=	.\fvec.h	/^  F32vec4& operator +=(F32vec4 &a) { return *this = _mm_add_ps(vec,a); }$/;"	f	class:F32vec4
operator -	.\dvec.h	/^  friend F64vec2 operator -(const F64vec2 &a,const F64vec2 &b) { return _mm_sub_pd(a,b); }$/;"	f	class:F64vec2
operator -	.\fvec.h	/^  friend F32vec1 operator -(const F32vec1 &a,const F32vec1 &b) { return _mm_sub_ss(a,b); }$/;"	f	class:F32vec1
operator -	.\fvec.h	/^  friend F32vec4 operator -(const F32vec4 &a,const F32vec4 &b) { return _mm_sub_ps(a,b); }$/;"	f	class:F32vec4
operator -	.\gdiplus\gdiplustypes.h	/^	Point operator-(const Point& point) const {$/;"	f	struct:Point
operator -	.\gdiplus\gdiplustypes.h	/^	PointF operator-(const PointF& point) const {$/;"	f	struct:PointF
operator -	.\gdiplus\gdiplustypes.h	/^	Size operator-(const Size& size) const {$/;"	f	struct:Size
operator -	.\gdiplus\gdiplustypes.h	/^	SizeF operator-(const SizeF& size) const {$/;"	f	struct:SizeF
operator -=	.\dvec.h	/^  F64vec2& operator -=(F64vec2 &a) { return *this = _mm_sub_pd(vec,a); }$/;"	f	class:F64vec2
operator -=	.\dvec.h	/^  I16vec8& operator -=(const I16vec8 &a) { return *this = (I16vec8) _mm_sub_epi16(vec,a); }$/;"	f	class:I16vec8
operator -=	.\dvec.h	/^  I32vec4& operator -=(const I32vec4 &a) { return *this = (I32vec4)_mm_sub_epi32(vec,a); }$/;"	f	class:I32vec4
operator -=	.\dvec.h	/^  I64vec2& operator -=(const I64vec2 &a) { return *this = (I64vec2) _mm_sub_epi64(vec,a); }$/;"	f	class:I64vec2
operator -=	.\dvec.h	/^  I8vec16& operator -=(const I8vec16 &a) { return *this = (I8vec16) _mm_sub_epi8(vec,a); }$/;"	f	class:I8vec16
operator -=	.\dvec.h	/^  Is16vec8& operator -=(const I16vec8 &a) { return *this = (Is16vec8) _mm_sub_epi16(vec,a); }$/;"	f	class:Is16vec8
operator -=	.\dvec.h	/^  Is32vec4& operator -=(const I32vec4 &a) { return *this = (Is32vec4)_mm_sub_epi32(vec,a); }$/;"	f	class:Is32vec4
operator -=	.\dvec.h	/^  Is8vec16& operator -=(const I8vec16 &a) { return *this = (Is8vec16) _mm_sub_epi8(vec,a); }$/;"	f	class:Is8vec16
operator -=	.\dvec.h	/^  Iu16vec8& operator -=(const I16vec8 &a) { return *this = (Iu16vec8) _mm_sub_epi16(vec,a); }$/;"	f	class:Iu16vec8
operator -=	.\dvec.h	/^  Iu32vec4& operator -=(const I32vec4 &a) { return *this = (Iu32vec4)_mm_sub_epi32(vec,a); }$/;"	f	class:Iu32vec4
operator -=	.\dvec.h	/^  Iu8vec16& operator -=(const I8vec16 &a) { return *this = (Iu8vec16) _mm_sub_epi8(vec,a); }$/;"	f	class:Iu8vec16
operator -=	.\fvec.h	/^  F32vec1& operator -=(F32vec1 &a) { return *this = _mm_sub_ss(vec,a); }$/;"	f	class:F32vec1
operator -=	.\fvec.h	/^  F32vec4& operator -=(F32vec4 &a) { return *this = _mm_sub_ps(vec,a); }$/;"	f	class:F32vec4
operator ->	.\comip.h	/^  Interface *operator->() const {$/;"	f	class:_com_ptr_t
operator ->	.\wrl\client.h	/^            InterfaceType *operator->() const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator /	.\dvec.h	/^  friend F64vec2 operator \/(const F64vec2 &a,const F64vec2 &b) { return _mm_div_pd(a,b); }$/;"	f	class:F64vec2
operator /	.\fvec.h	/^  friend F32vec1 operator \/(const F32vec1 &a,const F32vec1 &b) { return _mm_div_ss(a,b); }$/;"	f	class:F32vec1
operator /	.\fvec.h	/^  friend F32vec4 operator \/(const F32vec4 &a,const F32vec4 &b) { return _mm_div_ps(a,b); }$/;"	f	class:F32vec4
operator /=	.\dvec.h	/^  F64vec2& operator \/=(F64vec2 &a) { return *this = _mm_div_pd(vec,a); }$/;"	f	class:F64vec2
operator /=	.\fvec.h	/^  F32vec1& operator \/=(F32vec1 &a) { return *this = _mm_div_ss(vec,a); }$/;"	f	class:F32vec1
operator /=	.\fvec.h	/^  F32vec4& operator \/=(F32vec4 &a) { return *this = _mm_div_ps(vec,a); }$/;"	f	class:F32vec4
operator <	.\comip.h	/^  template<typename _InterfaceType> bool operator<(_InterfaceType *p) { return _CompareUnknown(p)<0; }$/;"	f	class:_com_ptr_t
operator <	.\comip.h	/^  template<typename _OtherIID> bool operator<(_com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)<0; }$/;"	f	class:_com_ptr_t
operator <	.\comip.h	/^  template<typename _OtherIID> bool operator<(const _com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)<0; }$/;"	f	class:_com_ptr_t
operator <	.\comip.h	/^template<typename _Interface,typename _InterfacePtr> bool operator<(_Interface *i,_com_ptr_t<_InterfacePtr> &p) { return p>i; }$/;"	f
operator <	.\comip.h	/^template<typename _Interface> bool operator<(int null,_com_ptr_t<_Interface> &p) {$/;"	f
operator <	.\comutil.h	/^inline bool _bstr_t::operator<(const _bstr_t &str) const throw() { return _Compare(str)<0; }$/;"	f	class:_bstr_t
operator <<	.\dvec.h	/^  I16vec8 operator<<(const M128 &a) { return _mm_sll_epi16(vec,a); }$/;"	f	class:I16vec8
operator <<	.\dvec.h	/^  I16vec8 operator<<(int count) { return _mm_slli_epi16(vec,count); }$/;"	f	class:I16vec8
operator <<	.\dvec.h	/^  I32vec4 operator<<(const I32vec4 &a) { return _mm_sll_epi32(vec,a); }$/;"	f	class:I32vec4
operator <<	.\dvec.h	/^  I32vec4 operator<<(int count) { return _mm_slli_epi32(vec,count); }$/;"	f	class:I32vec4
operator <<	.\dvec.h	/^  I64vec2 operator<<(const I64vec2 &a) { return _mm_sll_epi64(vec,a); }$/;"	f	class:I64vec2
operator <<	.\dvec.h	/^  I64vec2 operator<<(int count) { return _mm_slli_epi64(vec,count); }$/;"	f	class:I64vec2
operator <<	.\dvec.h	/^  Is16vec8 operator<<(const M128 &a) { return _mm_sll_epi16(vec,a); }$/;"	f	class:Is16vec8
operator <<	.\dvec.h	/^  Is16vec8 operator<<(int count) { return _mm_slli_epi16(vec,count); }$/;"	f	class:Is16vec8
operator <<	.\dvec.h	/^  Is32vec4 operator<<(const M128 &a) { return _mm_sll_epi32(vec,a); }$/;"	f	class:Is32vec4
operator <<	.\dvec.h	/^  Is32vec4 operator<<(int count) { return _mm_slli_epi32(vec,count); }$/;"	f	class:Is32vec4
operator <<	.\dvec.h	/^  Iu16vec8 operator<<(const M128 &a) { return _mm_sll_epi16(vec,a); }$/;"	f	class:Iu16vec8
operator <<	.\dvec.h	/^  Iu16vec8 operator<<(int count) { return _mm_slli_epi16(vec,count); }$/;"	f	class:Iu16vec8
operator <<	.\dvec.h	/^  Iu32vec4 operator<<(const M128 &a) { return _mm_sll_epi32(vec,a); }$/;"	f	class:Iu32vec4
operator <<	.\dvec.h	/^  Iu32vec4 operator<<(int count) { return _mm_slli_epi32(vec,count); }$/;"	f	class:Iu32vec4
operator <<	.\dvec.h	/^  friend std::ostream & operator<<(std::ostream & os,const F64vec2 &a) {$/;"	f	class:F64vec2
operator <<	.\dvec.h	/^  friend std::ostream& operator << (std::ostream &os,const Is8vec16 &a)$/;"	f	class:Is8vec16
operator <<	.\dvec.h	/^  friend std::ostream& operator << (std::ostream &os,const Iu16vec8 &a)$/;"	f	class:Iu16vec8
operator <<	.\dvec.h	/^  friend std::ostream& operator << (std::ostream &os,const Iu8vec16 &a)$/;"	f	class:Iu8vec16
operator <<	.\dvec.h	/^  friend std::ostream& operator<< (std::ostream &os,const Is16vec8 &a)$/;"	f	class:Is16vec8
operator <<	.\dvec.h	/^  friend std::ostream& operator<< (std::ostream &os,const Is32vec4 &a)$/;"	f	class:Is32vec4
operator <<	.\dvec.h	/^  friend std::ostream& operator<< (std::ostream &os,const Iu32vec4 &a)$/;"	f	class:Iu32vec4
operator <<	.\fvec.h	/^  friend std::ostream & operator<<(std::ostream & os,const F32vec1 &a) {$/;"	f	class:F32vec1
operator <<	.\fvec.h	/^  friend std::ostream & operator<<(std::ostream & os,const F32vec4 &a) {$/;"	f	class:F32vec4
operator <<=	.\dvec.h	/^  I16vec8& operator<<=(const M128 &a) { return *this = (I16vec8)_mm_sll_epi16(vec,a); }$/;"	f	class:I16vec8
operator <<=	.\dvec.h	/^  I16vec8& operator<<=(int count) { return *this = (I16vec8)_mm_slli_epi16(vec,count); }$/;"	f	class:I16vec8
operator <<=	.\dvec.h	/^  I32vec4& operator<<=(const I32vec4 &a) { return *this = (I32vec4)_mm_sll_epi32(vec,a); }$/;"	f	class:I32vec4
operator <<=	.\dvec.h	/^  I32vec4& operator<<=(int count) { return *this = (I32vec4)_mm_slli_epi32(vec,count); }$/;"	f	class:I32vec4
operator <<=	.\dvec.h	/^  I64vec2& operator<<=(const I64vec2 &a) { return *this = (I64vec2) _mm_sll_epi64(vec,a); }$/;"	f	class:I64vec2
operator <<=	.\dvec.h	/^  I64vec2& operator<<=(int count) { return *this = (I64vec2) _mm_slli_epi64(vec,count); }$/;"	f	class:I64vec2
operator <<=	.\dvec.h	/^  Is16vec8& operator<<=(const M128 &a) { return *this = (Is16vec8)_mm_sll_epi16(vec,a); }$/;"	f	class:Is16vec8
operator <<=	.\dvec.h	/^  Is16vec8& operator<<=(int count) { return *this = (Is16vec8)_mm_slli_epi16(vec,count); }$/;"	f	class:Is16vec8
operator <<=	.\dvec.h	/^  Is32vec4& operator<<=(const M128 &a) { return *this = (Is32vec4)_mm_sll_epi32(vec,a); }$/;"	f	class:Is32vec4
operator <<=	.\dvec.h	/^  Is32vec4& operator<<=(int count) { return *this = (Is32vec4)_mm_slli_epi32(vec,count); }$/;"	f	class:Is32vec4
operator <<=	.\dvec.h	/^  Iu16vec8& operator<<=(const M128 &a) { return *this = (Iu16vec8)_mm_sll_epi16(vec,a); }$/;"	f	class:Iu16vec8
operator <<=	.\dvec.h	/^  Iu16vec8& operator<<=(int count) { return *this = (Iu16vec8)_mm_slli_epi16(vec,count); }$/;"	f	class:Iu16vec8
operator <<=	.\dvec.h	/^  Iu32vec4& operator<<=(const M128 &a) { return *this = (Iu32vec4)_mm_sll_epi32(vec,a); }$/;"	f	class:Iu32vec4
operator <<=	.\dvec.h	/^  Iu32vec4& operator<<=(int count) { return *this = (Iu32vec4)_mm_slli_epi32(vec,count); }$/;"	f	class:Iu32vec4
operator <=	.\comip.h	/^  template<typename _InterfaceType> bool operator<=(_InterfaceType *p) { return _CompareUnknown(p)<=0; }$/;"	f	class:_com_ptr_t
operator <=	.\comip.h	/^  template<typename _OtherIID> bool operator<=(_com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)<=0; }$/;"	f	class:_com_ptr_t
operator <=	.\comip.h	/^  template<typename _OtherIID> bool operator<=(const _com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)<=0; }$/;"	f	class:_com_ptr_t
operator <=	.\comip.h	/^template<typename _Interface,typename _InterfacePtr> bool operator<=(_Interface *i,_com_ptr_t<_InterfacePtr> &p) { return p>=i; }$/;"	f
operator <=	.\comip.h	/^template<typename _Interface> bool operator<=(int null,_com_ptr_t<_Interface> &p) {$/;"	f
operator <=	.\comutil.h	/^inline bool _bstr_t::operator<=(const _bstr_t &str) const throw() { return _Compare(str)<=0; }$/;"	f	class:_bstr_t
operator =	.\_dbdao.h	/^inline VOID CdbVariant::operator =(LONG l) {$/;"	f	class:CdbVariant
operator =	.\_dbdao.h	/^inline VOID CdbVariant::operator =(LPCTSTR pstr) {$/;"	f	class:CdbVariant
operator =	.\_dbdao.h	/^inline VOID CdbVariant::operator =(LPVARIANT pv) {$/;"	f	class:CdbVariant
operator =	.\_dbdao.h	/^inline VOID CdbVariant::operator =(SHORT s) {$/;"	f	class:CdbVariant
operator =	.\_dbdao.h	/^inline VOID CdbVariant::operator =(const int i) {$/;"	f	class:CdbVariant
operator =	.\comdef.h	/^inline _com_error &_com_error::operator=(const _com_error &that) throw() {$/;"	f	class:_com_error
operator =	.\comip.h	/^  _com_ptr_t &operator=(Interface *pInterface) throw() {$/;"	f	class:_com_ptr_t
operator =	.\comip.h	/^  _com_ptr_t &operator=(const _com_ptr_t &cp) throw() { return operator=(cp.m_pInterface); }$/;"	f	class:_com_ptr_t
operator =	.\comip.h	/^  _com_ptr_t &operator=(const _variant_t& varSrc) {$/;"	f	class:_com_ptr_t
operator =	.\comip.h	/^  _com_ptr_t &operator=(int null) {$/;"	f	class:_com_ptr_t
operator =	.\comip.h	/^  _com_ptr_t &operator=(long long null) {$/;"	f	class:_com_ptr_t
operator =	.\comip.h	/^  template<typename _InterfaceType> _com_ptr_t &operator=(_InterfaceType *p) {$/;"	f	class:_com_ptr_t
operator =	.\comip.h	/^  template<typename _OtherIID> _com_ptr_t &operator=(const _com_ptr_t<_OtherIID> &p) {$/;"	f	class:_com_ptr_t
operator =	.\comutil.h	/^__MINGW_EXTENSION inline _variant_t &_variant_t::operator=(__int64 i8Src) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^__MINGW_EXTENSION inline _variant_t &_variant_t::operator=(unsigned __int64 ui8Src) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _bstr_t &_bstr_t::operator=(const _bstr_t &s) throw() {$/;"	f	class:_bstr_t
operator =	.\comutil.h	/^inline _bstr_t &_bstr_t::operator=(const _variant_t &var) {$/;"	f	class:_bstr_t
operator =	.\comutil.h	/^inline _bstr_t &_bstr_t::operator=(const char *s) {$/;"	f	class:_bstr_t
operator =	.\comutil.h	/^inline _bstr_t &_bstr_t::operator=(const wchar_t *s) {$/;"	f	class:_bstr_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(BYTE bSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(IDispatch *pSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(IUnknown *pSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(__LONG32 lSrc) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(bool boolSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(char cSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const CY &cySrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const DECIMAL &decSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const VARIANT &varSrc) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const VARIANT *pSrc) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const _bstr_t &bstrSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const _variant_t &varSrc) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const char *pSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(const wchar_t *pSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(double dblSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(float fltSrc) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(int iSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(short sSrc) {$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(unsigned __LONG32 ulSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(unsigned int uiSrc)$/;"	f	class:_variant_t
operator =	.\comutil.h	/^inline _variant_t &_variant_t::operator=(unsigned short usSrc)$/;"	f	class:_variant_t
operator =	.\dvec.h	/^  I128vec1& operator= (const M128 &a) { return *this = (I128vec1) a; }$/;"	f	class:I128vec1
operator =	.\dvec.h	/^  I16vec8& operator= (const M128 &a) { return *this = (I16vec8) a; }$/;"	f	class:I16vec8
operator =	.\dvec.h	/^  I32vec4& operator= (const M128 &a) { return *this = (I32vec4) a; }$/;"	f	class:I32vec4
operator =	.\dvec.h	/^  I64vec2& operator= (const M128 &a) { return *this = (I64vec2) a; }$/;"	f	class:I64vec2
operator =	.\dvec.h	/^  I8vec16& operator= (const M128 &a) { return *this = (I8vec16) a; }$/;"	f	class:I8vec16
operator =	.\dvec.h	/^  Is16vec8& operator= (const M128 &a) { return *this = (Is16vec8) a; }$/;"	f	class:Is16vec8
operator =	.\dvec.h	/^  Is32vec4& operator= (const M128 &a) { return *this = (Is32vec4) a; }$/;"	f	class:Is32vec4
operator =	.\dvec.h	/^  Is8vec16& operator= (const M128 &a) { return *this = (Is8vec16) a; }$/;"	f	class:Is8vec16
operator =	.\dvec.h	/^  Iu16vec8& operator= (const M128 &a) { return *this = (Iu16vec8) a; }$/;"	f	class:Iu16vec8
operator =	.\dvec.h	/^  Iu32vec4& operator= (const M128 &a) { return *this = (Iu32vec4) a; }$/;"	f	class:Iu32vec4
operator =	.\dvec.h	/^  Iu8vec16& operator= (const M128 &a) { return *this = (Iu8vec16) a; }$/;"	f	class:Iu8vec16
operator =	.\fvec.h	/^  F32vec4& operator =(const F32vec4 &a) { vec = a.vec; return *this; }$/;"	f	class:F32vec4
operator =	.\fvec.h	/^  F32vec4& operator =(const __m128 &avec) { vec = avec; return *this; }$/;"	f	class:F32vec4
operator =	.\fvec.h	/^  F32vec4& operator =(double d) { vec = _mm_set_ps1((float) d); return *this; }$/;"	f	class:F32vec4
operator =	.\fvec.h	/^  F32vec4& operator =(float f) { vec = _mm_set_ps1(f); return *this; }$/;"	f	class:F32vec4
operator =	.\gdiplus\gdiplustypes.h	/^	CharacterRange& operator=(const CharacterRange& rhs) {$/;"	f	struct:CharacterRange
operator =	.\msi.h	/^  void operator =(MSIHANDLE h) { if (m_h) MsiCloseHandle (m_h); m_h=h; }$/;"	f	class:PMSIHANDLE
operator =	.\wrl\client.h	/^            ComPtr &operator=(InterfaceType *other) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator =	.\wrl\client.h	/^            ComPtr &operator=(U *other) throw()  {$/;"	f	class:Microsoft::WRL::ComPtr
operator =	.\wrl\client.h	/^            ComPtr &operator=(const ComPtr<U> &other) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator =	.\wrl\client.h	/^            ComPtr& operator=(ComPtr &&other) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator =	.\wrl\client.h	/^            ComPtr& operator=(ComPtr<U> &&other) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator =	.\wrl\client.h	/^            ComPtr& operator=(const ComPtr &other) throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator =	.\wrl\wrappers\corewrappers.h	/^                HStringReference& operator=(const HStringReference &other) throw() {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
operator ==	.\comip.h	/^  bool operator==(Interface *p) { return (m_pInterface==p) ? true : _CompareUnknown(p)==0; }$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^  bool operator==(_com_ptr_t &p) throw() { return operator==(p.m_pInterface); }$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^  bool operator==(const _com_ptr_t &p) throw() { return operator==(p.m_pInterface); }$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^  bool operator==(int null) {$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^  bool operator==(long long null) {$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^  template<typename _InterfaceType> bool operator==(_InterfaceType *p) { return _CompareUnknown(p)==0; }$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^  template<typename _OtherIID> bool operator==(_com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)==0; }$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^  template<typename _OtherIID> bool operator==(const _com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)==0; }$/;"	f	class:_com_ptr_t
operator ==	.\comip.h	/^template<typename _Interface,typename _InterfacePtr> bool operator==(_Interface *i,_com_ptr_t<_InterfacePtr> &p) { return p==i; }$/;"	f
operator ==	.\comip.h	/^template<typename _InterfaceType> bool operator==(int null,_com_ptr_t<_InterfaceType> &p) {$/;"	f
operator ==	.\comutil.h	/^inline bool _bstr_t::operator==(const _bstr_t &str) const throw() { return _Compare(str)==0; }$/;"	f	class:_bstr_t
operator ==	.\comutil.h	/^inline bool _variant_t::operator==(const VARIANT &varSrc) const throw() {$/;"	f	class:_variant_t
operator ==	.\comutil.h	/^inline bool _variant_t::operator==(const VARIANT *pSrc) const throw()$/;"	f	class:_variant_t
operator ==	.\guiddef.h	/^__inline bool operator== (REFGUID guidOne, REFGUID guidOther) { return !!IsEqualGUID (guidOne, guidOther); }$/;"	f
operator ==	.\kcom.h	/^__inline WINBOOL operator==(const GUID& guidOne, const GUID& guidOther) {$/;"	f
operator ==	.\mspcall.h	/^    WINBOOL operator ==(struct _THREADPOOLWAITBLOCK &t) { return ((hWaitHandle==t.hWaitHandle) && (pContext==t.pContext)); }$/;"	f	struct:CMSPCallMultiGraph::_THREADPOOLWAITBLOCK
operator ==	.\propkeydef.h	/^inline bool operator==(REFPROPERTYKEY guidOne, REFPROPERTYKEY guidOther)$/;"	f
operator >	.\comip.h	/^  template<typename _InterfaceType> bool operator>(_InterfaceType *p) { return _CompareUnknown(p)>0; }$/;"	f	class:_com_ptr_t
operator >	.\comip.h	/^  template<typename _OtherIID> bool operator>(_com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)>0; }$/;"	f	class:_com_ptr_t
operator >	.\comip.h	/^  template<typename _OtherIID> bool operator>(const _com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)>0; }$/;"	f	class:_com_ptr_t
operator >	.\comip.h	/^template<typename _Interface,typename _InterfacePtr> bool operator>(_Interface *i,_com_ptr_t<_InterfacePtr> &p) { return p<i; }$/;"	f
operator >	.\comip.h	/^template<typename _Interface> bool operator>(int null,_com_ptr_t<_Interface> &p) {$/;"	f
operator >	.\comutil.h	/^inline bool _bstr_t::operator>(const _bstr_t &str) const throw() { return _Compare(str)>0; }$/;"	f	class:_bstr_t
operator >=	.\comip.h	/^  template<typename _InterfaceType> bool operator>=(_InterfaceType *p) { return _CompareUnknown(p)>=0; }$/;"	f	class:_com_ptr_t
operator >=	.\comip.h	/^  template<typename _OtherIID> bool operator>=(_com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)>=0; }$/;"	f	class:_com_ptr_t
operator >=	.\comip.h	/^  template<typename _OtherIID> bool operator>=(const _com_ptr_t<_OtherIID> &p) { return _CompareUnknown(p)>=0; }$/;"	f	class:_com_ptr_t
operator >=	.\comip.h	/^template<typename _Interface,typename _InterfacePtr> bool operator>=(_Interface *i,_com_ptr_t<_InterfacePtr> &p) { return p<=i; }$/;"	f
operator >=	.\comip.h	/^template<typename _Interface> bool operator>=(int null,_com_ptr_t<_Interface> &p) {$/;"	f
operator >=	.\comutil.h	/^inline bool _bstr_t::operator>=(const _bstr_t &str) const throw() { return _Compare(str)>=0; }$/;"	f	class:_bstr_t
operator >>	.\dvec.h	/^  I64vec2 operator>>(const I64vec2 &a) { return _mm_srl_epi64(vec,a); }$/;"	f	class:I64vec2
operator >>	.\dvec.h	/^  I64vec2 operator>>(int count) { return _mm_srli_epi64(vec,count); }$/;"	f	class:I64vec2
operator >>	.\dvec.h	/^  Is16vec8 operator>>(const M128 &a) { return _mm_sra_epi16(vec,a); }$/;"	f	class:Is16vec8
operator >>	.\dvec.h	/^  Is16vec8 operator>>(int count) { return _mm_srai_epi16(vec,count); }$/;"	f	class:Is16vec8
operator >>	.\dvec.h	/^  Is32vec4 operator>>(const M128 &a) { return _mm_sra_epi32(vec,a); }$/;"	f	class:Is32vec4
operator >>	.\dvec.h	/^  Is32vec4 operator>>(int count) { return _mm_srai_epi32(vec,count); }$/;"	f	class:Is32vec4
operator >>	.\dvec.h	/^  Iu16vec8 operator>>(const M128 &a) { return _mm_srl_epi16(vec,a); }$/;"	f	class:Iu16vec8
operator >>	.\dvec.h	/^  Iu16vec8 operator>>(int count) { return _mm_srli_epi16(vec,count); }$/;"	f	class:Iu16vec8
operator >>	.\dvec.h	/^  Iu32vec4 operator>>(const M128 &a) { return _mm_srl_epi32(vec,a); }$/;"	f	class:Iu32vec4
operator >>	.\dvec.h	/^  Iu32vec4 operator>>(int count) { return _mm_srli_epi32(vec,count); }$/;"	f	class:Iu32vec4
operator >>=	.\dvec.h	/^  I64vec2& operator>>=(const I64vec2 &a) { return *this = (I64vec2) _mm_srl_epi64(vec,a); }$/;"	f	class:I64vec2
operator >>=	.\dvec.h	/^  I64vec2& operator>>=(int count) { return *this = (I64vec2) _mm_srli_epi64(vec,count); }$/;"	f	class:I64vec2
operator >>=	.\dvec.h	/^  Is16vec8& operator>>=(const M128 &a) { return *this = (Is16vec8)_mm_sra_epi16(vec,a); }$/;"	f	class:Is16vec8
operator >>=	.\dvec.h	/^  Is16vec8& operator>>=(int count) { return *this = (Is16vec8)_mm_srai_epi16(vec,count); }$/;"	f	class:Is16vec8
operator >>=	.\dvec.h	/^  Is32vec4& operator>>=(const M128 &a) { return *this = (Is32vec4) _mm_sra_epi32(vec,a); }$/;"	f	class:Is32vec4
operator >>=	.\dvec.h	/^  Is32vec4& operator>>=(int count) { return *this = (Is32vec4) _mm_srai_epi32(vec,count); }$/;"	f	class:Is32vec4
operator >>=	.\dvec.h	/^  Iu16vec8& operator>>=(const M128 &a) { return *this = (Iu16vec8) _mm_srl_epi16(vec,a); }$/;"	f	class:Iu16vec8
operator >>=	.\dvec.h	/^  Iu16vec8& operator>>=(int count) { return *this = (Iu16vec8) _mm_srli_epi16(vec,count); }$/;"	f	class:Iu16vec8
operator >>=	.\dvec.h	/^  Iu32vec4& operator>>=(const M128 &a) { return *this = (Iu32vec4) _mm_srl_epi32(vec,a); }$/;"	f	class:Iu32vec4
operator >>=	.\dvec.h	/^  Iu32vec4& operator>>=(int count) { return *this = (Iu32vec4) _mm_srli_epi32(vec,count); }$/;"	f	class:Iu32vec4
operator BYTE	.\comutil.h	/^inline _variant_t::operator BYTE() const {$/;"	f	class:_variant_t
operator CY	.\comutil.h	/^inline _variant_t::operator CY() const {$/;"	f	class:_variant_t
operator DECIMAL	.\comutil.h	/^inline _variant_t::operator DECIMAL() const {$/;"	f	class:_variant_t
operator Details::BoolType	.\wrl\client.h	/^            operator Details::BoolType() const throw() {$/;"	f	class:Microsoft::WRL::ComPtr
operator HRESULT	.\wrl\wrappers\corewrappers.h	/^                operator HRESULT() {$/;"	f	class:Microsoft::WRL::Wrappers::RoInitializeWrapper
operator IDispatch*	.\comutil.h	/^inline _variant_t::operator IDispatch*() const {$/;"	f	class:_variant_t
operator IInspectable**	.\wrl\client.h	/^                operator IInspectable**() const throw()  {$/;"	f	class:Microsoft::WRL::Details::ComPtrRefBase
operator IUnknown*	.\comutil.h	/^inline _variant_t::operator IUnknown*() const {$/;"	f	class:_variant_t
operator IUnknown**	.\wrl\client.h	/^                operator IUnknown**() const throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRefBase
operator Interface&	.\comip.h	/^  operator Interface&() const {$/;"	f	class:_com_ptr_t
operator Interface*	.\comip.h	/^  operator Interface*() const throw() { return m_pInterface; }$/;"	f	class:_com_ptr_t
operator LPSTR	.\_dbdao.h	/^  operator LPSTR() { return (LPSTR)m_bstr; }$/;"	f	class:CdbWide
operator LPUNKNOWN	.\_dbdao.h	/^  operator LPUNKNOWN(){ return GetInterface();}$/;"	f	class:CdbOleObject
operator LPWSTR	.\_dbdao.h	/^  operator LPWSTR() { return (LPWSTR)m_bstr; }$/;"	f	class:CdbWide
operator MSIHANDLE	.\msi.h	/^  operator MSIHANDLE() { return m_h; }$/;"	f	class:PMSIHANDLE
operator T*	.\wrl\client.h	/^                operator T*() throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRef
operator VARIANT	.\comutil.h	/^inline _variant_t::operator VARIANT() const throw() { return *(VARIANT*) this; }$/;"	f	class:_variant_t
operator []	.\dvec.h	/^  __MINGW_EXTENSION __int64& operator[](int i)$/;"	f	class:I64vec2
operator []	.\dvec.h	/^  __MINGW_EXTENSION const __int64& operator[](int i)const$/;"	f	class:I64vec2
operator []	.\dvec.h	/^  const double &operator[](int i) const {$/;"	f	class:F64vec2
operator []	.\dvec.h	/^  const int& operator[](int i)const$/;"	f	class:Is32vec4
operator []	.\dvec.h	/^  const signed char& operator[](int i)const$/;"	f	class:Is8vec16
operator []	.\dvec.h	/^  const signed short& operator[](int i)const$/;"	f	class:Is16vec8
operator []	.\dvec.h	/^  const unsigned char& operator[](int i)const$/;"	f	class:Iu8vec16
operator []	.\dvec.h	/^  const unsigned int& operator[](int i)const$/;"	f	class:Iu32vec4
operator []	.\dvec.h	/^  const unsigned short& operator[](int i)const$/;"	f	class:Iu16vec8
operator []	.\dvec.h	/^  double &operator[](int i) {$/;"	f	class:F64vec2
operator []	.\dvec.h	/^  int& operator[](int i)$/;"	f	class:Is32vec4
operator []	.\dvec.h	/^  signed char& operator[](int i)$/;"	f	class:Is8vec16
operator []	.\dvec.h	/^  signed short& operator[](int i)$/;"	f	class:Is16vec8
operator []	.\dvec.h	/^  unsigned char& operator[](int i)$/;"	f	class:Iu8vec16
operator []	.\dvec.h	/^  unsigned int& operator[](int i)$/;"	f	class:Iu32vec4
operator []	.\dvec.h	/^  unsigned short& operator[](int i)$/;"	f	class:Iu16vec8
operator []	.\dxtmpl.h	/^VALUE& CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::operator[](ARG_KEY key) {$/;"	f	class:CDXMap
operator []	.\dxtmpl.h	/^inline TYPE &CDXArray<TYPE,ARG_TYPE>::operator[](int nIndex) { return ElementAt(nIndex); }$/;"	f	class:CDXArray
operator []	.\dxtmpl.h	/^inline TYPE CDXArray<TYPE,ARG_TYPE>::operator[](int nIndex) const { return GetAt(nIndex); }$/;"	f	class:CDXArray
operator []	.\fvec.h	/^  const float& operator[](int i) const {$/;"	f	class:F32vec4
operator []	.\fvec.h	/^  float& operator[](int i) {$/;"	f	class:F32vec4
operator []	.\msputils.h	/^  T &operator[] (int nIndex) const {$/;"	f	class:CMSPArray
operator ^	.\dvec.h	/^  friend F64vec2 operator ^(const F64vec2 &a,const F64vec2 &b) { return _mm_xor_pd(a,b); }$/;"	f	class:F64vec2
operator ^	.\dvec.h	/^inline M128 operator^(const M128 &a,const M128 &b) { return _mm_xor_si128(a,b); }$/;"	f
operator ^	.\fvec.h	/^  friend F32vec1 operator ^(const F32vec1 &a,const F32vec1 &b) { return _mm_xor_ps(a,b); }$/;"	f	class:F32vec1
operator ^	.\fvec.h	/^  friend F32vec4 operator ^(const F32vec4 &a,const F32vec4 &b) { return _mm_xor_ps(a,b); }$/;"	f	class:F32vec4
operator ^=	.\dvec.h	/^  F64vec2& operator ^=(F64vec2 &a) { return *this = _mm_xor_pd(vec,a); }$/;"	f	class:F64vec2
operator ^=	.\dvec.h	/^  I128vec1& operator^=(const M128 &a) { return *this = (I128vec1) _mm_xor_si128(vec,a); }$/;"	f	class:I128vec1
operator ^=	.\dvec.h	/^  I16vec8& operator^=(const M128 &a) { return *this = (I16vec8) _mm_xor_si128(vec,a); }$/;"	f	class:I16vec8
operator ^=	.\dvec.h	/^  I32vec4& operator^=(const M128 &a) { return *this = (I32vec4) _mm_xor_si128(vec,a); }$/;"	f	class:I32vec4
operator ^=	.\dvec.h	/^  I64vec2& operator^=(const M128 &a) { return *this = (I64vec2) _mm_xor_si128(vec,a); }$/;"	f	class:I64vec2
operator ^=	.\dvec.h	/^  I8vec16& operator^=(const M128 &a) { return *this = (I8vec16) _mm_xor_si128(vec,a); }$/;"	f	class:I8vec16
operator ^=	.\dvec.h	/^  Is16vec8& operator^=(const M128 &a) { return *this = (Is16vec8) _mm_xor_si128(vec,a); }$/;"	f	class:Is16vec8
operator ^=	.\dvec.h	/^  Is32vec4& operator^=(const M128 &a) { return *this = (Is32vec4) _mm_xor_si128(vec,a); }$/;"	f	class:Is32vec4
operator ^=	.\dvec.h	/^  Is8vec16& operator^=(const M128 &a) { return *this = (Is8vec16) _mm_xor_si128(vec,a); }$/;"	f	class:Is8vec16
operator ^=	.\dvec.h	/^  Iu16vec8& operator^=(const M128 &a) { return *this = (Iu16vec8) _mm_xor_si128(vec,a); }$/;"	f	class:Iu16vec8
operator ^=	.\dvec.h	/^  Iu32vec4& operator^=(const M128 &a) { return *this = (Iu32vec4) _mm_xor_si128(vec,a); }$/;"	f	class:Iu32vec4
operator ^=	.\dvec.h	/^  Iu8vec16& operator^=(const M128 &a) { return *this = (Iu8vec16) _mm_xor_si128(vec,a); }$/;"	f	class:Iu8vec16
operator ^=	.\dvec.h	/^  M128& operator^=(const M128 &a) { return *this = (M128) _mm_xor_si128(vec,a); }$/;"	f	class:M128
operator ^=	.\fvec.h	/^  F32vec1& operator ^=(F32vec1 &a) { return *this = _mm_xor_ps(vec,a); }$/;"	f	class:F32vec1
operator ^=	.\fvec.h	/^  F32vec4& operator ^=(F32vec4 &a) { return *this = _mm_xor_ps(vec,a); }$/;"	f	class:F32vec4
operator ^=	.\ivec.h	/^    M64& operator^=(const M64 &a) { return *this = (M64) _m_pxor(vec,a); }$/;"	f	class:M64
operator __LONG32	.\comutil.h	/^inline _variant_t::operator __LONG32() const {$/;"	f	class:_variant_t
operator __int64	.\comutil.h	/^__MINGW_EXTENSION inline _variant_t::operator __int64() const {$/;"	f	class:_variant_t
operator __m128	.\fvec.h	/^  operator __m128() const { return vec; }$/;"	f	class:F32vec1
operator __m128	.\fvec.h	/^  operator __m128() const { return vec; }$/;"	f	class:F32vec4
operator __m128d	.\dvec.h	/^  operator __m128d() const { return vec; }$/;"	f	class:F64vec2
operator __m128i	.\dvec.h	/^  operator __m128i() const { return vec; }$/;"	f	class:M128
operator __m64	.\ivec.h	/^    operator __m64() const { return vec; }$/;"	f	class:M64
operator _bstr_t	.\comutil.h	/^inline _variant_t::operator _bstr_t() const {$/;"	f	class:_variant_t
operator bool	.\comip.h	/^  operator bool() const throw() { return m_pInterface!=NULL; }$/;"	f	class:_com_ptr_t
operator bool	.\comutil.h	/^inline _variant_t::operator bool() const {$/;"	f	class:_variant_t
operator char	.\comutil.h	/^inline _variant_t::operator char() const {$/;"	f	class:_variant_t
operator char *	.\comutil.h	/^inline _bstr_t::operator char *() const { return const_cast<char *>((m_Data!=NULL) ? m_Data->GetString() : NULL); }$/;"	f	class:_bstr_t
operator const D3D10_BUFFER_DESC&	.\d3d10.h	/^    operator const D3D10_BUFFER_DESC&() const {$/;"	f	struct:CD3D10_BUFFER_DESC
operator const D3D10_TEXTURE1D_DESC&	.\d3d10.h	/^    operator const D3D10_TEXTURE1D_DESC&() const {$/;"	f	struct:CD3D10_TEXTURE1D_DESC
operator const D3D10_TEXTURE2D_DESC&	.\d3d10.h	/^    operator const D3D10_TEXTURE2D_DESC&() const {$/;"	f	struct:CD3D10_TEXTURE2D_DESC
operator const D3D11_BLEND_DESC&	.\d3d11.h	/^    operator const D3D11_BLEND_DESC&() const { return *this; }$/;"	f	struct:CD3D11_BLEND_DESC
operator const D3D11_BUFFER_DESC&	.\d3d11.h	/^    operator const D3D11_BUFFER_DESC&() const { return *this; }$/;"	f	struct:CD3D11_BUFFER_DESC
operator const D3D11_RASTERIZER_DESC&	.\d3d11.h	/^    operator const D3D11_RASTERIZER_DESC&() const { return *this; }$/;"	f	struct:CD3D11_RASTERIZER_DESC
operator const D3D11_RENDER_TARGET_VIEW_DESC&	.\d3d11.h	/^    operator const D3D11_RENDER_TARGET_VIEW_DESC&() const {$/;"	f	struct:CD3D11_RENDER_TARGET_VIEW_DESC
operator const D3D11_SAMPLER_DESC&	.\d3d11.h	/^    operator const D3D11_SAMPLER_DESC&() const { return *this; }$/;"	f	struct:CD3D11_SAMPLER_DESC
operator const D3D11_SHADER_RESOURCE_VIEW_DESC&	.\d3d11.h	/^    operator const D3D11_SHADER_RESOURCE_VIEW_DESC&() const {$/;"	f	struct:CD3D11_SHADER_RESOURCE_VIEW_DESC
operator const D3D11_TEXTURE2D_DESC&	.\d3d11.h	/^    operator const D3D11_TEXTURE2D_DESC&() const { return *this; }$/;"	f	struct:CD3D11_TEXTURE2D_DESC
operator const char *	.\comutil.h	/^inline _bstr_t::Data_t::operator const char *() const { return GetString(); }$/;"	f	class:_bstr_t::Data_t
operator const char *	.\comutil.h	/^inline _bstr_t::operator const char *() const { return (m_Data!=NULL) ? m_Data->GetString() : NULL; }$/;"	f	class:_bstr_t
operator const wchar_t *	.\comutil.h	/^inline _bstr_t::Data_t::operator const wchar_t *() const throw() { return m_wstr; }$/;"	f	class:_bstr_t::Data_t
operator const wchar_t *	.\comutil.h	/^inline _bstr_t::operator const wchar_t *() const throw() { return (m_Data!=NULL) ? m_Data->GetWString() : NULL; }$/;"	f	class:_bstr_t
operator delete	.\ddk\stdunk.h	/^operator delete($/;"	f
operator delete	.\gdiplus\gdiplusbase.h	/^	static void operator delete(void *in_pVoid)$/;"	f	class:GdiplusBase
operator delete	.\kcom.h	/^inline void __cdecl operator delete($/;"	f
operator delete[]	.\gdiplus\gdiplusbase.h	/^	static void operator delete[](void *in_pVoid)$/;"	f	class:GdiplusBase
operator double	.\comutil.h	/^inline _variant_t::operator double() const {$/;"	f	class:_variant_t
operator float	.\comutil.h	/^inline _variant_t::operator float() const {$/;"	f	class:_variant_t
operator int	.\comutil.h	/^inline _variant_t::operator int() const {$/;"	f	class:_variant_t
operator new	.\comutil.h	/^inline void *_bstr_t::Data_t::operator new(size_t sz) {$/;"	f	class:_bstr_t::Data_t
operator new	.\ddk\stdunk.h	/^operator new ($/;"	f
operator new	.\gdiplus\gdiplusbase.h	/^	static void* operator new(size_t in_size)$/;"	f	class:GdiplusBase
operator new	.\kcom.h	/^inline PVOID operator new($/;"	f
operator new[]	.\gdiplus\gdiplusbase.h	/^	static void* operator new[](size_t in_size)$/;"	f	class:GdiplusBase
operator short	.\comutil.h	/^inline _variant_t::operator short() const {$/;"	f	class:_variant_t
operator typename ComPtrRefBase<T>::InterfaceType**	.\wrl\client.h	/^                operator typename ComPtrRefBase<T>::InterfaceType**() throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRef
operator unsigned __LONG32	.\comutil.h	/^inline _variant_t::operator unsigned __LONG32() const {$/;"	f	class:_variant_t
operator unsigned __int64	.\comutil.h	/^__MINGW_EXTENSION inline _variant_t::operator unsigned __int64() const {$/;"	f	class:_variant_t
operator unsigned int	.\comutil.h	/^inline _variant_t::operator unsigned int() const {$/;"	f	class:_variant_t
operator unsigned short	.\comutil.h	/^inline _variant_t::operator unsigned short() const {$/;"	f	class:_variant_t
operator void**	.\wrl\client.h	/^                operator void**() const throw() {$/;"	f	class:Microsoft::WRL::Details::ComPtrRef
operator wchar_t *	.\comutil.h	/^inline _bstr_t::operator wchar_t *() const throw() { return const_cast<wchar_t *>((m_Data!=NULL) ? m_Data->GetWString() : NULL); }$/;"	f	class:_bstr_t
operator |	.\dvec.h	/^  friend F64vec2 operator |(const F64vec2 &a,const F64vec2 &b) { return _mm_or_pd(a,b); }$/;"	f	class:F64vec2
operator |	.\dvec.h	/^inline M128 operator|(const M128 &a,const M128 &b) { return _mm_or_si128(a,b); }$/;"	f
operator |	.\fvec.h	/^  friend F32vec1 operator |(const F32vec1 &a,const F32vec1 &b) { return _mm_or_ps(a,b); }$/;"	f	class:F32vec1
operator |	.\fvec.h	/^  friend F32vec4 operator |(const F32vec4 &a,const F32vec4 &b) { return _mm_or_ps(a,b); }$/;"	f	class:F32vec4
operator |=	.\dvec.h	/^  F64vec2& operator |=(F64vec2 &a) { return *this = _mm_or_pd(vec,a); }$/;"	f	class:F64vec2
operator |=	.\dvec.h	/^  I128vec1& operator|=(const M128 &a) { return *this = (I128vec1) _mm_or_si128(vec,a); }$/;"	f	class:I128vec1
operator |=	.\dvec.h	/^  I16vec8& operator|=(const M128 &a) { return *this = (I16vec8) _mm_or_si128(vec,a); }$/;"	f	class:I16vec8
operator |=	.\dvec.h	/^  I32vec4& operator|=(const M128 &a) { return *this = (I32vec4) _mm_or_si128(vec,a); }$/;"	f	class:I32vec4
operator |=	.\dvec.h	/^  I64vec2& operator|=(const M128 &a) { return *this = (I64vec2) _mm_or_si128(vec,a); }$/;"	f	class:I64vec2
operator |=	.\dvec.h	/^  I8vec16& operator|=(const M128 &a) { return *this = (I8vec16) _mm_or_si128(vec,a); }$/;"	f	class:I8vec16
operator |=	.\dvec.h	/^  Is16vec8& operator|=(const M128 &a) { return *this = (Is16vec8) _mm_or_si128(vec,a); }$/;"	f	class:Is16vec8
operator |=	.\dvec.h	/^  Is32vec4& operator|=(const M128 &a) { return *this = (Is32vec4) _mm_or_si128(vec,a); }$/;"	f	class:Is32vec4
operator |=	.\dvec.h	/^  Is8vec16& operator|=(const M128 &a) { return *this = (Is8vec16) _mm_or_si128(vec,a); }$/;"	f	class:Is8vec16
operator |=	.\dvec.h	/^  Iu16vec8& operator|=(const M128 &a) { return *this = (Iu16vec8) _mm_or_si128(vec,a); }$/;"	f	class:Iu16vec8
operator |=	.\dvec.h	/^  Iu32vec4& operator|=(const M128 &a) { return *this = (Iu32vec4) _mm_or_si128(vec,a); }$/;"	f	class:Iu32vec4
operator |=	.\dvec.h	/^  Iu8vec16& operator|=(const M128 &a) { return *this = (Iu8vec16) _mm_or_si128(vec,a); }$/;"	f	class:Iu8vec16
operator |=	.\dvec.h	/^  M128& operator|=(const M128 &a) { return *this = (M128) _mm_or_si128(vec,a); }$/;"	f	class:M128
operator |=	.\fvec.h	/^  F32vec1& operator |=(F32vec1 &a) { return *this = _mm_or_ps(vec,a); }$/;"	f	class:F32vec1
operator |=	.\fvec.h	/^  F32vec4& operator |=(F32vec4 &a) { return *this = _mm_or_ps(vec,a); }$/;"	f	class:F32vec4
operator |=	.\ivec.h	/^    M64& operator|=(const M64 &a) { return *this = (M64) _m_por(vec,a); }$/;"	f	class:M64
pack_sat	.\dvec.h	/^inline Is16vec8 pack_sat(const Is32vec4 &a,const Is32vec4 &b) { return _mm_packs_epi32(a,b); }$/;"	f
pack_sat	.\dvec.h	/^inline Is8vec16 pack_sat(const Is16vec8 &a,const Is16vec8 &b) { return _mm_packs_epi16(a,b); }$/;"	f
packu_sat	.\dvec.h	/^inline Iu8vec16 packu_sat(const Is16vec8 &a,const Is16vec8 &b) { return _mm_packus_epi16(a,b);}$/;"	f
powf	.\math.h	/^  __CRT_INLINE float powf(float _X,float _Y) { return ((float)pow((double)_X,(double)_Y)); }$/;"	f
printf	.\stdio.h	/^int printf (const char *__format, ...)$/;"	f
putwchar	.\stdio.h	/^  __CRT_INLINE wint_t __cdecl putwchar(wchar_t _C) {return (fputwc(_C,stdout)); }$/;"	f
putwchar	.\wchar.h	/^  __CRT_INLINE wint_t __cdecl putwchar(wchar_t _C) {return (fputwc(_C,stdout)); }$/;"	f
rcp	.\fvec.h	/^  friend F32vec1 rcp(const F32vec1 &a) { return _mm_rcp_ss(a); }$/;"	f	class:F32vec1
rcp	.\fvec.h	/^  friend F32vec4 rcp(const F32vec4 &a) { return _mm_rcp_ps(a); }$/;"	f	class:F32vec4
rcp_nr	.\fvec.h	/^  friend F32vec1 rcp_nr(const F32vec1 &a) {$/;"	f	class:F32vec1
rcp_nr	.\fvec.h	/^  friend F32vec4 rcp_nr(const F32vec4 &a) {$/;"	f	class:F32vec4
rsqrt	.\fvec.h	/^  friend F32vec1 rsqrt(const F32vec1 &a) { return _mm_rsqrt_ss(a); }$/;"	f	class:F32vec1
rsqrt	.\fvec.h	/^  friend F32vec4 rsqrt(const F32vec4 &a) { return _mm_rsqrt_ps(a); }$/;"	f	class:F32vec4
rsqrt_nr	.\fvec.h	/^  friend F32vec1 rsqrt_nr(const F32vec1 &a) {$/;"	f	class:F32vec1
rsqrt_nr	.\fvec.h	/^  friend F32vec4 rsqrt_nr(const F32vec4 &a) {$/;"	f	class:F32vec4
sat_add	.\dvec.h	/^inline Is16vec8 sat_add(const Is16vec8 &a,const Is16vec8 &b) { return _mm_adds_epi16(a,b); }$/;"	f
sat_add	.\dvec.h	/^inline Is8vec16 sat_add(const Is8vec16 &a,const Is8vec16 &b) { return _mm_adds_epi8(a,b); }$/;"	f
sat_add	.\dvec.h	/^inline Iu16vec8 sat_add(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_adds_epu16(a,b); }$/;"	f
sat_add	.\dvec.h	/^inline Iu8vec16 sat_add(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_adds_epu8(a,b); }$/;"	f
sat_sub	.\dvec.h	/^inline Is16vec8 sat_sub(const Is16vec8 &a,const Is16vec8 &b) { return _mm_subs_epi16(a,b); }$/;"	f
sat_sub	.\dvec.h	/^inline Is8vec16 sat_sub(const Is8vec16 &a,const Is8vec16 &b) { return _mm_subs_epi8(a,b); }$/;"	f
sat_sub	.\dvec.h	/^inline Iu16vec8 sat_sub(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_subs_epu16(a,b); }$/;"	f
sat_sub	.\dvec.h	/^inline Iu8vec16 sat_sub(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_subs_epu8(a,b); }$/;"	f
scanf	.\stdio.h	/^int scanf(const char *__format, ...)$/;"	f
simd_avg	.\dvec.h	/^inline Iu16vec8 simd_avg(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_avg_epu16(a,b); }$/;"	f
simd_avg	.\dvec.h	/^inline Iu8vec16 simd_avg(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_avg_epu8(a,b); }$/;"	f
simd_max	.\dvec.h	/^  friend F64vec2 simd_max(const F64vec2 &a,const F64vec2 &b) { return _mm_max_pd(a,b); }$/;"	f	class:F64vec2
simd_max	.\dvec.h	/^inline Is16vec8 simd_max(const Is16vec8 &a,const Is16vec8 &b) { return _mm_max_epi16(a,b); }$/;"	f
simd_max	.\dvec.h	/^inline Iu8vec16 simd_max(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_max_epu8(a,b); }$/;"	f
simd_max	.\fvec.h	/^  friend F32vec1 simd_max(const F32vec1 &a,const F32vec1 &b) { return _mm_max_ss(a,b); }$/;"	f	class:F32vec1
simd_max	.\fvec.h	/^  friend F32vec4 simd_max(const F32vec4 &a,const F32vec4 &b) { return _mm_max_ps(a,b); }$/;"	f	class:F32vec4
simd_min	.\dvec.h	/^    friend F64vec2 simd_min(const F64vec2 &a,const F64vec2 &b) { return _mm_min_pd(a,b); }$/;"	f	class:F64vec2
simd_min	.\dvec.h	/^inline Is16vec8 simd_min(const Is16vec8 &a,const Is16vec8 &b) { return _mm_min_epi16(a,b); }$/;"	f
simd_min	.\dvec.h	/^inline Iu8vec16 simd_min(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_min_epu8(a,b); }$/;"	f
simd_min	.\fvec.h	/^    friend F32vec1 simd_min(const F32vec1 &a,const F32vec1 &b) { return _mm_min_ss(a,b); }$/;"	f	class:F32vec1
simd_min	.\fvec.h	/^    friend F32vec4 simd_min(const F32vec4 &a,const F32vec4 &b) { return _mm_min_ps(a,b); }$/;"	f	class:F32vec4
sinhf	.\math.h	/^  __CRT_INLINE float sinhf(float _X) { return ((float)sinh((double)_X)); }$/;"	f
snprintf	.\stdio.h	/^int snprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, ...)$/;"	f
snprintf	.\stdio.h	/^int snprintf (char *__stream, size_t __n, const char *__format, ...)$/;"	f
snwprintf	.\stdio.h	/^  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...)$/;"	f
snwprintf	.\stdio.h	/^int snwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, ...)$/;"	f
snwprintf	.\wchar.h	/^  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...)$/;"	f
snwprintf	.\wchar.h	/^int snwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, ...)$/;"	f
sprintf	.\stdio.h	/^int sprintf (char *__stream, const char *__format, ...)$/;"	f
sqrt	.\dvec.h	/^  friend F64vec2 sqrt(const F64vec2 &a) { return _mm_sqrt_pd(a); }$/;"	f	class:F64vec2
sqrt	.\fvec.h	/^  friend F32vec1 sqrt(const F32vec1 &a) { return _mm_sqrt_ss(a); }$/;"	f	class:F32vec1
sqrt	.\fvec.h	/^  friend F32vec4 sqrt(const F32vec4 &a) { return _mm_sqrt_ps(a); }$/;"	f	class:F32vec4
sscanf	.\stdio.h	/^int sscanf(const char *__source, const char *__format, ...)$/;"	f
store_nta	.\dvec.h	/^inline void store_nta(double *p,F64vec2 &a) { _mm_stream_pd(p,a); }$/;"	f
store_nta	.\fvec.h	/^inline void store_nta(float *p,F32vec4 &a) { _mm_stream_ps(p,a); }$/;"	f
storeu	.\dvec.h	/^inline void storeu(double *p,const F64vec2 &a) { _mm_storeu_pd(p,a); }$/;"	f
storeu	.\fvec.h	/^inline void storeu(float *p,const F32vec4 &a) { _mm_storeu_ps(p,a); }$/;"	f
strcasecmp	.\string.h	/^  __CRT_INLINE int __cdecl strcasecmp (const char *__sz1, const char *__sz2) { return _stricmp (__sz1, __sz2); }$/;"	f
strncasecmp	.\string.h	/^  __CRT_INLINE int __cdecl strncasecmp (const char *__sz1, const char *__sz2, size_t __sizeMaxCompare) { return _strnicmp (__sz1, __sz2, __sizeMaxCompare); }$/;"	f
strtod	.\stdlib.h	/^double __cdecl __MINGW_NOTHROW strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)$/;"	f
strtof	.\stdlib.h	/^float __cdecl __MINGW_NOTHROW strtof(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)$/;"	f
sum_abs	.\dvec.h	/^inline I64vec2 sum_abs(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_sad_epu8(a,b); }$/;"	f
swscanf	.\stdio.h	/^int swscanf(const wchar_t *__source, const wchar_t *__format, ...)$/;"	f
swscanf	.\wchar.h	/^int swscanf(const wchar_t *__source, const wchar_t *__format, ...)$/;"	f
tanhf	.\math.h	/^  __CRT_INLINE float tanhf(float _X) { return ((float)tanh((double)_X)); }$/;"	f
time	.\time.h	/^__CRT_INLINE time_t __cdecl time(time_t *_Time) { return _time32(_Time); }$/;"	f
time	.\time.h	/^__CRT_INLINE time_t __cdecl time(time_t *_Time) { return _time64(_Time); }$/;"	f
ua_CharUpperW	.\stralign.h	/^  __CRT_INLINE LPUWSTR ua_CharUpperW(LPUWSTR String) {$/;"	f
ua_lstrcmpW	.\stralign.h	/^  __CRT_INLINE int ua_lstrcmpW(LPCUWSTR String1,LPCUWSTR String2) {$/;"	f
ua_lstrcmpiW	.\stralign.h	/^  __CRT_INLINE int ua_lstrcmpiW(LPCUWSTR String1,LPCUWSTR String2) {$/;"	f
ua_lstrlenW	.\stralign.h	/^  __CRT_INLINE int ua_lstrlenW(LPCUWSTR String) {$/;"	f
ua_wcschr	.\stralign.h	/^  __CRT_INLINE PUWSTR ua_wcschr(PUWSTR String,WCHAR Character) {$/;"	f
ua_wcschr	.\stralign.h	/^  __CRT_INLINE PUWSTR_C ua_wcschr(PCUWSTR String,WCHAR Character) {$/;"	f
ua_wcscpy	.\stralign.h	/^  __CRT_INLINE PUWSTR ua_wcscpy(PUWSTR Destination,PCUWSTR Source) { return wcscpy(Destination,Source); }$/;"	f
ua_wcscpy	.\stralign.h	/^  __CRT_INLINE PUWSTR ua_wcscpy(PUWSTR Destination,PCUWSTR Source) {$/;"	f
ua_wcscpy_s	.\sec_api\stralign_s.h	/^  static __inline PUWSTR ua_wcscpy_s(PUWSTR Destination,size_t DestinationSize,PCUWSTR Source) {$/;"	f
ua_wcsicmp	.\stralign.h	/^  __CRT_INLINE int ua_wcsicmp(LPCUWSTR String1,LPCUWSTR String2) {$/;"	f
ua_wcslen	.\stralign.h	/^  __CRT_INLINE size_t ua_wcslen(PCUWSTR String) {$/;"	f
ua_wcsrchr	.\stralign.h	/^  __CRT_INLINE PUWSTR ua_wcsrchr(PUWSTR String,WCHAR Character) {$/;"	f
ua_wcsrchr	.\stralign.h	/^  __CRT_INLINE PUWSTR_C ua_wcsrchr(PCUWSTR String,WCHAR Character) {$/;"	f
ulltoa	.\stdlib.h	/^  __MINGW_EXTENSION __CRT_INLINE char *__cdecl ulltoa (unsigned long long _n, char * _c, int _i) { return _ui64toa (_n, _c, _i); }$/;"	f
ulltow	.\stdlib.h	/^  __MINGW_EXTENSION __CRT_INLINE wchar_t *__cdecl ulltow (unsigned long long _n, wchar_t * _w, int _i) { return _ui64tow (_n, _w, _i); }$/;"	f
unpack_high	.\dvec.h	/^inline F64vec2 unpack_high(const F64vec2 &a,const F64vec2 &b) { return _mm_unpackhi_pd(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline I16vec8 unpack_high(const I16vec8 &a,const I16vec8 &b) { return _mm_unpackhi_epi16(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline I32vec4 unpack_high(const I32vec4 &a,const I32vec4 &b) { return _mm_unpackhi_epi32(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline I64vec2 unpack_high(const I64vec2 &a,const I64vec2 &b) {return _mm_unpackhi_epi64(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline I8vec16 unpack_high(const I8vec16 &a,const I8vec16 &b) { return _mm_unpackhi_epi8(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline Is16vec8 unpack_high(const Is16vec8 &a,const Is16vec8 &b) { return _mm_unpackhi_epi16(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline Is32vec4 unpack_high(const Is32vec4 &a,const Is32vec4 &b) { return _mm_unpackhi_epi32(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline Is8vec16 unpack_high(const Is8vec16 &a,const Is8vec16 &b) { return _mm_unpackhi_epi8(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline Iu16vec8 unpack_high(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_unpackhi_epi16(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline Iu32vec4 unpack_high(const Iu32vec4 &a,const Iu32vec4 &b) { return _mm_unpackhi_epi32(a,b); }$/;"	f
unpack_high	.\dvec.h	/^inline Iu8vec16 unpack_high(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_unpackhi_epi8(a,b); }$/;"	f
unpack_high	.\fvec.h	/^inline F32vec4 unpack_high(const F32vec4 &a,const F32vec4 &b) { return _mm_unpackhi_ps(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline F64vec2 unpack_low(const F64vec2 &a,const F64vec2 &b) { return _mm_unpacklo_pd(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline I16vec8 unpack_low(const I16vec8 &a,const I16vec8 &b) { return _mm_unpacklo_epi16(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline I32vec4 unpack_low(const I32vec4 &a,const I32vec4 &b) { return _mm_unpacklo_epi32(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline I64vec2 unpack_low(const I64vec2 &a,const I64vec2 &b) {return _mm_unpacklo_epi64(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline I8vec16 unpack_low(const I8vec16 &a,const I8vec16 &b) { return _mm_unpacklo_epi8(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline Is16vec8 unpack_low(const Is16vec8 &a,const Is16vec8 &b) { return _mm_unpacklo_epi16(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline Is32vec4 unpack_low(const Is32vec4 &a,const Is32vec4 &b) { return _mm_unpacklo_epi32(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline Is8vec16 unpack_low(const Is8vec16 &a,const Is8vec16 &b) { return _mm_unpacklo_epi8(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline Iu16vec8 unpack_low(const Iu16vec8 &a,const Iu16vec8 &b) { return _mm_unpacklo_epi16(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline Iu32vec4 unpack_low(const Iu32vec4 &a,const Iu32vec4 &b) { return _mm_unpacklo_epi32(a,b); }$/;"	f
unpack_low	.\dvec.h	/^inline Iu8vec16 unpack_low(const Iu8vec16 &a,const Iu8vec16 &b) { return _mm_unpacklo_epi8(a,b); }$/;"	f
unpack_low	.\fvec.h	/^inline F32vec4 unpack_low(const F32vec4 &a,const F32vec4 &b) { return _mm_unpacklo_ps(a,b); }$/;"	f
updateStatus	.\gdiplus\gdiplusbrush.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Brush
updateStatus	.\gdiplus\gdiplusgraphics.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Graphics
updateStatus	.\gdiplus\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:CustomLineCap
updateStatus	.\gdiplus\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Font
updateStatus	.\gdiplus\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:FontCollection
updateStatus	.\gdiplus\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:FontFamily
updateStatus	.\gdiplus\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Image
updateStatus	.\gdiplus\gdiplusheaders.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Region
updateStatus	.\gdiplus\gdiplusimageattributes.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:ImageAttributes
updateStatus	.\gdiplus\gdiplusmatrix.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Matrix
updateStatus	.\gdiplus\gdipluspath.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:GraphicsPath
updateStatus	.\gdiplus\gdipluspath.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:GraphicsPathIterator
updateStatus	.\gdiplus\gdipluspen.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:Pen
updateStatus	.\gdiplus\gdiplusstringformat.h	/^	Status updateStatus(Status newStatus) const$/;"	f	class:StringFormat
utime	.\sys\utime.h	/^__CRT_INLINE int __cdecl utime(const char *_Filename,struct utimbuf *_Utimbuf) {$/;"	f
vasprintf	.\stdio.h	/^int vasprintf(char **__ret, const char *__format, __builtin_va_list __local_argv)$/;"	f
vfprintf	.\stdio.h	/^int vfprintf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)$/;"	f
vfscanf	.\stdio.h	/^  int vfscanf (FILE *__stream,  const char *__format, __builtin_va_list __local_argv)$/;"	f
vfscanf	.\stdio.h	/^int vfscanf (FILE *__stream,  const char *__format, __builtin_va_list __local_argv)$/;"	f
vfwprintf	.\stdio.h	/^int vfwprintf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vfwprintf	.\wchar.h	/^int vfwprintf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vfwscanf	.\stdio.h	/^  int vfwscanf (FILE *__stream,  const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vfwscanf	.\stdio.h	/^int vfwscanf (FILE *__stream,  const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vfwscanf	.\wchar.h	/^  int vfwscanf (FILE *__stream,  const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vfwscanf	.\wchar.h	/^int vfwscanf (FILE *__stream,  const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vprintf	.\stdio.h	/^int vprintf (const char *__format, __builtin_va_list __local_argv)$/;"	f
vscanf	.\stdio.h	/^  int vscanf(const char *__format,  __builtin_va_list __local_argv)$/;"	f
vscanf	.\stdio.h	/^int vscanf(const char *__format,  __builtin_va_list __local_argv)$/;"	f
vsnprintf	.\stdio.h	/^  int vsnprintf (char * __restrict__ __stream, size_t __n, const char * __restrict__ __format, va_list __local_argv)$/;"	f
vsnprintf	.\stdio.h	/^int vsnprintf (char *__stream, size_t __n, const char *__format, __builtin_va_list __local_argv)$/;"	f
vsnwprintf	.\stdio.h	/^  int __cdecl vsnwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, va_list arg)$/;"	f
vsnwprintf	.\stdio.h	/^int vsnwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vsnwprintf	.\wchar.h	/^  int __cdecl vsnwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, va_list arg)$/;"	f
vsnwprintf	.\wchar.h	/^int vsnwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vsprintf	.\stdio.h	/^int vsprintf (char *__stream, const char *__format, __builtin_va_list __local_argv)$/;"	f
vsscanf	.\stdio.h	/^  int vsscanf (const char * __restrict__ __source, const char * __restrict__ __format, __builtin_va_list __local_argv)$/;"	f
vsscanf	.\stdio.h	/^int vsscanf (const char *__source, const char *__format, __builtin_va_list __local_argv)$/;"	f
vswscanf	.\stdio.h	/^  int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)$/;"	f
vswscanf	.\stdio.h	/^int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)$/;"	f
vswscanf	.\wchar.h	/^  int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)$/;"	f
vswscanf	.\wchar.h	/^int vswscanf (const wchar_t *__source, const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vwprintf	.\stdio.h	/^int vwprintf (const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vwprintf	.\wchar.h	/^int vwprintf (const wchar_t *__format, __builtin_va_list __local_argv)$/;"	f
vwscanf	.\stdio.h	/^  int vwscanf(const wchar_t *__format,  __builtin_va_list __local_argv)$/;"	f
vwscanf	.\stdio.h	/^int vwscanf(const wchar_t *__format,  __builtin_va_list __local_argv)$/;"	f
vwscanf	.\wchar.h	/^  int vwscanf(const wchar_t *__format,  __builtin_va_list __local_argv)$/;"	f
vwscanf	.\wchar.h	/^int vwscanf(const wchar_t *__format,  __builtin_va_list __local_argv)$/;"	f
wcsnlen_s	.\sec_api\string_s.h	/^  __forceinline size_t __cdecl wcsnlen_s(const wchar_t * _src, size_t _count) {$/;"	f
wcsnlen_s	.\sec_api\wchar_s.h	/^  __forceinline size_t __cdecl wcsnlen_s(const wchar_t * _src, size_t _count) {$/;"	f
wcstod	.\stdlib.h	/^  double __cdecl wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){$/;"	f
wcstod	.\wchar.h	/^  double __cdecl wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){$/;"	f
wcstof	.\stdlib.h	/^  float __cdecl wcstof(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){$/;"	f
wcstof	.\wchar.h	/^  float __cdecl wcstof(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){$/;"	f
wmemchr	.\wchar.h	/^  __CRT_INLINE _CONST_RETURN wchar_t *__cdecl wmemchr(const wchar_t *_S,wchar_t _C,size_t _N) {$/;"	f
wmemcmp	.\wchar.h	/^  __CRT_INLINE int __cdecl wmemcmp(const wchar_t *_S1,const wchar_t *_S2,size_t _N) {$/;"	f
wmemcpy	.\wchar.h	/^  __CRT_INLINE wchar_t *__cdecl wmemcpy(wchar_t * __restrict__ _S1,const wchar_t * __restrict__ _S2,size_t _N)$/;"	f
wmemmove	.\wchar.h	/^  __CRT_INLINE wchar_t *__cdecl wmemmove(wchar_t *_S1,const wchar_t *_S2,size_t _N) { return (wchar_t *)memmove(_S1,_S2,_N*sizeof(wchar_t)); }$/;"	f
wmemset	.\wchar.h	/^  __CRT_INLINE wchar_t *__cdecl wmemset(wchar_t *_S,wchar_t _C,size_t _N) {$/;"	f
wprintf	.\stdio.h	/^int wprintf (const wchar_t *__format, ...)$/;"	f
wprintf	.\wchar.h	/^int wprintf (const wchar_t *__format, ...)$/;"	f
wscanf	.\stdio.h	/^int wscanf(const wchar_t *__format, ...)$/;"	f
wscanf	.\wchar.h	/^int wscanf(const wchar_t *__format, ...)$/;"	f
wtoll	.\stdlib.h	/^  __MINGW_EXTENSION __CRT_INLINE long long  __cdecl wtoll (const wchar_t * _w) { return _wtoi64 (_w); }$/;"	f
xEnumDisplayDevices	.\multimon.h	/^  WINBOOL WINAPI xEnumDisplayDevices (PVOID Unused, DWORD iDevNum, PDISPLAY_DEVICE lpDisplayDevice, DWORD flags) {$/;"	f
xEnumDisplayMonitors	.\multimon.h	/^  WINBOOL WINAPI xEnumDisplayMonitors (HDC hdcOptionalForPainting, LPCRECT lprcEnumMonitorsThatIntersect, MONITORENUMPROC lpfnEnumProc, LPARAM dwData) {$/;"	f
xGetMonitorInfo	.\multimon.h	/^  WINBOOL WINAPI xGetMonitorInfo (HMONITOR hmon, LPMONITORINFO pmi) {$/;"	f
xGetSystemMetrics	.\multimon.h	/^  int WINAPI xGetSystemMetrics(int n) {$/;"	f
xMonitorFromPoint	.\multimon.h	/^  HMONITOR WINAPI xMonitorFromPoint (POINT pt, DWORD flags) {$/;"	f
xMonitorFromRect	.\multimon.h	/^  HMONITOR WINAPI xMonitorFromRect (LPCRECT pr, DWORD flags) {$/;"	f
xMonitorFromWindow	.\multimon.h	/^  HMONITOR WINAPI xMonitorFromWindow (HWND hw, DWORD flags) {$/;"	f
~AdjustableArrowCap	.\gdiplus\gdipluslinecaps.h	/^	virtual ~AdjustableArrowCap()$/;"	f	class:AdjustableArrowCap
~AsyncEventStruct	.\mspstrm.h	/^    ~AsyncEventStruct() {$/;"	f	struct:CPTEventSink::AsyncEventStruct
~Bitmap	.\gdiplus\gdiplusheaders.h	/^	virtual ~Bitmap()$/;"	f	class:Bitmap
~Brush	.\gdiplus\gdiplusbrush.h	/^	virtual ~Brush()$/;"	f	class:Brush
~CCSLock	.\msputils.h	/^  ~CCSLock() { LeaveCriticalSection(m_pCritSec); }$/;"	f	class:CCSLock
~CCritSec	.\stllock.h	/^  ~CCritSec() { DeleteCriticalSection(this); }$/;"	f	class:CCritSec
~CD3D10_BUFFER_DESC	.\d3d10.h	/^    ~CD3D10_BUFFER_DESC() {}$/;"	f	struct:CD3D10_BUFFER_DESC
~CD3D10_TEXTURE1D_DESC	.\d3d10.h	/^    ~CD3D10_TEXTURE1D_DESC() {}$/;"	f	struct:CD3D10_TEXTURE1D_DESC
~CD3D10_TEXTURE2D_DESC	.\d3d10.h	/^    ~CD3D10_TEXTURE2D_DESC() {}$/;"	f	struct:CD3D10_TEXTURE2D_DESC
~CD3D11_BLEND_DESC	.\d3d11.h	/^    ~CD3D11_BLEND_DESC() {}$/;"	f	struct:CD3D11_BLEND_DESC
~CD3D11_BUFFER_DESC	.\d3d11.h	/^    ~CD3D11_BUFFER_DESC() {}$/;"	f	struct:CD3D11_BUFFER_DESC
~CD3D11_RASTERIZER_DESC	.\d3d11.h	/^    ~CD3D11_RASTERIZER_DESC() {}$/;"	f	struct:CD3D11_RASTERIZER_DESC
~CD3D11_RENDER_TARGET_VIEW_DESC	.\d3d11.h	/^    ~CD3D11_RENDER_TARGET_VIEW_DESC() {}$/;"	f	struct:CD3D11_RENDER_TARGET_VIEW_DESC
~CD3D11_SAMPLER_DESC	.\d3d11.h	/^    ~CD3D11_SAMPLER_DESC() {}$/;"	f	struct:CD3D11_SAMPLER_DESC
~CD3D11_SHADER_RESOURCE_VIEW_DESC	.\d3d11.h	/^    ~CD3D11_SHADER_RESOURCE_VIEW_DESC() {}$/;"	f	struct:CD3D11_SHADER_RESOURCE_VIEW_DESC
~CD3D11_TEXTURE2D_DESC	.\d3d11.h	/^    ~CD3D11_TEXTURE2D_DESC() {}$/;"	f	struct:CD3D11_TEXTURE2D_DESC
~CDXArray	.\dxtmpl.h	/^CDXArray<TYPE,ARG_TYPE>::~CDXArray() {$/;"	f	class:CDXArray
~CDXList	.\dxtmpl.h	/^CDXList<TYPE,ARG_TYPE>::~CDXList() {$/;"	f	class:CDXList
~CDXMap	.\dxtmpl.h	/^CDXMap<KEY,ARG_KEY,VALUE,ARG_VALUE>::~CDXMap() {$/;"	f	class:CDXMap
~CImpersonateClientHelper	.\wmiatlprov.h	/^    ~CImpersonateClientHelper() {$/;"	f	class:ATL::CImpersonateClientHelper
~CInstanceProviderHelper	.\wmiatlprov.h	/^    virtual ~CInstanceProviderHelper() { }$/;"	f	class:ATL::CInstanceProviderHelper
~CIntrinsicEventProviderHelper	.\wmiatlprov.h	/^    virtual ~CIntrinsicEventProviderHelper() { }$/;"	f	class:ATL::CIntrinsicEventProviderHelper
~CLock	.\msputils.h	/^  ~CLock() { m_CriticalSection.Unlock(); }$/;"	f	class:CLock
~CMSPArray	.\msputils.h	/^  ~CMSPArray() { RemoveAll(); }$/;"	f	class:CMSPArray
~CMSPCritSection	.\msputils.h	/^  ~CMSPCritSection() { DeleteCriticalSection(&m_CritSec); }$/;"	f	class:CMSPCritSection
~CMSPThread	.\mspthrd.h	/^  ~CMSPThread() { };$/;"	f	class:CMSPThread
~CParseXML	.\parser.h	/^  ~CParseXML () {$/;"	f	class:CParseXML
~CPlugTerminalClassInfo	.\mspaddr.h	/^  ~CPlugTerminalClassInfo() {$/;"	f	class:CPlugTerminalClassInfo
~CPlugTerminalSuperclassInfo	.\mspaddr.h	/^  ~CPlugTerminalSuperclassInfo() {$/;"	f	class:CPlugTerminalSuperclassInfo
~CProviderHelper	.\wmiatlprov.h	/^    virtual ~CProviderHelper() { }$/;"	f	class:ATL::CProviderHelper
~CachedBitmap	.\gdiplus\gdiplusimpl.h	/^__inline__ CachedBitmap::~CachedBitmap()$/;"	f	class:CachedBitmap
~CdbWide	.\_dbdao.h	/^  DESTRUCTOR ~CdbWide() {$/;"	f	class:CdbWide
~ComPtr	.\wrl\client.h	/^            ~ComPtr() throw() {$/;"	f	class:Microsoft::WRL::ComPtr
~CustomLineCap	.\gdiplus\gdiplusheaders.h	/^	virtual ~CustomLineCap()$/;"	f	class:CustomLineCap
~Data_t	.\comutil.h	/^inline _bstr_t::Data_t::~Data_t() throw() { _Free(); }$/;"	f	class:_bstr_t::Data_t
~FLOATSAFE	.\ddk\fltsafe.h	/^  FLOATSAFE::~FLOATSAFE(void) {$/;"	f	class:FLOATSAFE::FLOATSAFE
~Font	.\gdiplus\gdiplusimpl.h	/^__inline__ Font::~Font()$/;"	f	class:Font
~FontCollection	.\gdiplus\gdiplusheaders.h	/^	virtual ~FontCollection() {}$/;"	f	class:FontCollection
~FontFamily	.\gdiplus\gdiplusimpl.h	/^__inline__ FontFamily::~FontFamily()$/;"	f	class:FontFamily
~Graphics	.\gdiplus\gdiplusgraphics.h	/^	~Graphics()$/;"	f	class:Graphics
~GraphicsPath	.\gdiplus\gdipluspath.h	/^	~GraphicsPath()$/;"	f	class:GraphicsPath
~GraphicsPathIterator	.\gdiplus\gdipluspath.h	/^	~GraphicsPathIterator()$/;"	f	class:GraphicsPathIterator
~HStringReference	.\wrl\wrappers\corewrappers.h	/^                ~HStringReference() throw() {$/;"	f	class:Microsoft::WRL::Wrappers::HStringReference
~Image	.\gdiplus\gdiplusheaders.h	/^	virtual ~Image()$/;"	f	class:Image
~ImageAttributes	.\gdiplus\gdiplusimageattributes.h	/^	~ImageAttributes()$/;"	f	class:ImageAttributes
~InstalledFontCollection	.\gdiplus\gdiplusheaders.h	/^	virtual ~InstalledFontCollection() {}$/;"	f	class:InstalledFontCollection
~Matrix	.\gdiplus\gdiplusmatrix.h	/^	~Matrix()$/;"	f	class:Matrix
~Metafile	.\gdiplus\gdiplusmetafile.h	/^	virtual ~Metafile()$/;"	f	class:Metafile
~PMSIHANDLE	.\msi.h	/^  ~PMSIHANDLE() { if (m_h!=0) MsiCloseHandle (m_h); }$/;"	f	class:PMSIHANDLE
~PathData	.\gdiplus\gdiplustypes.h	/^	~PathData() {$/;"	f	struct:PathData
~Pen	.\gdiplus\gdipluspen.h	/^	~Pen()$/;"	f	class:Pen
~PrivateFontCollection	.\gdiplus\gdiplusheaders.h	/^	virtual ~PrivateFontCollection()$/;"	f	class:PrivateFontCollection
~Region	.\gdiplus\gdiplusimpl.h	/^__inline__ Region::~Region()$/;"	f	class:Region
~RoInitializeWrapper	.\wrl\wrappers\corewrappers.h	/^                ~RoInitializeWrapper() {$/;"	f	class:Microsoft::WRL::Wrappers::RoInitializeWrapper
~StringFormat	.\gdiplus\gdiplusstringformat.h	/^	~StringFormat()$/;"	f	class:StringFormat
~_bstr_t	.\comutil.h	/^inline _bstr_t::~_bstr_t() throw() { _Free(); }$/;"	f	class:_bstr_t
~_com_error	.\comdef.h	/^inline _com_error::~_com_error() throw() {$/;"	f	class:_com_error
~_com_ptr_t	.\comip.h	/^  ~_com_ptr_t() throw() { _Release(); }$/;"	f	class:_com_ptr_t
~_variant_t	.\comutil.h	/^inline _variant_t::~_variant_t() throw() { ::VariantClear(this); }$/;"	f	class:_variant_t
