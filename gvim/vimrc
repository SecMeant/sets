set nocompatible

if $USER_VIM_ENABLE_PLUGINS == 'Y'
  call plug#begin('~/.vim/plugged')

  Plug 'preservim/nerdtree'
  Plug 'rust-lang/rust.vim'
  Plug 'junegunn/fzf'
  Plug 'lervag/vimtex'
  Plug 'tyru/skk.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }

  let g:tex_flavor = 'latex'

  call plug#end()
endif

if $USER_VIM_LOAD_LOCAL_CFG == 'Y'
  set exrc
else
  set secure
endif

filetype plugin on
filetype plugin indent on
syntax on

colorscheme archman

if has("unix")
  let vimdir = ".vim"
elseif has('win32') || has('win64')
  let vimdir = "vimfiles"
endif

if has('gui_running')
  " removes off tool and menu bars
  set guioptions -=m
  set guioptions -=T

  " removes scrolls
  set guioptions -=r
  set guioptions -=L

  " sets initial size of gvim window
  set lines=25 columns=95
else 
  set bg=dark
endif

set number
map <F2> :set relativenumber!<CR>

if has('win32') || has('win64')
  set guifont=IBM_Plex_Mono_Text:h9:cANSI:qDRAFT
elseif has('unix')
  set guifont=Ubuntu\ Mono\ 8
endif

set encoding=utf-8
set autoindent
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch
set wildmenu
set linebreak

nnoremap <Up> gk
nnoremap <Down> gj

nnoremap k gk
nnoremap j gj

nnoremap <C-Up> 10gk
nnoremap <C-Down> 10gj

nnoremap <C-K> 10gk
nnoremap <C-J> 10gj

inoremap <C-k> 10gk
inoremap <C-j> 10gj

inoremap <C-Up> <C-o>10gk
inoremap <C-Down> <C-o>10gj

set guicursor=n-v-c-i:block-Cursor

highlight Cursor guifg=steelblue guibg=darkgrey
highlight iCursor guifg=steelblue guibg=darkgrey

set swapfile
if has('win32') || has('win64')
  set dir=%HOMEPATH%\vimtmp
  set belloff=all " dont beep
elseif has('unix')
  set dir=~/.cache/.vimtmp

  if has('nvim')
    set viminfo+=n~/.vim/nviminfo
  else
    set viminfo+=n~/.vim/viminfo
  endif

endif

set completeopt=menuone,noselect

"autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
"autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)

set laststatus=2
set statusline=%<%f%m\ \[%{&ff}:%{&fenc}:%Y]\ %=\ %l\/%L\ :\ %c%V

set tags=./tags;
set path=.;

function! Gentags()
  !ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
endfunction

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <c-@> coc#refresh()

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gi <Plug>(coc-diagnostic-info)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap gs :CocList -I symbols<cr>
nmap rn <Plug>(coc-rename)
nmap gf  <Plug>(coc-fix-current)
map ff <Plug>(coc-format-selected)

nnoremap <c-p> :FZF<CR>
let g:fzf_layout = {'down' : '25%'}

" Search inside braces
nnoremap sib vi}<Esc>/\%V

let g:asyncrun_open = 0

set list lcs=trail:\Â·,tab:\|\ 

" Leave cursor line when leaving window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" Set spell check for polish tex files
"au BufReadPost *.tex setlocal spell spelllang=pl
"

function StyleSpaces()
  set expandtab
  set tabstop=2
  set softtabstop=2
endfunction

function StyleTabs()
  set noexpandtab
  set tabstop=8
endfunction

set nofixendofline
set noeol

" F10 will echo information about highlight groups of the word under cursor
" They are used for sytnax highlighting and this feature is usefull when
" debugging colors.
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

cnoreabbrev vgrep AsyncRun grep -rn